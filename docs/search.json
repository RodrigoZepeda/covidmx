[{"path":"https://rodrigozepeda.github.io/covidmx/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 covidmx authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Estudio_de_Caso_CDMX.html","id":"casos-semanales-y-número-efectivo-de-reproducción","dir":"Articles","previous_headings":"","what":"Casos semanales y número efectivo de reproducción","title":"Estudio de caso: Ciudad de México","text":"Comenzamos con el primer panel para lo cual necesitamos correr dos funciones: la de casos y la del número efectivo de reproducción. Calculamos ambos seleccionando la entidad y sólo los confirmados: Cada una de las bases de datos se encuentran dentro de datos_covid con diferente nombre: Por otro lado descargamos los datos de variantes Generamos entonces una base única partir del 2021/11/20 que contenga información de variantes y casos Así se ve la base generada: Hacemos la gráfica comenzando con unas barras con colores por variante  Sobreponemos el RT y agregamos formato","code":"datos_covid <- datos_covid |>   #Calculamos los casos   casos(entidades          = \"CIUDAD DE MÉXICO\",         group_by_entidad   = FALSE,         tipo_clasificacion = \"Confirmados COVID\") |>   #Y calculamos el estima_rt   estima_rt(entidades = \"CIUDAD DE MÉXICO\",      min_date  = as.Date(\"2021/11/20\", format = \"%Y/%m/%d\"),      tipo_clasificacion = \"Confirmados COVID\",      method = \"parametric_si\",        #Método de estimación del estima_rt      config = EpiEstim::make_config(        list(        mean_si = 3.5, #Media de tiempo del intervalo serial        std_si = 1.5   #Varianza de tiempo del intervalo serial        )     )) names(datos_covid) ## [1] \"dats\"       \"disconnect\" \"dict\"       \"casos\"      \"estima_rt\" variantes <- descarga_datos_variantes_GISAID(\"cdmx\") #Limpiamos del estima_rt los últimas dos semanas porque se cae datos_covid$estima_rt <- datos_covid$estima_rt |>   filter(FECHA_SINTOMAS <= today() - weeks(2))  #Filtramos las fechas para coincidir con el RT datos_covid$casos <- datos_covid$casos |>   filter(FECHA_SINTOMAS >= as.Date(\"2021/11/20\", format = \"%Y/%m/%d\"))   #Asignamos semana epidemiológica y año para la coloración y colapsamos por semana datos_covid$casos <- datos_covid$casos |>   mutate(SEMANA_EPI = epiweek(FECHA_SINTOMAS)) |>   mutate(ANIO_EPI   = epiyear(FECHA_SINTOMAS)) |>   group_by(SEMANA_EPI, ANIO_EPI) |>   summarise(n = sum(n), .groups = \"keep\")  #Unimos la información de variantes datos_covid$casos <- datos_covid$casos |>   #Renombramos pues la base de variantes ya trae una n   rename(casos_covid = n) |>   #Juntamos la info de variantes   left_join(variantes, by = c(\"SEMANA_EPI\" = \"semana\", \"ANIO_EPI\" = \"ano\")) |>   #Truco para convertir semana epidemiológica en fecha   left_join(     tibble(fecha = seq(ymd(\"2021/11/20\"), today(), by = \"1 week\")) |>       mutate(SEMANA_EPI = epiweek(fecha)) |>       mutate(ANIO_EPI = epiyear(fecha)),      by = c(\"SEMANA_EPI\", \"ANIO_EPI\")   ) head(datos_covid$casos) ## # A tibble: 6 × 9 ## # Groups:   SEMANA_EPI, ANIO_EPI [1] ##   SEMANA_EPI ANIO_EPI casos_c…¹ variant     n    freq Actualizacion       Fuente ##        <dbl>    <dbl>     <dbl> <chr>   <int>   <dbl> <dttm>              <chr>  ## 1          1     2022     76325 Omicro…     1 0.00202 2022-09-05 03:14:30 GISAI… ## 2          1     2022     76325 Omicro…     1 0.00202 2022-09-05 03:14:30 GISAI… ## 3          1     2022     76325 Omicro…     2 0.00403 2022-09-05 03:14:30 GISAI… ## 4          1     2022     76325 Omicro…     3 0.00605 2022-09-05 03:14:30 GISAI… ## 5          1     2022     76325 VOC De…    17 0.0343  2022-09-05 03:14:30 GISAI… ## 6          1     2022     76325 Omicro…   472 0.952   2022-09-05 03:14:30 GISAI… ## # … with 1 more variable: fecha <date>, and abbreviated variable name ## #   ¹​casos_covid ggplot() +   geom_col(aes(x = fecha, y = as.numeric(casos_covid)*freq, fill = variant),             data = datos_covid$casos) +   scale_fill_manual(\"Variante\", values = met.brewer(\"Cross\", n = 6)) cdmx_rt <- ggplot() +   geom_col(aes(x = as.Date(fecha), y = as.numeric(casos_covid)*freq, fill = variant),             data = datos_covid$casos) +   #Se multiplica por 40,000 para andar cerca de la media de casos   geom_line(aes(x = as.Date(FECHA_SINTOMAS), 40000*`Median(R)`), data = datos_covid$estima_rt,             linetype = \"solid\", linewidth = 1) +    scale_fill_manual(\"Variante\", values = met.brewer(\"Cross\", n = 6)) +   labs(     x = \"Fecha de inicio de síntomas\",     y = \"Casos confirmados de COVID-19\",     title = \"\",     caption = \"**Fuente:** GISAID EpiCoV y Github: @RodrigoZepeda/VariantesCovid\"   ) +   scale_y_continuous(labels = scales::label_comma(),                        sec.axis = sec_axis(~ . / 40000,                                           name = \"Número efectivo de reproducción (RT)\")) +   theme_minimal() +   theme(     legend.position = \"top\",     plot.caption    = element_markdown()     ) +   geom_hline(aes(yintercept = 40000), linetype = \"dashed\", color = \"gray25\") +   coord_cartesian(xlim = c(min(datos_covid$casos$fecha), max(datos_covid$casos$fecha))) +   scale_x_date(date_breaks = \"1 month\", date_labels = \"%b-%Y\")  cdmx_rt"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Estudio_de_Caso_CDMX.html","id":"ocupación-hospitalaria-y-hospitalizaciones","dir":"Articles","previous_headings":"","what":"Ocupación hospitalaria y hospitalizaciones","title":"Estudio de caso: Ciudad de México","text":"Por otro lado descargamos la información de ocupación hospitalaria de la RED IRAG. Obtenemos entonces las unidades médicas con mayor ocupación en la fecha más reciente: Por otro lado juntamos las bases de ocupación y de casos hospitalizados por fecha de ingreso Finalmente realizamos la gráfica  Por otro lado graficamos la ocupación por unidad:  Podemos conjuntar ambos en un solo gráfico con cowplot:","code":"#Descarga de datos por estado ocupacion_estado <- descarga_datos_red_irag(\"Estatal\")  #Descargamos las unidades médicas ocupacion_UM     <- descarga_datos_red_irag(\"Unidad Médica\") ocupacion_UM <- ocupacion_UM |>    filter(Estado == \"Ciudad de México\") |>   filter(Fecha == max(Fecha)) #Obtenemos la ocupación por estado ocupacion_cdmx <- ocupacion_estado |>   filter(Estado == \"Ciudad de México\")  #Y los casos hospitalizados por fecha de ingreso datos_covid <- datos_covid |> casos(   entidades        = \"CIUDAD DE MÉXICO\",   group_by_entidad = FALSE,   fecha_tipo       = \"Ingreso\",   tipo_paciente    = \"HOSPITALIZADO\",   list_name        = \"hospitalizados\" )  #Pegamos en la misma base datos_covid$hospitalizados <- datos_covid$hospitalizados |>   left_join(ocupacion_cdmx, by = c(\"FECHA_INGRESO\" = \"Fecha\")) #Obtenemos el máximo de pacientes para el reescalamiento m_pacientes <- max(datos_covid$hospitalizados$n, na.rm = T) |> as.numeric()  #Obtenemos los colores colores     <- met.brewer(\"Cross\")    #Reescalamos el porcentaje para que aparezca plot_hospitalizados <- ggplot(datos_covid$hospitalizados) +   geom_area(aes(x = as.Date(FECHA_INGRESO), y = `Hospitalizados (%)`/100*m_pacientes),             fill = colores[8], alpha = 0.25) +   geom_line(aes(x = as.Date(FECHA_INGRESO), y = as.double(n)), color = colores[1]) +   theme_minimal() +   coord_cartesian(xlim = c(ymd(\"2020/04/02\"), today())) +   scale_x_date(date_breaks = \"3 months\", date_labels = \"%b-%Y\", expand = c(0,0)) +   labs(     x = \"\",      y = \"Hospitalizados\",     title = glue(\"<span style='color:{colores[1]}'>PACIENTES HOSPITALIZADOS<\/span> Y \",                  \"<span style='color:{colores[8]}'>% DE OCUPACIÓN<\/span>\"),     caption = glue(\"**Fuente:** _Github \",                     \"@RodrigoZepeda/CapacidadHospitalaria_\")   ) +   theme(     axis.text.x  = element_text(angle = 90, hjust = 1),     plot.title   = element_markdown(),     plot.caption = element_markdown()   ) +   scale_y_continuous(labels = scales::label_comma(),                        sec.axis = sec_axis(~ . / m_pacientes,                                           labels  = scales::label_percent(),                                          name    = \"Ocupación de la Red IRAG (%)\"))  plot_hospitalizados #Arreglamos como factor y quitamos los de cero ocupación ocupacion_UM <- ocupacion_UM |>   mutate(`Unidad médica` = factor(`Unidad médica`,                                  levels = `Unidad médica`[order(`Hospitalizados (%)`)],                                 ordered = TRUE)) |>   filter(`Hospitalizados (%)` > 0)  #Reescalamos el porcentaje para que aparezca plot_ocupacion <- ggplot(ocupacion_UM) +   geom_col(aes(x = `Unidad médica`, y = `Hospitalizados (%)`/100, fill = `Hospitalizados (%)`)) +   labs(     x = \"\",      y = \"Ocupación de la Unidad Médica (%)\",     caption = \"**Nota** Se excluyen Unidades Médicas con ocupación del 0% o sin reporte.\"   ) +    theme_minimal() +    scale_fill_gradientn(colours =  met.brewer(\"Cross\", direction = -1)) +    coord_flip() +   theme(     legend.position = \"none\",     axis.text.y     = element_text(size = 4),     plot.caption    = element_markdown() ) +   scale_y_continuous(labels = scales::label_percent())  plot_ocupacion plot_hosp <- plot_grid(plot_hospitalizados, ggplot() + theme_void(), plot_ocupacion, ncol = 3,                        rel_widths = c(1, 0.1, 1)) plot_hosp"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Estudio_de_Caso_CDMX.html","id":"positividad","dir":"Articles","previous_headings":"","what":"Positividad","title":"Estudio de caso: Ciudad de México","text":"Generamos la gráfica de positividad donde además se coloque el número de pruebas por semana. Para ello calculamos tanto la positividad como el número de pruebas: Generamos la gráfica de positividad distinguiendo por tipo de prueba:","code":"datos_covid <- datos_covid |>   #Calculamos también la positividad   positividad(     entidades            = \"CIUDAD DE MÉXICO\",      group_by_entidad     = FALSE,      tipo_prueba          = c(\"Antigeno\", \"PCR\"),     group_by_tipo_prueba = TRUE   ) #Nos quedamos sólo a  partir de 2022 datos_covid$positividad <- datos_covid$positividad |>   filter(year(FECHA_SINTOMAS) >= 2022)  #Para poner al nivel mpruebas         <- max(datos_covid$positividad$n_pruebas) |> as.numeric()  positividad_plot <- ggplot(datos_covid$positividad) +   geom_col(aes(x = as.Date(FECHA_SINTOMAS), y = as.numeric(n_pruebas), fill = TIPO_PRUEBA),             alpha = 0.25) +   geom_line(aes(x = as.Date(FECHA_SINTOMAS), y = Positividad*mpruebas, color = TIPO_PRUEBA)) +   theme_minimal() +   scale_x_date(date_breaks = \"1 month\", date_labels = \"%b-%Y\", expand = c(0,0)) +   labs(     x = \"\",      y = \"Número de pruebas realizadas\",     title = glue(\"POSITIVIDAD EN \",                   \"<span style='color:{colores[3]}'>ANTIGENO<\/span> Y \",                   \"<span style='color:{colores[6]}'>PCR<\/span>\")   ) +   scale_y_continuous(labels = scales::label_comma(),                        sec.axis = sec_axis(~ . / mpruebas,                                           labels  = scales::label_percent(),                                          name    = \"Positividad (%)\")) +   scale_fill_manual(\"Tipo de prueba\", values = c(colores[3], colores[6])) +   scale_color_manual(\"Tipo de prueba\", values = c(colores[3], colores[6])) +   theme(     axis.text.x     = element_text(angle = 90, hjust = 1),     legend.position = \"none\",     plot.title      = element_markdown()   )  positividad_plot"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Estudio_de_Caso_CDMX.html","id":"mortalidad","dir":"Articles","previous_headings":"","what":"Mortalidad","title":"Estudio de caso: Ciudad de México","text":"Por último generamos la gráfica de defunciones. Para ello tomamos la misma función que en casos pero con defunciones = TRUE en 4 grupos de edad:  Finalmente unimos este panel con el de positividad","code":"#Calculamos las defunciones por grupo de edad datos_covid <- datos_covid |>   casos(     entidades        = \"CIUDAD DE MÉXICO\",     group_by_entidad = FALSE,     defunciones      = TRUE,     fecha_tipo       = \"Defunción\",     edad_cut         = c(0, 20, 40, 60, Inf),     list_name        = \"defunciones\"   ) #Nos quedamos sólo con 2022 datos_covid$defunciones <- datos_covid$defunciones |>   filter(year(FECHA_DEF) == 2022)  plot_defunciones <- ggplot(datos_covid$defunciones) +   geom_col(aes(x = as.Date(FECHA_DEF), y = as.numeric(n), fill = EDAD_CAT)) +   facet_wrap(~EDAD_CAT, scales = \"free_y\") +   theme_minimal() +   labs(     x = \"\",     y = \"Defunciones\",     title = \"DEFUNCIONES\"   ) +   scale_fill_manual(values = met.brewer(\"Cross\", 4)) +   scale_y_continuous(labels = scales::label_comma(accuracy = 1)) +   scale_x_date(date_breaks = \"1 month\", date_labels = \"%b-%Y\", expand = c(0,0)) +   theme(     axis.text.x = element_text(angle = 90, hjust = 1),     legend.position = \"none\"   )  plot_defunciones plot_defun_pos <-  plot_grid(positividad_plot, ggplot() + theme_void(), plot_defunciones,                              rel_widths = c(1, 0.1, 1), ncol = 3) plot_defun_pos"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Estudio_de_Caso_CDMX.html","id":"generación-del-reporte","dir":"Articles","previous_headings":"","what":"Generación del reporte","title":"Estudio de caso: Ciudad de México","text":"Finalmente juntamos todas las gráficas en un solo grid, agregamos el título: Y ¡magia! quedó la gráfica que elaboramos con los datos del paquete","code":"#Juntamos los plots gráfica_sin_titulo <- plot_grid(cdmx_rt, plot_hosp, plot_defun_pos, ncol = 1)  #Agregamos título plot_title <- ggdraw() + draw_label(\"CIUDAD DE MÉXICO\", fontface='bold', size = 40) plot_grid(plot_title, gráfica_sin_titulo, ncol = 1, rel_heights = c(0.1, 1))"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Estudio_de_Caso_CDMX.html","id":"información-adicional","dir":"Articles","previous_headings":"","what":"Información adicional","title":"Estudio de caso: Ciudad de México","text":"","code":"sessionInfo() ## R version 4.2.0 (2022-04-22) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Big Sur/Monterey 10.16 ##  ## Matrix products: default ## BLAS:   /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ##  [1] MetBrewer_0.2.0    glue_1.6.2         ggtext_0.1.1       cowplot_1.1.1      ##  [5] forcats_0.5.2      stringr_1.4.1      dplyr_1.0.10       purrr_0.3.4        ##  [9] readr_2.1.2        tidyr_1.2.0        tibble_3.1.8       ggplot2_3.3.6      ## [13] tidyverse_1.3.2    lubridate_1.8.0    covidmx_0.6.0.0000 ##  ## loaded via a namespace (and not attached): ##  [1] mcmc_0.9-7            bitops_1.0-7          fs_1.5.2              ##  [4] bit64_4.0.5           httr_1.4.4            rprojroot_2.0.3       ##  [7] tools_4.2.0           backports_1.4.1       bslib_0.4.0           ## [10] utf8_1.2.2            R6_2.5.1              coarseDataTools_0.6-6 ## [13] DBI_1.1.3             colorspace_2.0-3      duckdb_0.4.0          ## [16] withr_2.5.0           tidyselect_1.1.2      gridExtra_2.3         ## [19] EpiEstim_2.2-4        bit_4.0.4             curl_4.3.2            ## [22] compiler_4.2.0        quantreg_5.94         textshaping_0.3.6     ## [25] cli_3.3.0             rvest_1.0.3           SparseM_1.81          ## [28] xml2_1.3.3            desc_1.4.1            labeling_0.4.2        ## [31] sass_0.4.2            scales_1.2.1          rappdirs_0.3.3        ## [34] pkgdown_2.0.6         systemfonts_1.0.4     digest_0.6.29         ## [37] rmarkdown_2.16        MCMCpack_1.6-3        pkgconfig_2.0.3       ## [40] htmltools_0.5.3       dbplyr_2.2.1          fastmap_1.1.0         ## [43] highr_0.9             rlang_1.0.5           readxl_1.4.1          ## [46] rstudioapi_0.14       farver_2.1.1          jquerylib_0.1.4       ## [49] generics_0.1.3        jsonlite_1.8.0        vroom_1.5.7           ## [52] googlesheets4_1.0.1   RCurl_1.98-1.8        magrittr_2.0.3        ## [55] Matrix_1.4-1          Rcpp_1.0.9            munsell_0.5.0         ## [58] fansi_1.0.3           lifecycle_1.0.1       stringi_1.7.8         ## [61] yaml_2.3.5            MASS_7.3-58.1         plyr_1.8.7            ## [64] grid_4.2.0            blob_1.2.3            parallel_4.2.0        ## [67] crayon_1.5.1          lattice_0.20-45       splines_4.2.0         ## [70] haven_2.5.1           gridtext_0.1.4.9000   hms_1.1.2             ## [73] knitr_1.40            pillar_1.8.1          markdown_1.1          ## [76] reshape2_1.4.4        reprex_2.0.2          evaluate_0.16         ## [79] modelr_0.1.9          png_0.1-7             vctrs_0.4.1           ## [82] tzdb_0.3.0            MatrixModels_0.5-0    cellranger_1.1.0      ## [85] gtable_0.3.1          incidence_1.7.3       assertthat_0.2.1      ## [88] cachem_1.0.6          xfun_0.32             pins_1.0.2            ## [91] broom_1.0.1           coda_0.19-4           survival_3.4-0        ## [94] ragg_1.2.2            googledrive_2.0.0     gargle_1.2.0          ## [97] memoise_2.0.1         fitdistrplus_1.1-8    ellipsis_0.3.2"},{"path":[]},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Instalacion_de_MARIADB.html","id":"instalación-en-osx-mac","dir":"Articles","previous_headings":"Instalación","what":"Instalación en OSX (Mac)","title":"Instalación de MariaDB","text":"Para instalar en OSX la recomendación es primero instalar Homebrew. Para ello puedes abrir tu terminal (en aplicaciones o en la pestaña Terminal de RStudio) y copiar siguiente código dándole ENTER al final: Una vez se haya instalado puedes instalar MariaDB escribiendo en la misma terminal: Para garantizar que MariaDB siempre esté prendida en tu computadora utiliza launchctl con: Finalmente para abrir MariaDB ahí mismo en la terminal:","code":"/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" brew install mariadb brew services start mariadb sudo mariadb"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Instalacion_de_MARIADB.html","id":"instalación-en-ubuntu","dir":"Articles","previous_headings":"Instalación","what":"Instalación en Ubuntu","title":"Instalación de MariaDB","text":"Para instalar en Ubuntu abre terminal y actualiza apt: Una vez hayas instalado inicia el servicio de MariaDB: Y para que cada vez que prendes la computadora MariaDB comience sin que le tengas que decir que inicie: Si es la primera vez que estás usando esto te recomiendo correr la configuración de seguridad: Finalmente para abrir MariaDB ahí mismo en la terminal:","code":"sudo apt update && sudo apt install mariadb-server sudo systemctl start mariadb.service sudo systemctl enable mariadb.service sudo mysql_secure_installation sudo mariadb"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Instalacion_de_MARIADB.html","id":"instalación-en-windows","dir":"Articles","previous_headings":"Instalación","what":"Instalación en Windows","title":"Instalación de MariaDB","text":"Descarga el ejecutable de https://mariadb.org/download. Elige la versión más alta posible que sea preview y donde Windows esté listada como una de las opciones. Una vez descargado inicia el instalador. Acepta la licencia. Selecciona dónde quieres que se almacene (el default está bien). Escribe una contraseña para root. Ahí mismo si estás en un servidor sino sólo en tu computadora, desactiva la opción que permite acceso máquinas remotas. Selecciona la opción para usar UTF-8. Selecciona la opción de instalar como servicio llamado MariaDB. El puerto TCP por default es el 3306. Si lo cambias, anota el nuevo. Selecciona siguiente y termina la instalación. Una vez hayas instalado abre la línea de comandos de MariaDB (commandprompt) como administrador.","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Instalacion_de_MARIADB.html","id":"creación-de-usuario","dir":"Articles","previous_headings":"Ajustes para covidmx","what":"Creación de usuario","title":"Instalación de MariaDB","text":"Una vez hayas abierto MARIADB crea un usuario con el nombre que quieras (aquí le pongo usuario) pero tú pon lo que quieras y asígnale una contraseña (aquí le pongo password). Termina de asignarle los permisos: Finalmente armamos una base de datos que se llame COVIDMX (tú ponle como quieras) para usar con el paquete: Finalmente sal de MariaDB:","code":"GRANT ALL ON *.* TO 'usuario'@'localhost' IDENTIFIED BY 'password' WITH GRANT OPTION; FLUSH PRIVILEGES; CREATE DATABASE IF NOT EXISTS covidmx; EXIT;"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Instalacion_de_MARIADB.html","id":"verificación-de-cambios","dir":"Articles","previous_headings":"Ajustes para covidmx","what":"Verificación de cambios","title":"Instalación de MariaDB","text":"Si quieres verificar que asignaste bien tu usuario dentro de MariaDB puedes hacer para ver si sí está ahí: Por otro lado para verificar que hiciste la tabla puedes hacer","code":"SELECT User FROM mysql.user; SHOW DATABASES;"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Instalacion_de_MARIADB.html","id":"variables-de-ambiente","dir":"Articles","previous_headings":"Ajustes para covidmx","what":"Variables de ambiente","title":"Instalación de MariaDB","text":"En R para descargar la base de datos necesitas asignar en descarga_datos_abiertos o en read_datos_abiertos el usuario, password y nombre de base de datos cada vez que lo uses la opción sugerida es crear variables ambientales ya sea en cada script: o como variables ambientales en tu archivo .Renviron: Recuerda que para editar el .Renviron desde R puedes hacer usethis::edit_r_environ(), editar y luego reiniciar R.","code":"descarga_datos_abiertos(   user     = \"tu_usuario\",   password = \"tu_password\",   dbname   = \"covidmx\",   ... ) Sys.setenv(\"MariaDB_user\"     =  \"tu_usuario\") Sys.setenv(\"MariaDB_password\" =  \"tu_password\") Sys.setenv(\"MariaDB_dbname\"   =  \"covidmx\")  #Estos cámbialos si sabes lo que estás haciendo son otros argumentos de DBI::dbConnect  Sys.setenv(\"MariaDB_host\"  =  \"localhost\") Sys.setenv(\"MariaDB_group\" =  \"\") Sys.setenv(\"MariaDB_port\"  =  \"\") MariaDB_user     = \"tu_usuario\" MariaDB_password = \"tu_password\" MariaDB_dbname   = \"covidmx\""},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"instalación","dir":"Articles","previous_headings":"","what":"Instalación","title":"Introducción a covidmx","text":"olvides llamar la librería y ¡codear! NOTA (datos precargados) Si lo que quieres hacer es ponerte jugar con las funciones del paquete directamente puedes saltar hasta la sección de casos y usar los datos precargados:","code":"#install.packages(\"remotes\") remotes::install_github(\"RodrigoZepeda/covidmx\") library(covidmx) library(dplyr) datos_covid <- covidmx::datosabiertos #Uso de los datos precargados"},{"path":[]},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"descarga-automática-de-base-de-datos-abiertos","dir":"Articles","previous_headings":"Datos Abiertos de la Dirección General de Epidemiología","what":"Descarga automática de base de datos abiertos","title":"Introducción a covidmx","text":"Lo más importante es comenzar descargando la base de datos abiertos. Esto lo puedes hacer como sigue: Para propósito de este tutorial trabajaremos con una base de datos más pequeña disponible en el repositorio de Github la cual guardaremos en duckdb bajo el nombre de tutorial. La descarga contiene una conexión duckdb dentro de datos_covid$dats la cual puedes operar con dbplyr. se agregan las etiquetas los datos pues es muy tardado hacerlo: Sin embargo el diccionario se almacena como una lista en dict para su consulta y uso por las funciones internas: por ejemplo para ver el diccionario de antígeno: ¿Se te fue el Internet? te preocupes, descarga_datos_abiertos trabajará con tu descarga más reciente.","code":"datos_covid <- descarga_datos_abiertos() #Cómo vas a guardar tu base .duckdb base_duck   <- \"mi_archivo.duckdb\" dlink       <- c(\"tutorial\" =                     \"https://github.com/RodrigoZepeda/covidmx/raw/main/datos_abiertos_covid19.zip\") datos_covid <- descarga_datos_abiertos(sites.covid = dlink, tblname = \"tutorial\",                                         dbdir = base_duck) datos_covid$dats |> dplyr::glimpse() #> Rows: ?? #> Columns: 40 #> Database: DuckDB 0.3.5-dev1410 [root@Darwin 21.5.0:R 4.2.0//var/folders/42/2kdf45dd1qz5n7kf9lm8ld9r0000gn/T//Rtmp3x4EDm/file135581140e758.duckdb] #> $ FECHA_ACTUALIZACION   <dttm> 2022-07-14, 2022-07-14, 2022-07-14, 2022-07-14,… #> $ ID_REGISTRO           <chr> \"78ce0b\", \"526821\", \"4ab051\", \"ba3171\", \"b970bb\"… #> $ ORIGEN                <int> 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 2, … #> $ SECTOR                <int> 12, 4, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,… #> $ ENTIDAD_UM            <chr> \"03\", \"03\", \"03\", \"03\", \"03\", \"03\", \"03\", \"03\", … #> $ SEXO                  <int> 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ ENTIDAD_NAC           <chr> \"09\", \"03\", \"25\", \"03\", \"03\", \"25\", \"03\", \"17\", … #> $ ENTIDAD_RES           <chr> \"03\", \"03\", \"03\", \"03\", \"03\", \"03\", \"03\", \"03\", … #> $ MUNICIPIO_RES         <chr> \"003\", \"008\", \"008\", \"008\", \"003\", \"003\", \"008\",… #> $ TIPO_PACIENTE         <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, … #> $ FECHA_INGRESO         <dttm> 2021-07-08, 2021-07-01, 2021-07-01, 2021-07-01,… #> $ FECHA_SINTOMAS        <dttm> 2021-07-04, 2021-07-01, 2021-07-01, 2021-07-01,… #> $ FECHA_DEF             <dttm> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ INTUBADO              <int> 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 2, 9… #> $ NEUMONIA              <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, … #> $ EDAD                  <int> 17, 28, 30, 22, 32, 35, 24, 40, 21, 78, 13, 54, … #> $ NACIONALIDAD          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ EMBARAZO              <int> 2, 97, 97, 97, 97, 97, 97, 2, 2, 2, 2, 2, 2, 2, … #> $ HABLA_LENGUA_INDIG    <int> 99, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,… #> $ INDIGENA              <int> 99, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,… #> $ DIABETES              <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, … #> $ EPOC                  <int> 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … #> $ ASMA                  <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … #> $ INMUSUPR              <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … #> $ HIPERTENSION          <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … #> $ OTRA_COM              <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … #> $ CARDIOVASCULAR        <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … #> $ OBESIDAD              <int> 2, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … #> $ RENAL_CRONICA         <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … #> $ TABAQUISMO            <int> 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … #> $ OTRO_CASO             <int> 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … #> $ TOMA_MUESTRA_LAB      <int> 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, … #> $ RESULTADO_LAB         <int> 2, 97, 97, 97, 97, 1, 97, 97, 97, 97, 97, 4, 97,… #> $ TOMA_MUESTRA_ANTIGENO <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ RESULTADO_ANTIGENO    <int> 2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, … #> $ CLASIFICACION_FINAL   <int> 7, 7, 3, 7, 7, 3, 3, 3, 7, 7, 3, 6, 7, 7, 7, 7, … #> $ MIGRANTE              <int> 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, … #> $ PAIS_NACIONALIDAD     <chr> \"México\", \"México\", \"México\", \"México\", \"México\"… #> $ PAIS_ORIGEN           <chr> \"97\", \"97\", \"97\", \"97\", \"97\", \"97\", \"97\", \"97\", … #> $ UCI                   <int> 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 2, 9… datos_covid$dict |> dplyr::glimpse() #> List of 31 #>  $ ORIGEN               : tibble [3 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:3] 1 2 99 #>   ..$ DESCRIPCIÓN: chr [1:3] \"USMER\" \"FUERA DE USMER\" \"NO ESPECIFICADO\" #>  $ SECTOR               : tibble [14 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:14] 1 2 3 4 5 6 7 8 9 10 ... #>   ..$ DESCRIPCIÓN: chr [1:14] \"CRUZ ROJA\" \"DIF\" \"ESTATAL\" \"IMSS\" ... #>  $ SEXO                 : tibble [3 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:3] 1 2 99 #>   ..$ DESCRIPCIÓN: chr [1:3] \"MUJER\" \"HOMBRE\" \"NO ESPECIFICADO\" #>  $ PACIENTE             : tibble [3 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:3] 1 2 99 #>   ..$ DESCRIPCIÓN: chr [1:3] \"AMBULATORIO\" \"HOSPITALIZADO\" \"NO ESPECIFICADO\" #>  $ NACIONALIDAD         : tibble [3 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:3] 1 2 99 #>   ..$ DESCRIPCIÓN: chr [1:3] \"MEXICANA\" \"EXTRANJERA\" \"NO ESPECIFICADO\" #>  $ RESULTADO_LAB        : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 3 4 97 #>   ..$ DESCRIPCIÓN: chr [1:5] \"POSITIVO A SARS-COV-2\" \"NO POSITIVO A SARS-COV-2\" \"RESULTADO PENDIENTE\" \"RESULTADO NO ADECUADO\" ... #>  $ RESULTADO_ANTIGENO   : tibble [3 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:3] 1 2 97 #>   ..$ DESCRIPCIÓN: chr [1:3] \"POSITIVO A SARS-COV-2\" \"NEGATIVO A SARS-COV-2\" \"NO APLICA (CASO SIN MUESTRA)\" #>  $ CLASIFICACION_FINAL  : tibble [7 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE        : num [1:7] 1 2 3 4 5 6 7 #>   ..$ CLASIFICACIÓN: chr [1:7] \"CASO DE COVID-19 CONFIRMADO POR ASOCIACIÓN CLÍNICA EPIDEMIOLÓGICA\" \"CASO DE COVID-19 CONFIRMADO POR COMITÉ DE  DICTAMINACIÓN\" \"CASO DE SARS-COV-2  CONFIRMADO\" \"INVÁLIDO POR LABORATORIO\" ... #>   ..$ DESCRIPCIÓN  : chr [1:7] \"Confirmado por asociación aplica cuando el caso informó ser contacto de un positivo a COVID-19 (y este se encue\"| __truncated__ \"Confirmado por dictaminación solo aplica para defunciones bajo las siguientes condiciones: \\r\\nAl caso no se le\"| __truncated__ \"Confirmado aplica cuando:\\r\\nEl caso tiene muestra de laboratorio o prueba antigénica y resultó positiva  a SAR\"| __truncated__ \"Inválido aplica cuando el caso no tienen asociación clínico epidemiológica, ni dictaminación a COVID-19. Se le \"| __truncated__ ... #>  $ MUNICIPIO_RES        : tibble [2,501 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE_MUNICIPIO: chr [1:2501] \"001\" \"002\" \"003\" \"004\" ... #>   ..$ MUNICIPIO      : chr [1:2501] \"AGUASCALIENTES\" \"ASIENTOS\" \"CALVILLO\" \"COSÍO\" ... #>   ..$ CLAVE_ENTIDAD  : chr [1:2501] \"01\" \"01\" \"01\" \"01\" ... #>  $ INTUBADO             : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ NEUMONIA             : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ EMBARAZO             : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ HABLA LENGUA INDIGENA: tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ INDIGENA             : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ DIABETES             : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ EPOC                 : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ ASMA                 : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ INMUSUPR             : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ HIPERTENSION         : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ CARDIOVASCULAR       : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ OTRO_CASO            : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ TOMA_MUESTRA_LAB     : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ TOMA_MUESTRA_ANTIGENO: tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ OTRA_COMORBILIDAD    : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ OBESIDAD             : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ RENAL_CRONICA        : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ TABAQUISMO           : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ UCI                  : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ ENTIDAD_UM           : tibble [36 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE_ENTIDAD     : chr [1:36] \"01\" \"02\" \"03\" \"04\" ... #>   ..$ ENTIDAD_FEDERATIVA: chr [1:36] \"AGUASCALIENTES\" \"BAJA CALIFORNIA\" \"BAJA CALIFORNIA SUR\" \"CAMPECHE\" ... #>   ..$ ABREVIATURA       : chr [1:36] \"AS\" \"BC\" \"BS\" \"CC\" ... #>  $ ENTIDAD_RES          : tibble [36 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE_ENTIDAD     : chr [1:36] \"01\" \"02\" \"03\" \"04\" ... #>   ..$ ENTIDAD_FEDERATIVA: chr [1:36] \"AGUASCALIENTES\" \"BAJA CALIFORNIA\" \"BAJA CALIFORNIA SUR\" \"CAMPECHE\" ... #>   ..$ ABREVIATURA       : chr [1:36] \"AS\" \"BC\" \"BS\" \"CC\" ... #>  $ ENTIDAD_NAC          : tibble [36 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE_ENTIDAD     : chr [1:36] \"01\" \"02\" \"03\" \"04\" ... #>   ..$ ENTIDAD_FEDERATIVA: chr [1:36] \"AGUASCALIENTES\" \"BAJA CALIFORNIA\" \"BAJA CALIFORNIA SUR\" \"CAMPECHE\" ... #>   ..$ ABREVIATURA       : chr [1:36] \"AS\" \"BC\" \"BS\" \"CC\" ... datos_covid$dict$RESULTADO_ANTIGENO #> # A tibble: 3 × 2 #>   CLAVE DESCRIPCIÓN                  #>   <dbl> <chr>                        #> 1     1 POSITIVO A SARS-COV-2        #> 2     2 NEGATIVO A SARS-COV-2        #> 3    97 NO APLICA (CASO SIN MUESTRA)"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"lectura-desde-duckdb","dir":"Articles","previous_headings":"Datos Abiertos de la Dirección General de Epidemiología","what":"Lectura desde duckdb","title":"Introducción a covidmx","text":"es necesario volver descargar si reinicias tu sesión de R siempre y cuando los hayas guardado en duckdb estableciendo un dbdir (de lo contrario la base de datos sólo dura lo que dure tu sesión de R). Puedes sólo leer los datos abiertos que ya tienes usando la función read_datos_abiertos.R; El proceso de descarga de cualquier base de covidmx es un proceso inteligente. Si ha pasado más de un día desde que descargaste la base el programa te advertirá de que tiene sentido volver descargar. Podemos ver un ejemplo descargando sólo el diccionario (que ya descargamos arriba con descarga_datos_abiertos) Si de todas maneras quieres reintentar la descarga puedes usar force_download = TRUE lo cual verificará mediante pins que la base en línea sea distinta de la que tienes almacenada y en caso afirmativo descargará los datos.","code":"read_datos_abiertos(base_duck, tblname = \"tutorial\") |> glimpse() #> List of 3 #>  $ dats      :List of 2 #>   ..$ src       :List of 2 #>   .. ..$ con  :Formal class 'duckdb_connection' [package \"duckdb\"] with 5 slots #>   .. ..$ disco: NULL #>   .. ..- attr(*, \"class\")= chr [1:4] \"src_duckdb_connection\" \"src_dbi\" \"src_sql\" \"src\" #>   ..$ lazy_query:List of 13 #>   .. ..$ x                :List of 13 #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"lazy_select_query\" \"lazy_query\" #>   .. ..$ select           : tibble [40 × 5] (S3: tbl_df/tbl/data.frame) #>   .. ..$ where            : NULL #>   .. ..$ group_by         : NULL #>   .. ..$ order_by         : NULL #>   .. ..$ distinct         : logi FALSE #>   .. ..$ limit            : NULL #>   .. ..$ select_operation : chr \"mutate\" #>   .. ..$ last_op          : chr \"mutate\" #>   .. ..$ message_summarise: NULL #>   .. ..$ group_vars       : chr(0)  #>   .. ..$ order_vars       : NULL #>   .. ..$ frame            : NULL #>   .. ..- attr(*, \"class\")= chr [1:2] \"lazy_select_query\" \"lazy_query\" #>   ..- attr(*, \"class\")= chr [1:5] \"tbl_duckdb_connection\" \"tbl_dbi\" \"tbl_sql\" \"tbl_lazy\" ... #>  $ disconnect:function ()   #>  $ dict      :List of 31 #>   ..$ ORIGEN               : tibble [3 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ SECTOR               : tibble [14 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ SEXO                 : tibble [3 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ PACIENTE             : tibble [3 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ NACIONALIDAD         : tibble [3 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ RESULTADO_LAB        : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ RESULTADO_ANTIGENO   : tibble [3 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLASIFICACION_FINAL  : tibble [7 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ MUNICIPIO_RES        : tibble [2,501 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ INTUBADO             : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ NEUMONIA             : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ EMBARAZO             : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ HABLA LENGUA INDIGENA: tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ INDIGENA             : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ DIABETES             : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ EPOC                 : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ ASMA                 : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ INMUSUPR             : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ HIPERTENSION         : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CARDIOVASCULAR       : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ OTRO_CASO            : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ TOMA_MUESTRA_LAB     : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ TOMA_MUESTRA_ANTIGENO: tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ OTRA_COMORBILIDAD    : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ OBESIDAD             : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ RENAL_CRONICA        : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ TABAQUISMO           : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ UCI                  : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ ENTIDAD_UM           : tibble [36 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ ENTIDAD_RES          : tibble [36 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ ENTIDAD_NAC          : tibble [36 × 3] (S3: tbl_df/tbl/data.frame) diccionario_datos <- descarga_diccionario() #> Warning: La descarga mas reciente de fue hace 0.02222 dias. Como tiene menos de un dia #> usare esa. Escribe `force_download = TRUE` si quieres descargar de todas #> formas. Para desactivar este mensaje `show_warnings = FALSE.` diccionario_datos <- descarga_diccionario(force_download = TRUE)"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"lectura-de-base-de-datos-de-zip-o-csv","dir":"Articles","previous_headings":"Datos Abiertos de la Dirección General de Epidemiología","what":"Lectura de base de datos de zip o csv","title":"Introducción a covidmx","text":"Si el proceso de descarga se interrumpe en algún momento puedes leer los datos abiertos de zip o bien del csv descomprimido con read_datos_abiertos también: Lo mismo puedes hacer si tienes el diccionario descargado con las variables diccionario_zip_path, diccionario_unzipped_path y diccionario para cuando el diciconario es un archivo zip, un archivo xlsx o un tibble en tu sesiòn de R (respectivamente) como sigue: Una vez descargados (o leídos), basta componer la base de datos con cualquiera de las funciones para tener una tabla de datos agregada por fecha y entidad. Para terminar de usar los datos, nos desconectamos de la base con:","code":"#Descarga sólo el zip zip_path    <- descarga_db_datos_abiertos_tbl(sites.covid = dlink, show_warnings = F, quiet = T) datos_covid <- read_datos_abiertos(zip_path, tblname = \"tutorial\")  #O bien descomprime el zip y lee el csv csv_path    <- unzip_db_datos_abiertos_tbl(zip_path) datos_covid <- read_datos_abiertos_csv(csv_path, tblname = \"tutorial\") #Descarga el diccionario en zip zip_path    <- descarga_db_diccionario_ssa() datos_covid <- read_datos_abiertos(base_duck, diccionario_zip_path = zip_path, tblname = \"tutorial\") datos_covid$disconnect() #> ✔ Desconectado"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"lectura-de-la-base-de-datos-del-tutorial","dir":"Articles","previous_headings":"Datos Abiertos de la Dirección General de Epidemiología","what":"Lectura de la base de datos del tutorial","title":"Introducción a covidmx","text":"Para lo que sigue del tutorial usaremos los datos precargados:","code":"datos_covid <- covidmx::datosabiertos #Uso de los datos precargados"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"casos","dir":"Articles","previous_headings":"Datos Abiertos de la Dirección General de Epidemiología","what":"Casos (Incidencia)","title":"Introducción a covidmx","text":"Las bases de datos se agregan la lista bajo el nombre default casos. Por ejemplo: El objeto casos por default es un tibble con el que ya puedes operar: Nota que lo que hace es agregar por fecha y por entidad de la unidad médica los casos. Se puede filtar por entidad de la unidad médica seleccionando las entidades de interés: Si se quiere filtrar por entidad de nacimiento y que la fecha sea la de ingreso, por ejemplo: Finalmente, si sólo se desean casos confirmados e inválidos: Nota que por default el programa rellena con ceros lo que se observó. Si quieres cancelar esta opción basta con cambiar fill_zeros = FALSE: Si se desea que los casos vengan agregados (es decir QUINTANA ROO + AGUASCALIENTES) se puede cambiar la opción de group_by_entidad FALSE: La variable edad_cut te permite quedarte sòlo con un grupo de edad o bien definir múltiples. Por ejemplo para quedarte sólo con los casos de 5 25 años: O bien definir grupos de edad de la forma 0-20, 20-60 y 60+ Puedes acumular diferentes bases de datos en la misma lista asignándoles nombres: Hay múltiples opciones permitiendo seleccionar variables específicas de unidades de cuidado intensivo, defunciones y si devolver la tabla como tibble o como conexión de dbplyr MARIADB: Puedes ver la base generada así:","code":"datos_covid <- datos_covid |> casos() datos_covid$casos |> head() #> # A tibble: 6 × 5 #>   FECHA_SINTOMAS ENTIDAD_UM     n ENTIDAD_FEDERATIVA  ABREVIATURA #>   <date>         <chr>      <int> <chr>               <chr>       #> 1 2021-07-01     02           229 BAJA CALIFORNIA     BC          #> 2 2021-07-01     03           794 BAJA CALIFORNIA SUR BS          #> 3 2021-07-02     02           240 BAJA CALIFORNIA     BC          #> 4 2021-07-02     03           535 BAJA CALIFORNIA SUR BS          #> 5 2021-07-03     02           269 BAJA CALIFORNIA     BC          #> 6 2021-07-03     03           646 BAJA CALIFORNIA SUR BS datos_covid |>    casos(entidades = c(\"BAJA CALIFORNIA\",\"BAJA CALIFORNIA SUR\"),         list_name = \"BC/BCS\") #> # A tibble: 6 × 5 #>   FECHA_SINTOMAS ENTIDAD_UM     n ENTIDAD_FEDERATIVA  ABREVIATURA #>   <date>         <chr>      <int> <chr>               <chr>       #> 1 2021-07-01     02           229 BAJA CALIFORNIA     BC          #> 2 2021-07-01     03           794 BAJA CALIFORNIA SUR BS          #> 3 2021-07-02     02           240 BAJA CALIFORNIA     BC          #> 4 2021-07-02     03           535 BAJA CALIFORNIA SUR BS          #> 5 2021-07-03     02           269 BAJA CALIFORNIA     BC          #> 6 2021-07-03     03           646 BAJA CALIFORNIA SUR BS datos_covid |>      casos(entidades    = \"BAJA CALIFORNIA\",           entidad_tipo = \"Nacimiento\",           fecha_tipo   = \"Ingreso\",           list_name    = \"DB_Filtro_Nac\") #> # A tibble: 6 × 5 #>   FECHA_INGRESO ENTIDAD_NAC     n ENTIDAD_FEDERATIVA ABREVIATURA #>   <date>        <chr>       <int> <chr>              <chr>       #> 1 2021-07-01    02             15 BAJA CALIFORNIA    BC          #> 2 2021-07-02    02             55 BAJA CALIFORNIA    BC          #> 3 2021-07-03    02             27 BAJA CALIFORNIA    BC          #> 4 2021-07-04    02             27 BAJA CALIFORNIA    BC          #> 5 2021-07-05    02            224 BAJA CALIFORNIA    BC          #> 6 2021-07-06    02            192 BAJA CALIFORNIA    BC datos_covid |>      casos(entidades    = \"BAJA CALIFORNIA\",           entidad_tipo = \"Nacimiento\",           fecha_tipo   = \"Ingreso\",           tipo_clasificacion = c(\"Confirmados COVID\", \"Invalido\"),           list_name = \"BC_conf_inv\") #> # A tibble: 6 × 5 #>   FECHA_INGRESO ENTIDAD_NAC     n ENTIDAD_FEDERATIVA ABREVIATURA #>   <date>        <chr>       <int> <chr>              <chr>       #> 1 2021-07-01    02              3 BAJA CALIFORNIA    BC          #> 2 2021-07-02    02              7 BAJA CALIFORNIA    BC          #> 3 2021-07-03    02              5 BAJA CALIFORNIA    BC          #> 4 2021-07-04    02              2 BAJA CALIFORNIA    BC          #> 5 2021-07-05    02             35 BAJA CALIFORNIA    BC          #> 6 2021-07-06    02             43 BAJA CALIFORNIA    BC datos_covid |>      casos(entidades    = c(\"QUINTANA ROO\",\"AGUASCALIENTES\"),           entidad_tipo = \"Nacimiento\",           fecha_tipo   = \"Ingreso\",           tipo_clasificacion = c(\"Confirmados COVID\", \"Invalido\"),           list_name = \"Sin fill zeros\",           fill_zeros = FALSE) #> # A tibble: 6 × 5 #>   FECHA_INGRESO ENTIDAD_NAC     n ENTIDAD_FEDERATIVA ABREVIATURA #>   <date>        <chr>       <int> <chr>              <chr>       #> 1 2021-07-05    01              1 AGUASCALIENTES     AS          #> 2 2021-07-09    23              1 QUINTANA ROO       QR          #> 3 2021-07-10    23              1 QUINTANA ROO       QR          #> 4 2021-07-11    01              1 AGUASCALIENTES     AS          #> 5 2021-07-12    01              1 AGUASCALIENTES     AS          #> 6 2021-07-13    01              1 AGUASCALIENTES     AS datos_covid |>      casos(entidades          = c(\"QUINTANA ROO\",\"AGUASCALIENTES\"),           entidad_tipo       = \"Nacimiento\",           fecha_tipo         = \"Ingreso\",           tipo_clasificacion = c(\"Confirmados COVID\", \"Invalido\"),           group_by_entidad   = FALSE,           list_name          =   \"QROO_AGS_juntos\") #> # A tibble: 6 × 2 #>   FECHA_INGRESO     n #>   <date>        <int> #> 1 2021-07-01        0 #> 2 2021-07-02        0 #> 3 2021-07-03        0 #> 4 2021-07-04        0 #> 5 2021-07-05        1 #> 6 2021-07-06        0 datos_covid |>    casos(edad_cut = c(5, 25), list_name = \"5_25\") #> # A tibble: 6 × 6 #>   FECHA_SINTOMAS EDAD_CAT ENTIDAD_UM     n ENTIDAD_FEDERATIVA  ABREVIATURA #>   <date>         <fct>    <chr>      <int> <chr>               <chr>       #> 1 2021-07-01     (5,25]   02            60 BAJA CALIFORNIA     BC          #> 2 2021-07-01     (5,25]   03           188 BAJA CALIFORNIA SUR BS          #> 3 2021-07-02     (5,25]   02            50 BAJA CALIFORNIA     BC          #> 4 2021-07-02     (5,25]   03           131 BAJA CALIFORNIA SUR BS          #> 5 2021-07-03     (5,25]   02            57 BAJA CALIFORNIA     BC          #> 6 2021-07-03     (5,25]   03           187 BAJA CALIFORNIA SUR BS datos_covid |>    casos(edad_cut = c(0, 20, 60, Inf), list_name = \"0_20_60\") #> # A tibble: 6 × 6 #>   FECHA_SINTOMAS EDAD_CAT ENTIDAD_UM     n ENTIDAD_FEDERATIVA  ABREVIATURA #>   <date>         <fct>    <chr>      <int> <chr>               <chr>       #> 1 2021-07-01     (0,20]   02            35 BAJA CALIFORNIA     BC          #> 2 2021-07-01     (0,20]   03           101 BAJA CALIFORNIA SUR BS          #> 3 2021-07-01     (20,60]  02           172 BAJA CALIFORNIA     BC          #> 4 2021-07-01     (20,60]  03           657 BAJA CALIFORNIA SUR BS          #> 5 2021-07-01     (60,Inf] 02            20 BAJA CALIFORNIA     BC          #> 6 2021-07-01     (60,Inf] 03            34 BAJA CALIFORNIA SUR BS datos_covid <- datos_covid |>    casos(list_name = \"Todos por entidad\") |>   casos(list_name = \"Todos (nacional)\",    group_by_entidad = FALSE) |>    casos(list_name = \"Defunciones (todos)\", defunciones = TRUE)   datos_covid$`Todos (nacional)` |> head() #> # A tibble: 6 × 2 #>   FECHA_SINTOMAS     n #>   <date>         <int> #> 1 2021-07-01      1023 #> 2 2021-07-02       775 #> 3 2021-07-03       915 #> 4 2021-07-04       960 #> 5 2021-07-05      1143 #> 6 2021-07-06      1068  datos_covid$`Todos por entidad` |> head() #> # A tibble: 6 × 5 #>   FECHA_SINTOMAS ENTIDAD_UM     n ENTIDAD_FEDERATIVA  ABREVIATURA #>   <date>         <chr>      <int> <chr>               <chr>       #> 1 2021-07-01     02           229 BAJA CALIFORNIA     BC          #> 2 2021-07-01     03           794 BAJA CALIFORNIA SUR BS          #> 3 2021-07-02     02           240 BAJA CALIFORNIA     BC          #> 4 2021-07-02     03           535 BAJA CALIFORNIA SUR BS          #> 5 2021-07-03     02           269 BAJA CALIFORNIA     BC          #> 6 2021-07-03     03           646 BAJA CALIFORNIA SUR BS  datos_covid$`Defunciones (todos)` |> head() #> # A tibble: 6 × 5 #>   FECHA_SINTOMAS ENTIDAD_UM     n ENTIDAD_FEDERATIVA  ABREVIATURA #>   <date>         <chr>      <int> <chr>               <chr>       #> 1 2021-07-01     02             5 BAJA CALIFORNIA     BC          #> 2 2021-07-01     03            37 BAJA CALIFORNIA SUR BS          #> 3 2021-07-02     02             7 BAJA CALIFORNIA     BC          #> 4 2021-07-02     03            11 BAJA CALIFORNIA SUR BS          #> 5 2021-07-03     02             7 BAJA CALIFORNIA     BC          #> 6 2021-07-03     03            22 BAJA CALIFORNIA SUR BS datos_covid <- datos_covid |>    casos(     #Lista de entidades que deseas     entidades = c(\"AGUASCALIENTES\", \"BAJA CALIFORNIA\", \"BAJA CALIFORNIA SUR\",                       \"CAMPECHE\", \"CHIAPAS\", \"CHIHUAHUA\",\"CIUDAD DE M\\u00c9XICO\",                       \"COAHUILA DE ZARAGOZA\" , \"COLIMA\", \"DURANGO\", \"GUANAJUATO\",                       \"GUERRERO\",\"HIDALGO\", \"JALISCO\", \"M\\u00c9XICO\",                       \"MICHOAC\\u00c1N DE OCAMPO\", \"MORELOS\",\"NAYARIT\",                       \"NUEVO LE\\u00d3N\", \"OAXACA\", \"PUEBLA\", \"QUER\\u00c9TARO\",                       \"QUINTANA ROO\", \"SAN LUIS POTOS\\u00cd\", \"SINALOA\", \"SONORA\",                       \"TABASCO\", \"TAMAULIPAS\", \"TLAXCALA\", \"VERACRUZ DE IGNACIO DE LA LLAVE\",                        \"YUCAT\\u00c1N\", \"ZACATECAS\"),          #Si quieres que los resultados salgan por entidad = TRUE o ya agregados = FALSE     group_by_entidad   = TRUE,          #Selecciona esas entidades a qué tipo de entidad refieren: Unidad Médica, Residencia, Nacimiento     entidad_tipo       = \"Nacimiento\", #c(\"Unidad Medica\", \"Residencia\", \"Nacimiento\"),          #Selecciona la fecha para la base de datos: Síntomas, Ingreso, Defunción     fecha_tipo         = \"Ingreso\",          #Selecciona todas las variables de clasificación que deseas agregar:     tipo_clasificacion = c(\"Sospechosos\",\"Confirmados COVID\", \"Negativo a COVID\", \"Inválido\",                             \"No realizado\"),          #Selecciona si deseas agrupar por la variable tipo_clasificacion     group_by_tipo_clasificacion = TRUE,          #Selecciona todos los pacientes quieres incluir:     tipo_paciente       = c(\"AMBULATORIO\", \"HOSPITALIZADO\", \"NO ESPECIFICADO\"),          #Selecciona si agrupar por tipo de paciente     group_by_tipo_paciente = TRUE,          #Selecciona todas las opciones de Unidad de Cuidado Intensivo del paciente:     tipo_uci      = c(\"SI\",\"NO\",\"NO APLICA\",\"SE IGNORA\",\"NO ESPECIFICADO\"),          #Selecciona si agrupar por tipo de unidad     group_by_tipo_uci  = TRUE,          #Selecciona los sectores del sistema de salud a incluir     tipo_sector   = c(\"CRUZ ROJA\", \"DIF\", \"ESTATAL\", \"IMSS\", \"IMSS-BIENESTAR\", \"ISSSTE\",                        \"MUNICIPAL\", \"PEMEX\", \"PRIVADA\", \"SEDENA\", \"SEMAR\", \"SSA\",                        \"UNIVERSITARIO\",\"NO ESPECIFICADO\"),          #Selecciona si deseas agrupar por tipo de sector     group_by_tipo_sector = FALSE,          #Selecciona si deseas sólo los que tuvieron defunción     defunciones   = TRUE,          #Selecciona los grupos de edad que deseas incluir en rango     edad_cut      = c(20, 40, 60), #Edades 20-40 y 40-60          #Selecciona si devolver el objeto como tibble     as_tibble     = TRUE,          #Selecciona si rellenar los conteos (n) con ceros cuando no haya observaciones.     fill_zeros    = TRUE,          #Nombre para llamarle en el objeto lista que regresa     list_name     = \"Ejemplo defunciones\",          #Agrupa los resultados además por estado de diabetes y sexo     .grouping_vars = c(\"DIABETES\", \"SEXO\")) datos_covid$`Ejemplo defunciones` |> head() #> # A tibble: 6 × 14 #>   FECHA_INGR…¹ DIABE…²  SEXO EDAD_…³ ENTID…⁴ CLASI…⁵ TIPO_…⁶   UCI     n ENTID…⁷ #>   <date>         <dbl> <dbl> <fct>   <chr>     <dbl>   <dbl> <dbl> <int> <chr>   #> 1 2021-07-01         2     2 (20,40] 03            3       2     2     2 BAJA C… #> 2 2021-07-02         2     2 (20,40] 20            3       2     2     1 OAXACA  #> 3 2021-07-02         2     2 (40,60] 03            3       2     2     1 BAJA C… #> 4 2021-07-02         2     2 (40,60] 15            3       2     2     1 MÉXICO  #> 5 2021-07-03         2     2 (20,40] 02            7       2     1     1 BAJA C… #> 6 2021-07-03         2     2 (40,60] 03            3       2     2     1 BAJA C… #> # … with 4 more variables: ABREVIATURA <chr>, CLASIFICACIÓN <chr>, #> #   DESCRIPCION_TIPO_PACIENTE <chr>, DESCRIPCION_TIPO_UCI <chr>, and #> #   abbreviated variable names ¹​FECHA_INGRESO, ²​DIABETES, ³​EDAD_CAT, #> #   ⁴​ENTIDAD_NAC, ⁵​CLASIFICACION_FINAL, ⁶​TIPO_PACIENTE, ⁷​ENTIDAD_FEDERATIVA"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"número-de-pruebas","dir":"Articles","previous_headings":"Datos Abiertos de la Dirección General de Epidemiología","what":"Número de pruebas","title":"Introducción a covidmx","text":"Para calcular el número de pruebas los argumentos son los mismos que la función de casos con el agregado de que tipo_prueba es un vector donde se seleccionan las pruebas considerar (Antígeno o PCR) y group_by_tipo_prueba agrupa los resultados por tipo de prueba","code":"datos_covid <- datos_covid |>    numero_pruebas(entidades = c(\"BAJA CALIFORNIA\",\"BAJA CALIFORNIA SUR\"),                  tipo_prueba = c(\"Antigeno\", \"PCR\"),                  group_by_tipo_prueba = TRUE)  datos_covid$numero_pruebas |> head() #> # A tibble: 6 × 6 #>   FECHA_SINTOMAS ENTIDAD_UM TIPO_PRUEBA     n ENTIDAD_FEDERATIVA  ABREVIATURA #>   <date>         <chr>      <chr>       <int> <chr>               <chr>       #> 1 2021-07-01     02         ANTIGENO      208 BAJA CALIFORNIA     BC          #> 2 2021-07-01     02         PCR            37 BAJA CALIFORNIA     BC          #> 3 2021-07-01     03         ANTIGENO      723 BAJA CALIFORNIA SUR BS          #> 4 2021-07-01     03         PCR           119 BAJA CALIFORNIA SUR BS          #> 5 2021-07-02     02         ANTIGENO      211 BAJA CALIFORNIA     BC          #> 6 2021-07-02     02         PCR            53 BAJA CALIFORNIA     BC datos_covid$numero_pruebas |>    plot_covid(facet_ncol = 2, date_break_format = \"1 month\") #> ! `df_variable` no fue especificada. Usaremos la columna n #> ! `df_covariates` no fue especificada. Usaremos `TIPO_PRUEBA and ENTIDAD_FEDERATIVA`"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"positividad","dir":"Articles","previous_headings":"Datos Abiertos de la Dirección General de Epidemiología","what":"Positividad","title":"Introducción a covidmx","text":"Para calcular la positividad la única forma actual es con un tibble. Los argumentos son los mismos que la función de casos con el agregado de que tipo_prueba es un vector donde se seleccionan las pruebas considerar (Antígeno o PCR) y group_by_tipo_prueba agrupa los resultados por tipo de prueba. La variable remove_inconclusive es una booleana (default TRUE) que elimina del denominador de la positividad las pruebas sin resultado o con resultado concluyente. Nota Positividad es la variable más lenta de calcular por ahora. Ten paciencia","code":"datos_covid <- datos_covid |>    positividad(entidades = c(\"BAJA CALIFORNIA\",\"BAJA CALIFORNIA SUR\"),                  tipo_prueba = c(\"Antigeno\", \"PCR\"),                  group_by_tipo_prueba = TRUE) #> ℹ Leyendo la base... #> ℹ Calculando PCR... #> ℹ Calculando Antigeno... #> ℹ Terminando de construir la base #> ℹ Terminado  datos_covid$positividad |> head() #> # A tibble: 6 × 8 #> # Groups:   FECHA_SINTOMAS, ENTIDAD_UM, TIPO_PRUEBA, ENTIDAD_FEDERATIVA, #> #   ABREVIATURA [6] #>   Positividad FECHA_SINTOMAS ENTIDAD_UM TIPO_P…¹ ENTID…² ABREV…³ n_pru…⁴ n_pos…⁵ #>         <dbl> <date>         <chr>      <chr>    <chr>   <chr>     <int>   <int> #> 1       0.457 2021-07-01     02         PCR      BAJA C… BC           35      16 #> 2       0.587 2021-07-01     03         PCR      BAJA C… BS          109      64 #> 3       0.42  2021-07-02     02         PCR      BAJA C… BC           50      21 #> 4       0.571 2021-07-02     03         PCR      BAJA C… BS           70      40 #> 5       0.451 2021-07-03     02         PCR      BAJA C… BC           51      23 #> 6       0.641 2021-07-03     03         PCR      BAJA C… BS           78      50 #> # … with abbreviated variable names ¹​TIPO_PRUEBA, ²​ENTIDAD_FEDERATIVA, #> #   ³​ABREVIATURA, ⁴​n_pruebas, ⁵​n_positivos datos_covid$positividad |>    plot_covid(facet_ncol = 2,               facet_scale = \"fixed\",              type = \"spline\",              df_variable = \"Positividad\",              date_break_format = \"7 days\",              date_labels_format = \"%d/%m/%Y\",              df_covariates = c(\"TIPO_PRUEBA\", \"ENTIDAD_FEDERATIVA\"))"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"case-hospitalization-rate","dir":"Articles","previous_headings":"Datos Abiertos de la Dirección General de Epidemiología","what":"Case Hospitalization Rate","title":"Introducción a covidmx","text":"El chr se define como el total de casos confirmados que terminaron hospitalizados entre el total de confirmados: \\[ \\textrm{CHR} = \\frac{\\text{Hospitalizados Confirmados}}{\\text{Todos los confirmados}} \\] lo puedes calcular con chr: Las variables para agrupar son casi las mismas que en casos. Por ejemplo si queremos agrupar el chr en distintas categorías de edad nivel nacional:","code":"datos_covid <- datos_covid |> chr() #> # A tibble: 6 × 5 #>   FECHA_SINTOMAS ENTIDAD_UM ENTIDAD_FEDERATIVA  ABREVIATURA CASE HOSPITALIZATI…¹ #>   <date>         <chr>      <chr>               <chr>                      <dbl> #> 1 2021-07-01     02         BAJA CALIFORNIA     BC                         0.2   #> 2 2021-07-01     03         BAJA CALIFORNIA SUR BS                         0.179 #> 3 2021-07-02     02         BAJA CALIFORNIA     BC                         0.277 #> 4 2021-07-02     03         BAJA CALIFORNIA SUR BS                         0.101 #> 5 2021-07-03     02         BAJA CALIFORNIA     BC                         0.172 #> 6 2021-07-03     03         BAJA CALIFORNIA SUR BS                         0.1   #> # … with abbreviated variable name ¹​`CASE HOSPITALIZATION RATE` datos_covid <- datos_covid |>    chr(     group_by_entidad = FALSE,     edad_cut  = c(0, 20, 50, Inf),     list_name = \"CHR_edad_nacional\"   )   datos_covid |>   plot_covid(type = \"line\",               facet_ncol = 4,               date_break_format = \"7 days\",              date_labels_format = \"%d/%m/%Y\",              df_name = \"CHR_edad_nacional\")"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"case-fatality-rate","dir":"Articles","previous_headings":"Datos Abiertos de la Dirección General de Epidemiología","what":"Case Fatality Rate","title":"Introducción a covidmx","text":"El cfr se define como el total de casos confirmados que terminaron muertos: \\[ \\textrm{CFR} = \\frac{\\text{Defunciones Confirmadas}}{\\text{Todos los confirmados}} \\] lo puedes calcular con cfr: Las variables para agrupar son casi las mismas que en casos. Por ejemplo si queremos agrupar el cfr en distintas categorías de edad nivel nacional:  Podemos también calcular la mortalidad dentro de los hospitalizados y ambulatorios:","code":"datos_covid <- datos_covid |> cfr() #> # A tibble: 6 × 5 #>   FECHA_SINTOMAS ENTIDAD_UM ENTIDAD_FEDERATIVA  ABREVIATURA `CASE FATALITY RATE` #>   <date>         <chr>      <chr>               <chr>                      <dbl> #> 1 2021-07-01     02         BAJA CALIFORNIA     BC                        0.075  #> 2 2021-07-01     03         BAJA CALIFORNIA SUR BS                        0.0921 #> 3 2021-07-02     02         BAJA CALIFORNIA     BC                        0.0638 #> 4 2021-07-02     03         BAJA CALIFORNIA SUR BS                        0.0373 #> 5 2021-07-03     02         BAJA CALIFORNIA     BC                        0.0862 #> 6 2021-07-03     03         BAJA CALIFORNIA SUR BS                        0.0588 datos_covid <- datos_covid |>    cfr(entidades = c(\"BAJA CALIFORNIA\", \"BAJA CALIFORNIA SUR\"),     group_by_entidad = TRUE,     list_name = \"CFR_BC\"   )   datos_covid$CFR_BC |>   plot_covid(type = \"line\",               facet_ncol = 2,              date_break_format = \"7 days\",              date_labels_format = \"%d/%m/%Y\") datos_covid <- datos_covid |>    cfr(     tipo_paciente = \"HOSPITALIZADO\",     group_by_entidad       = FALSE,     list_name = \"CFR_HOSPITALIZADOS\"   )   datos_covid |>   plot_covid(df_name = \"CFR_HOSPITALIZADOS\",               type = \"line\",               facet_ncol = 2,              date_break_format = \"7 days\",              date_labels_format = \"%d/%m/%Y\",              df_variable = \"CASE FATALITY RATE\")"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"número-efectivo-de-reproducción","dir":"Articles","previous_headings":"Datos Abiertos de la Dirección General de Epidemiología","what":"Número efectivo de reproducción","title":"Introducción a covidmx","text":"El número efectivo de reproducción se estima mediante la función EpiEstim::estimate_R para la cual es necesario especificar el método y el intervalo serial como en este ejemplo. Podemos estimar el número nivel nacional partir de 2022: O bien por entidad sólo con los confirmados covid:","code":"datos_covid <- datos_covid |>    estima_rt(entidades = \"BAJA CALIFORNIA\",             min_date  = as.Date(\"2021/07/01\", format = \"%Y/%m/%d\")) #> # A tibble: 6 × 17 #>   ENTIDA…¹ ENTID…² ABREV…³ t_start t_end Mean(…⁴ Std(R…⁵ Quant…⁶ Quant…⁷ Quant…⁸ #>   <chr>    <chr>   <chr>     <dbl> <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #> 1 02       BAJA C… BC            2     8    1.61  0.0362    1.54    1.55    1.58 #> 2 02       BAJA C… BC            3     9    1.33  0.0297    1.28    1.29    1.31 #> 3 02       BAJA C… BC            4    10    1.18  0.0261    1.12    1.13    1.16 #> 4 02       BAJA C… BC            5    11    1.11  0.0244    1.07    1.07    1.10 #> 5 02       BAJA C… BC            6    12    1.09  0.0236    1.04    1.05    1.07 #> 6 02       BAJA C… BC            7    13    1.08  0.0232    1.04    1.05    1.07 #> # … with 7 more variables: `Median(R)` <dbl>, `Quantile.0.75(R)` <dbl>, #> #   `Quantile.0.95(R)` <dbl>, `Quantile.0.975(R)` <dbl>, #> #   FECHA_SINTOMAS_start <date>, FECHA_SINTOMAS_end <date>, #> #   FECHA_SINTOMAS <date>, and abbreviated variable names ¹​ENTIDAD_UM, #> #   ²​ENTIDAD_FEDERATIVA, ³​ABREVIATURA, ⁴​`Mean(R)`, ⁵​`Std(R)`, #> #   ⁶​`Quantile.0.025(R)`, ⁷​`Quantile.0.05(R)`, ⁸​`Quantile.0.25(R)` datos_covid <- datos_covid |>    estima_rt(tipo_clasificacion = \"Confirmados COVID\",      list_name = \"RT_confirmados_COVID\",      min_date  = as.Date(\"2021/07/01\", format = \"%Y/%m/%d\"))  datos_covid$RT_confirmados_COVID |>   plot_covid(df_date_index = \"FECHA_SINTOMAS\",               df_variable = \"Mean(R)\",              df_covariates = \"ENTIDAD_FEDERATIVA\",              date_break_format = \"7 days\",              date_labels_format = \"%d/%m/%Y\")"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"desconexión-de-duckdb","dir":"Articles","previous_headings":"Datos Abiertos de la Dirección General de Epidemiología","what":"Desconexión de duckdb","title":"Introducción a covidmx","text":"Una vez que terminaste de trabajar con la base original en duckdb deconecta el pointer haciendo:","code":"datos_covid$disconnect() #> [1] TRUE"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"datos-de-variantes-gisaid","dir":"Articles","previous_headings":"","what":"Datos de variantes (GISAID)","title":"Introducción a covidmx","text":"Para descargar las variantes reportadas por la publicación diaria en Github del reporte nacional en RodrigoZepeda/VariantesCovid partir de las variantes de GISAID puedes hacer: Los datos se ven así: Por default baja nacional pero también puedes usar “cdmx”: En este caso, la descarga también es inteligente y necesitas poner force_download = TRUE si ha pasado menos de un día de tu última descarga (almacenada mediante pins en cache) y quieres volver bajar los datos. Puedes graficarlos con geom_stream dentro de la librería ggstream:  olvides citar GISAID así como la publicación diaria en RodrigoZepeda/VariantesCovid si las usas.","code":"variantes_covid <- descarga_datos_variantes_GISAID() variantes_covid |> head() #> # A tibble: 6 × 7 #>   variant     semana   ano     n  freq Actualizacion       Fuente                #>   <chr>        <int> <int> <int> <dbl> <dttm>              <chr>                 #> 1 VOI Epsilon     28  2020     1     1 2022-09-05 03:14:30 GISAID: https://www.… #> 2 VOI Epsilon     38  2020     1     1 2022-09-05 03:14:30 GISAID: https://www.… #> 3 VOC Delta       39  2020     2     1 2022-09-05 03:14:30 GISAID: https://www.… #> 4 VOI Epsilon     46  2020     1     1 2022-09-05 03:14:30 GISAID: https://www.… #> 5 VOI Epsilon     47  2020     2     1 2022-09-05 03:14:30 GISAID: https://www.… #> 6 VOI Epsilon     48  2020     5     1 2022-09-05 03:14:30 GISAID: https://www.… variantes_covid <- descarga_datos_variantes_GISAID(\"cdmx\") library(ggplot2)  #Pasamos año y semana epidemiológica a fecha variantes_covid <- variantes_covid |>   left_join(     data.frame(fecha = seq(as.Date(\"2020/01/03\", format = \"%Y/%m/%d\"), as.Date(Sys.time()),                            by = \"7 days\")) |>       mutate(ano    = lubridate::epiyear(fecha)) |>       mutate(semana = lubridate::epiweek(fecha))     ) #> Joining, by = c(\"semana\", \"ano\")  #Graficamos nvariantes <- length(unique(variantes_covid$variant))  ggplot(variantes_covid) +    ggstream::geom_stream(aes(x = fecha, y = n, fill = variant)) +   theme_void() +   theme(     legend.position = \"bottom\",     axis.text.x     = element_text(angle = 90, hjust = 1),     axis.line.x     = element_line(),     axis.ticks.x    = element_line()   ) +   scale_x_date(date_breaks = \"3 months\", date_labels = \"%b/%Y\") +   scale_fill_manual(\"Variante\", values = MetBrewer::met.brewer(\"Cross\", n =  nvariantes)) +   ggtitle(\"Variantes de COVID-19 en México\")"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"datos-de-ocupación-hospitalaria-red-irag","dir":"Articles","previous_headings":"","what":"Datos de ocupación hospitalaria (Red IRAG)","title":"Introducción a covidmx","text":"Puedes descargar los datos de la Red IRAG de ocupación hospitalaria nivel estatal o nivel unidad médica mediante descarga_datos_red_irag. Estos se obtienen de la publicación diaria en RodrigoZepeda/CapacidadHospitalariaMX. Los cuales se ven así:  O bien por unidad médica: que se ven así: En este caso, la descarga también es inteligente y necesitas poner force_download = TRUE si ha pasado menos de un día de tu última descarga (almacenada mediante pins en cache) y quieres volver bajar los datos. olvides citar RED IRAG así como la publicación diaria en RodrigoZepeda/CapacidadHospitalariaMX si las usas.","code":"estatales <- descarga_datos_red_irag() estatales |> plot_covid(df_covariates = \"Estado\") #> ! `df_variable` no fue especificada. Usaremos la columna Hospitalizados (%) unidad_medica <- descarga_datos_red_irag(nivel = \"Unidad Médica\") unidad_medica |> head() #> # A tibble: 6 × 9 #>   `Unidad médica`        Estado Insti…¹ CLUES Hospi…² Venti…³ UCI y…⁴ Fecha      #>   <chr>                  <chr>  <chr>   <chr>   <dbl>   <dbl>   <dbl> <date>     #> 1 Hospital Regional de … México SSA/CC  MCSS…     100      17      33 2020-04-01 #> 2 Hospital Juárez de Mé… Ciuda… SSA/CC  DFSS…     100      89      89 2020-04-01 #> 3 Instituto Nacional de… Ciuda… SSA/CC  DFSS…     100       0       0 2020-04-01 #> 4 Instituto Nacional de… Ciuda… SSA/CC  DFSS…     100      94      94 2020-04-01 #> 5 Instituto Nacional de… Ciuda… SSA/CC  DFSS…     100      50      50 2020-04-01 #> 6 Instituto Nacional de… Ciuda… SSA/CC  DFSS…     100      10      10 2020-04-01 #> # … with 1 more variable: Actualizacion <dttm>, and abbreviated variable names #> #   ¹​Institución, ²​`Hospitalizados (%)`, ³​`Ventilación (%)`, #> #   ⁴​`UCI y Ventilación (%)`"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"gráficas","dir":"Articles","previous_headings":"","what":"Gráficas","title":"Introducción a covidmx","text":"Para graficar puedes usar la función plot_covid por default grafica lo que està en datos_covid$casos y establecer cada cuándo hacer los cortes de fechas con date_break_format  pero puedes pedir otra con el eje x más limpio:  Para visualizar un suavizamiento con splines cambia el type y dale las opciones que darías geom_spline:  Puedes visualizar hasta dos covariables la vez con df_covariates y decirle cuál graficar con df_variable:","code":"datos_covid |> plot_covid(date_break_format = \"1 week\") #> ! `df_variable` no fue especificada. Usaremos la columna n #> ! `df_covariates` no fue especificada. Usaremos `ENTIDAD_FEDERATIVA` datos_covid |> plot_covid(\"Todos (nacional)\",                             date_break_format = \"1 week\",                            date_labels_format = \"%m/%y\") #> ! `df_variable` no fue especificada. Usaremos la columna n #> ! `df_covariates` no fue especificada. Usaremos `` datos_covid |>    plot_covid(\"Todos (nacional)\", type = \"spline\", spar = 0.5, date_break_format = \"1 week\") #> ! `df_variable` no fue especificada. Usaremos la columna n #> ! `df_covariates` no fue especificada. Usaremos `` datos_covid |>    plot_covid(\"Ejemplo defunciones\",               df_variable = \"n\",               df_covariates = c(\"SEXO\",\"ENTIDAD_FEDERATIVA\"),              date_break_format = \"3 weeks\",              type = \"area\")"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"desconexión","dir":"Articles","previous_headings":"","what":"Desconexión","title":"Introducción a covidmx","text":"olvides, cuando termines de usar duckdb desconectarte:","code":"datos_covid$disconnect() #> [1] TRUE"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"información-adicional","dir":"Articles","previous_headings":"","what":"Información adicional","title":"Introducción a covidmx","text":"","code":"sessionInfo() #> R version 4.2.0 (2022-04-22) #> Platform: x86_64-apple-darwin17.0 (64-bit) #> Running under: macOS Big Sur/Monterey 10.16 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib #> LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggplot2_3.3.6      dplyr_1.0.10       covidmx_0.6.0.0000 #>  #> loaded via a namespace (and not attached): #>   [1] mcmc_0.9-7            bitops_1.0-7          fs_1.5.2              #>   [4] bit64_4.0.5           lubridate_1.8.0       httr_1.4.4            #>   [7] rprojroot_2.0.3       tools_4.2.0           bslib_0.4.0           #>  [10] utf8_1.2.2            R6_2.5.1              coarseDataTools_0.6-6 #>  [13] DBI_1.1.3             colorspace_2.0-3      duckdb_0.4.0          #>  [16] withr_2.5.0           tidyselect_1.1.2      gridExtra_2.3         #>  [19] EpiEstim_2.2-4        bit_4.0.4             curl_4.3.2            #>  [22] compiler_4.2.0        quantreg_5.94         textshaping_0.3.6     #>  [25] cli_3.3.0             SparseM_1.81          desc_1.4.1            #>  [28] labeling_0.4.2        sass_0.4.2            mosaicCore_0.9.2      #>  [31] scales_1.2.1          readr_2.1.2           ggridges_0.5.3        #>  [34] rappdirs_0.3.3        pkgdown_2.0.6         ggstream_0.1.0        #>  [37] systemfonts_1.0.4     stringr_1.4.1         digest_0.6.29         #>  [40] ggformula_0.10.2      rmarkdown_2.16        MCMCpack_1.6-3        #>  [43] pkgconfig_2.0.3       htmltools_0.5.3       labelled_2.9.1        #>  [46] dbplyr_2.2.1          fastmap_1.1.0         highr_0.9             #>  [49] rlang_1.0.5           readxl_1.4.1          rstudioapi_0.14       #>  [52] jquerylib_0.1.4       farver_2.1.1          generics_0.1.3        #>  [55] jsonlite_1.8.0        vroom_1.5.7           RCurl_1.98-1.8        #>  [58] magrittr_2.0.3        Matrix_1.4-1          Rcpp_1.0.9            #>  [61] munsell_0.5.0         fansi_1.0.3           MetBrewer_0.2.0       #>  [64] lifecycle_1.0.1       stringi_1.7.8         yaml_2.3.5            #>  [67] MASS_7.3-58.1         plyr_1.8.7            ggstance_0.3.5        #>  [70] grid_4.2.0            blob_1.2.3            parallel_4.2.0        #>  [73] forcats_0.5.2         crayon_1.5.1          lattice_0.20-45       #>  [76] splines_4.2.0         haven_2.5.1           hms_1.1.2             #>  [79] knitr_1.40            pillar_1.8.1          reshape2_1.4.4        #>  [82] glue_1.6.2            evaluate_0.16         vctrs_0.4.1           #>  [85] tzdb_0.3.0            tweenr_2.0.1          MatrixModels_0.5-0    #>  [88] cellranger_1.1.0      gtable_0.3.1          purrr_0.3.4           #>  [91] polyclip_1.10-0       tidyr_1.2.0           incidence_1.7.3       #>  [94] assertthat_0.2.1      cachem_1.0.6          xfun_0.32             #>  [97] pins_1.0.2            ggforce_0.3.4         coda_0.19-4           #> [100] survival_3.4-0        ragg_1.2.2            tibble_3.1.8          #> [103] memoise_2.0.1         fitdistrplus_1.1-8    ellipsis_0.3.2"},{"path":"https://rodrigozepeda.github.io/covidmx/authors.html","id":null,"dir":"","previous_headings":"","what":"Autores","title":"Autores y Citas","text":"Rodrigo Zepeda-Tello. Autor-, mantenedor-. Mauricio Hernandez-Avila. Autor-.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/authors.html","id":"citation","dir":"","previous_headings":"","what":"Cita","title":"Autores y Citas","text":"Zepeda-Tello R, Hernandez-Avila M (2022). covidmx: Herramientas para el analisis de datos de COVID-19 en Mexico. https://github.com/RodrigoZepeda/covidmx, https://rodrigozepeda.github.io/covidmx/.","code":"@Manual{,   title = {covidmx: Herramientas para el analisis de datos de COVID-19 en Mexico},   author = {Rodrigo Zepeda-Tello and Mauricio Hernandez-Avila},   year = {2022},   note = {https://github.com/RodrigoZepeda/covidmx, https://rodrigozepeda.github.io/covidmx/}, }"},{"path":"https://rodrigozepeda.github.io/covidmx/index.html","id":"covidmx-","dir":"","previous_headings":"","what":"Análisis de COVID-19 para México","title":"Análisis de COVID-19 para México","text":"💻 Sitio web: https://rodrigozepeda.github.io/covidmx/ Descarga, etiqueta y analiza los datos abiertos de COVID-19 en México. El propósito de este paquete es hacer la descarga, análisis y graficación de manera rápida para que tú tengas que preocuparte por bajar el archivo tiempo, agrupar funciones o realizar visualizaciones sino en lo importante: analizar la información.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/index.html","id":"instalación","dir":"","previous_headings":"","what":"Instalación","title":"Análisis de COVID-19 para México","text":"","code":"remotes::install_github(\"RodrigoZepeda/covidmx\")"},{"path":"https://rodrigozepeda.github.io/covidmx/index.html","id":"uso","dir":"","previous_headings":"","what":"Uso","title":"Análisis de COVID-19 para México","text":"Puedes descargar la información de variantes de GISAID de la publicación de Github, ocupación hospitalaria de RED IRAG partir del Github y datos abiertos de la SSA todo con los siguientes comandos. El proceso está optimizado mediante duckdb para que puedas realizar queries sobre la base de > 15 millones de personas en segundos. Gráfica con los casos de SINAVE de los datos abiertos de las 32 entidades cada una de ellas variando por color. Nota olvides citar GISAID, RED IRAG o SSA y las publicaciones asociadas además del paquete.","code":"library(covidmx)  #Datos de variantes (cdmx o nacional) variantes   <- descarga_datos_variantes_GISAID(\"nacional\")  #Todas las descargas del paquete son inteligentes y si ha pasado poco tiempo desde tu #última descarga te pregunta primero antes de comprometerse a descargar de nuevo descarga_datos_variantes_GISAID(\"nacional\") #desactiva con force_download = TRUE  #Datos de ocupación hopsitalaria de Red IRAG ('Estatal' o 'Unidad Médica') ocupacion   <- descarga_datos_red_irag(\"Estatal\")  #Descarga datos abiertos de covid, guarda en duckdb y te da una conexión datos_covid <- descarga_datos_abiertos()   #Calcula los casos (totales) por entidad y devuelve un tibble datos_covid <- datos_covid %>% casos()  #Calcula la cantidad de pruebas realizadas datos_covid <- datos_covid %>% numero_pruebas()  #Calcula la positividad datos_covid <- datos_covid %>% positividad()  #Calcula el case fatality rate datos_covid <- datos_covid %>% cfr()  #Calcula el case hospitalization rate datos_covid <- datos_covid %>% chr()  #Estimación del número efectivo de reproducción datos_covid <- datos_covid %>% estima_rt()  #¡Grafica! datos_covid %>% plot_covid()"},{"path":"https://rodrigozepeda.github.io/covidmx/index.html","id":"casos-opciones-de-lectura-de-datos-abiertos","dir":"","previous_headings":"","what":"Casos (opciones de lectura de datos abiertos)","title":"Análisis de COVID-19 para México","text":"Todas las opciones de casos:","code":"datos_covid %>%    casos(     #Lista de entidades que deseas     entidades = c(\"AGUASCALIENTES\", \"BAJA CALIFORNIA\",                    \"BAJA CALIFORNIA SUR\",\"CAMPECHE\", \"CHIAPAS\",                    \"CHIHUAHUA\",\"CIUDAD DE M\\u00c9XICO\",                   \"COAHUILA DE ZARAGOZA\" , \"COLIMA\", \"DURANGO\",                    \"GUANAJUATO\", \"GUERRERO\",\"HIDALGO\", \"JALISCO\",                    \"M\\u00c9XICO\", \"MICHOAC\\u00c1N DE OCAMPO\",                    \"MORELOS\",\"NAYARIT\", \"NUEVO LE\\u00d3N\", \"OAXACA\",                    \"PUEBLA\", \"QUER\\u00c9TARO\", \"QUINTANA ROO\",                    \"SAN LUIS POTOS\\u00cd\", \"SINALOA\", \"SONORA\",                   \"TABASCO\", \"TAMAULIPAS\", \"TLAXCALA\",                    \"VERACRUZ DE IGNACIO DE LA LLAVE\",                    \"YUCAT\\u00c1N\", \"ZACATECAS\"),          #Si quieres que los resultados salgan por entidad = TRUE o ya agregados = FALSE     group_by_entidad    = TRUE,          #Selecciona esas entidades a qué tipo de entidad refieren: Unidad Médica,      #Residencia o Nacimiento     entidad_tipo        = \"Residencia\",           #Selecciona la fecha para la base de datos: Síntomas, Ingreso, Defunción     fecha_tipo          = \"Ingreso\",           #Selecciona todas las variables de clasificación que deseas agregar:     tipo_clasificacion  = c(\"Sospechosos\",\"Confirmados COVID\",                              \"Negativo a COVID\", \"Inválido\",                              \"No realizado\"),          #Selecciona si deseas agrupar por la variable tipo_clasificacion     group_by_tipo_clasificacion = TRUE,          #Selecciona todos los pacientes quieres incluir:     tipo_paciente      = c(\"AMBULATORIO\", \"HOSPITALIZADO\",                             \"NO ESPECIFICADO\"),          #Selecciona si agrupar por tipo de paciente     group_by_tipo_paciente = TRUE,          #Selecciona todas las opciones de Unidad de Cuidado Intensivo     #del paciente:     tipo_uci           = c(\"SI\",\"NO\",\"NO APLICA\",\"SE IGNORA\",                            \"NO ESPECIFICADO\"),          #Selecciona si agrupar por tipo de unidad     group_by_tipo_uci  = TRUE,          #Selecciona los sectores del sistema de salud a incluir     tipo_sector   = c(\"CRUZ ROJA\", \"DIF\", \"ESTATAL\", \"IMSS\",                        \"IMSS-BIENESTAR\", \"ISSSTE\",                        \"MUNICIPAL\", \"PEMEX\", \"PRIVADA\",                        \"SEDENA\", \"SEMAR\", \"SSA\",                        \"UNIVERSITARIO\",\"NO ESPECIFICADO\"),          #Selecciona si deseas agrupar por tipo de sector     group_by_tipo_sector = FALSE,          #Selecciona si deseas sólo los que tuvieron defunción     defunciones   = TRUE,          #Selecciona los grupos de edad que deseas incluir en rango     edad_cut      = c(20, 40, 60), #Edades 20-40 y 40-60          #Selecciona si devolver el objeto como tibble     as_tibble     = TRUE,          #Selecciona si rellenar los conteos (n) con ceros      #cuando no haya observaciones.     fill_zeros    = TRUE,          #Nombre para llamarle en el objeto lista que regresa     list_name     = \"Ejemplo defunciones\",          #Otras variables para agrupar no incluidas     .grouping_vars = c(\"DIABETES\", \"SEXO\"))      #> # A tibble:  #>    FECHA_INGRESO DIABETES  SEXO EDAD_CAT ENTIDAD_RES CLASIFICACION_FINAL #>    <date>           <dbl> <dbl> <chr>    <chr>                     <dbl> #>  1 2020-01-01           2     1 (40,60]  30                            7 #>  2 2020-01-02           2     1 (40,60]  30                            7 #>  3 2020-01-02           2     2 (20,40]  11                            7 #>  4 2020-01-02           2     2 (20,40]  26                            7 #>  5 2020-01-02           2     2 (40,60]  22                            5 #>  6 2020-01-03           1     1 (40,60]  05                            7 #>  7 2020-01-03           1     2 (40,60]  26                            7 #>  8 2020-01-03           1     2 (40,60]  28                            7 #>  9 2020-01-03           2     1 (40,60]  15                            6 #> 10 2020-01-03           2     2 (40,60]  13                            7 #> 11 2020-01-04           2     1 (20,40]  05                            7 #> 12 2020-01-04           2     2 (40,60]  21                            7 #> 13 2020-01-05           1     1 (40,60]  30                            7 #> 14 2020-01-05           1     2 (40,60]  09                            5 #> 15 2020-01-05           2     2 (20,40]  26                            6 #> 16 2020-01-05           2     2 (40,60]  28                            7 #> 17 2020-01-06           1     1 (40,60]  02                            7 #> 18 2020-01-06           1     2 (40,60]  15                            7 #> 19 2020-01-06           2     1 (40,60]  08                            6 #> 20 2020-01-06           2     1 (40,60]  09                            7 #> # … with 8 more variables: TIPO_PACIENTE <dbl>, UCI <dbl>, n <int64>, #> #   ENTIDAD_FEDERATIVA <chr>, ABREVIATURA <chr>, CLASIFICACIÓN <chr>, #> #   DESCRIPCION_TIPO_PACIENTE <chr>, DESCRIPCION_TIPO_UCI <chr>"},{"path":"https://rodrigozepeda.github.io/covidmx/index.html","id":"más-información","dir":"","previous_headings":"","what":"Más información","title":"Análisis de COVID-19 para México","text":"Para ver todas las funciones del paquete ve Primeros Pasos Puedes ver un estudio de caso del paquete para Ciudad de México en este link","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/casos.html","id":null,"dir":"Reference","previous_headings":"","what":"CASOS — casos","title":"CASOS — casos","text":"casos Calcula el numero de casos registrados por fecha agrupando (o sin hacerlo) por covariables.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/casos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"CASOS — casos","text":"","code":"casos(   datos_covid,   entidades = c(\"AGUASCALIENTES\", \"BAJA CALIFORNIA\", \"BAJA CALIFORNIA SUR\", \"CAMPECHE\",     \"CHIAPAS\", \"CHIHUAHUA\", \"CIUDAD DE MÉXICO\", \"COAHUILA DE ZARAGOZA\", \"COLIMA\",     \"DURANGO\", \"GUANAJUATO\", \"GUERRERO\", \"HIDALGO\", \"JALISCO\", \"MÉXICO\",     \"MICHOACÁN DE OCAMPO\", \"MORELOS\", \"NAYARIT\", \"NUEVO LEÓN\", \"OAXACA\", \"PUEBLA\",     \"QUERÉTARO\", \"QUINTANA ROO\", \"SAN LUIS POTOSÍ\", \"SINALOA\", \"SONORA\", \"TABASCO\",     \"TAMAULIPAS\", \"TLAXCALA\", \"VERACRUZ DE IGNACIO DE LA LLAVE\", \"YUCATÁN\", \"ZACATECAS\"),   group_by_entidad = TRUE,   entidad_tipo = c(\"Unidad Medica\", \"Residencia\", \"Nacimiento\"),   fecha_tipo = c(\"Sintomas\", \"Ingreso\", \"Defuncion\"),   tipo_clasificacion = c(\"Sospechosos\", \"Confirmados COVID\", \"Negativo a COVID\",     \"Inválido\", \"No realizado\"),   group_by_tipo_clasificacion = FALSE,   tipo_paciente = c(\"AMBULATORIO\", \"HOSPITALIZADO\", \"NO ESPECIFICADO\"),   group_by_tipo_paciente = FALSE,   tipo_uci = c(\"SI\", \"NO\", \"NO APLICA\", \"SE IGNORA\", \"NO ESPECIFICADO\"),   group_by_tipo_uci = FALSE,   tipo_sector = c(\"CRUZ ROJA\", \"DIF\", \"ESTATAL\", \"IMSS\", \"IMSS-BIENESTAR\", \"ISSSTE\",     \"MUNICIPAL\", \"PEMEX\", \"PRIVADA\", \"SEDENA\", \"SEMAR\", \"SSA\", \"UNIVERSITARIO\",     \"NO ESPECIFICADO\"),   group_by_tipo_sector = FALSE,   defunciones = FALSE,   edad_cut = NULL,   as_tibble = TRUE,   fill_zeros = as_tibble,   list_name = \"casos\",   .grouping_vars = c() )"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/casos.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"CASOS — casos","text":"datos_covid data available automatically downloads COVID-19 information. entidades Vector con las entidades de las unidades medicas analizar. Opciones: AGUASCALIENTES, BAJA CALIFORNIA, BAJA CALIFORNIA SUR, CAMPECHE, CHIAPAS, CHIHUAHUA, CIUDAD DE MEXICO, COAHUILA DE ZARAGOZA , COLIMA, DURANGO, GUANAJUATO, GUERRERO, HIDALGO, JALISCO, MEXICO, MICHOACAN DE OCAMPO, MORELOS,NAYARIT NUEVO LEON, OAXACA ,PUEBLA, QUERETARO,QUINTANA ROO, SAN LUIS POTOSI, SINALOA, SONORA, TABASCO, TAMAULIPAS,TLAXCALA, VERACRUZ DE IGNACIO DE LA LLAVE, YUCATAN, ZACATECAS group_by_entidad Si junta las entidades en una sola o bien las muestra por separado sin agrupar. entidad_tipo Selecciona Unidad Medica, Nacimiento o Residencia. por default incluye Unidad Medica fecha_tipo Selecciona Ingreso, Sintomas o Defuncion por default incluye fecha de Sintomas tipo_clasificacion Vector con el tipo de clasificaciones incluir: Sospechosos,Confirmados COVID, Negativo COVID, Inv\\u00e1lido, realizado group_by_tipo_clasificacion Boolean determinando si regresa la base con cada entrada agrupada por tipo de clasificación (es decir cada fecha se generan tantos observaciones como grupos de tipo de clasificación) tipo_paciente Vector con el tipo de pacientes incluir. Opciones: AMBULATORIO, HOSPITALIZADO, ESPECIFICADO group_by_tipo_paciente Boolean determinando si regresa la base con cada entrada agrupada por tipo de paciente (es decir cada fecha se generan tantos observaciones como grupos de tipo de paciente) tipo_uci Vector con el tipo de valores para Unidad de Cuidado Intensivo incluir: SI,,APLICA,SE IGNORA,ESPECIFICADO group_by_tipo_uci Boolean determinando si regresa la base con cada entrada agrupada por tipo de uci (es decir cada fecha se generan tantos observaciones como grupos de tipo de uci) tipo_sector Vector con los sectores del sistema de salud incluir: CRUZ ROJA,DIF,ESTATAL,IMSS,IMSS-BIENESTAR,ISSSTE, MUNICIPAL,PEMEX, PRIVADA,SEDENA,SEMAR,SSA, UNIVERSITARIO,ESPECIFICADO. group_by_tipo_sector Boolean determinando si regresa la base con cada entrada agrupada por tipo de sector (es decir cada fecha se generan tantos observaciones como grupos de tipo de sector) defunciones Boolean si incluir sólo defunciones TRUE o todos FALSE. edad_cut Vector con secuencia de edades para hacer grupos. Por ejemplo edad_cut = c(0, 10, Inf) arma dos grupos de edad de 0 10 y de 10 infinito o bien edad_cut = c(15, 20) deja sólo los registros entre 15 y 20 años. Por default es NULL as_tibble Regresar como tibble el resultado. En caso de que as_tibble sea FALSE se devuelve como conexion en MARIADB. fill_zeros En caso de que el resultado sea un tibble regresa observaciones para todas las combinaciones de variables incluyendo como 0 donde se observaron casos. En caso contrario se incluyen las filas donde se observaron casos. list_name Asigna un nombre en la lista de datos la base generada .grouping_vars Vector de variables adicionales de agrupacion de los conteos","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/casos.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"CASOS — casos","text":"Appends la lista de datos_covid una nueva entrada de nombre list_name (default: casos) con una base de datos (tibble o dbConnection) con los resultados agregados. casos - Base de datos generara con los datos agregados (el nombre cambia si se usa list_name). dict - Diccionario de datos dats - Datos originales (conexion DB) disconnect  - Función para desconectarte de DB","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/casos.html","id":"detalles","dir":"Reference","previous_headings":"","what":"Detalles","title":"CASOS — casos","text":"Por default calcula el total de casos.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/casos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"CASOS — casos","text":"","code":"if (FALSE) { datos_covid <- descarga_datos_abiertos()  # Casos a nivel nacional datos_covid <- datos_covid |> casos() head(datos_covid$casos)  # Defunciones nacional defunciones <- datos_covid |> casos(defunciones = TRUE, list_name = \"Defunciones\")  # Positivos en Jalisco y Colima casos_col_jal <- datos_covid |>   casos(entidades = c(\"JALISCO\", \"COLIMA\"), list_name = \"Jaliscolima\")  # Agrupando casos por tipo de clasificacion confirmados <- datos_covid |>   casos(     entidades = c(\"JALISCO\", \"COLIMA\"),     group_by_tipo_clasificacion = TRUE, list_name = \"Jaliscolima2\"   )  # Regresa la suma de los de COLIMA + JALISCO casos_col_jal <- datos_covid |>   casos(     entidades = c(\"JALISCO\", \"COLIMA\"),     group_by_tipo_clasificacion = TRUE,     tipo_paciente = c(\"AMBULATORIO\", \"HOSPITALIZADO\"),     group_by_tipo_paciente = TRUE,     list_name = \"Jalisco + colima\"   )  # Si deseas agrupar por una variable que no este en las opciones casos_col_jal <- datos_covid |>   casos(     entidades = c(\"JALISCO\", \"COLIMA\"),     group_by_tipo_clasificacion = TRUE,     tipo_paciente = c(\"AMBULATORIO\", \"HOSPITALIZADO\"),     group_by_tipo_paciente = TRUE,     list_name = \"Jalisco + colima diabetes\",     .grouping_vars = c(\"DIABETES\")   ) }"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/cfr.html","id":null,"dir":"Reference","previous_headings":"","what":"Case Fatality Rate (CFR) — cfr","title":"Case Fatality Rate (CFR) — cfr","text":"chr Calcula la proporción de enfermos que fallecen sobre todos los enfermos confirmados en distintas categorías (residencia / edad / etc)","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/cfr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Case Fatality Rate (CFR) — cfr","text":"","code":"cfr(   datos_covid,   entidades = c(\"AGUASCALIENTES\", \"BAJA CALIFORNIA\", \"BAJA CALIFORNIA SUR\", \"CAMPECHE\",     \"CHIAPAS\", \"CHIHUAHUA\", \"CIUDAD DE MÉXICO\", \"COAHUILA DE ZARAGOZA\", \"COLIMA\",     \"DURANGO\", \"GUANAJUATO\", \"GUERRERO\", \"HIDALGO\", \"JALISCO\", \"MÉXICO\",     \"MICHOACÁN DE OCAMPO\", \"MORELOS\", \"NAYARIT\", \"NUEVO LEÓN\", \"OAXACA\", \"PUEBLA\",     \"QUERÉTARO\", \"QUINTANA ROO\", \"SAN LUIS POTOSÍ\", \"SINALOA\", \"SONORA\", \"TABASCO\",     \"TAMAULIPAS\", \"TLAXCALA\", \"VERACRUZ DE IGNACIO DE LA LLAVE\", \"YUCATÁN\", \"ZACATECAS\"),   group_by_entidad = TRUE,   entidad_tipo = c(\"Unidad Medica\", \"Residencia\", \"Nacimiento\"),   fecha_tipo = c(\"Sintomas\", \"Ingreso\", \"Defuncion\"),   tipo_uci = c(\"SI\", \"NO\", \"NO APLICA\", \"SE IGNORA\", \"NO ESPECIFICADO\"),   group_by_tipo_uci = FALSE,   tipo_clasificacion = c(\"Confirmados COVID\"),   group_by_tipo_clasificacion = FALSE,   tipo_paciente = c(\"AMBULATORIO\", \"HOSPITALIZADO\", \"NO ESPECIFICADO\"),   group_by_tipo_paciente = FALSE,   tipo_sector = c(\"CRUZ ROJA\", \"DIF\", \"ESTATAL\", \"IMSS\", \"IMSS-BIENESTAR\", \"ISSSTE\",     \"MUNICIPAL\", \"PEMEX\", \"PRIVADA\", \"SEDENA\", \"SEMAR\", \"SSA\", \"UNIVERSITARIO\",     \"NO ESPECIFICADO\"),   group_by_tipo_sector = FALSE,   edad_cut = NULL,   fill_NA = TRUE,   quiet = FALSE,   list_name = \"case fatality rate\",   .grouping_vars = c() )"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/cfr.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"Case Fatality Rate (CFR) — cfr","text":"datos_covid data available automatically downloads COVID-19 information. entidades Vector con las entidades de las unidades medicas analizar. Opciones: AGUASCALIENTES, BAJA CALIFORNIA, BAJA CALIFORNIA SUR, CAMPECHE, CHIAPAS, CHIHUAHUA, CIUDAD DE MEXICO, COAHUILA DE ZARAGOZA , COLIMA, DURANGO, GUANAJUATO, GUERRERO, HIDALGO, JALISCO, MEXICO, MICHOACAN DE OCAMPO, MORELOS,NAYARIT NUEVO LEON, OAXACA ,PUEBLA, QUERETARO,QUINTANA ROO, SAN LUIS POTOSI, SINALOA, SONORA, TABASCO, TAMAULIPAS,TLAXCALA, VERACRUZ DE IGNACIO DE LA LLAVE, YUCATAN, ZACATECAS group_by_entidad Si junta las entidades en una sola o bien las muestra por separado sin agrupar. entidad_tipo Selecciona Unidad Medica, Nacimiento o Residencia. por default incluye Unidad Medica fecha_tipo Selecciona Ingreso, Sintomas o Defuncion por default incluye fecha de Sintomas tipo_uci Vector con el tipo de valores para Unidad de Cuidado Intensivo incluir: SI,,APLICA,SE IGNORA,ESPECIFICADO group_by_tipo_uci Boolean determinando si regresa la base con cada entrada agrupada por tipo de uci (es decir cada fecha se generan tantos observaciones como grupos de tipo de uci) tipo_clasificacion Vector con el tipo de clasificaciones incluir: Sospechosos,Confirmados COVID, Negativo COVID, Inv\\u00e1lido, realizado group_by_tipo_clasificacion Boolean determinando si regresa la base con cada entrada agrupada por tipo de clasificación (es decir cada fecha se generan tantos observaciones como grupos de tipo de clasificación) tipo_paciente Vector con el tipo de pacientes incluir. Opciones: AMBULATORIO, HOSPITALIZADO, ESPECIFICADO group_by_tipo_paciente Boolean determinando si regresa la base con cada entrada agrupada por tipo de paciente (es decir cada fecha se generan tantos observaciones como grupos de tipo de paciente) tipo_sector Vector con los sectores del sistema de salud incluir: CRUZ ROJA,DIF,ESTATAL,IMSS,IMSS-BIENESTAR,ISSSTE, MUNICIPAL,PEMEX, PRIVADA,SEDENA,SEMAR,SSA, UNIVERSITARIO,ESPECIFICADO. group_by_tipo_sector Boolean determinando si regresa la base con cada entrada agrupada por tipo de sector (es decir cada fecha se generan tantos observaciones como grupos de tipo de sector) edad_cut Vector con secuencia de edades para hacer grupos. Por ejemplo edad_cut = c(0, 10, Inf) arma dos grupos de edad de 0 10 y de 10 infinito o bien edad_cut = c(15, 20) deja sólo los registros entre 15 y 20 años. Por default es NULL fill_NA Regresa observaciones para todas las combinaciones de variables incluyendo como NA donde se observaron casos y por tanto el denominador y el chr es indefinido. quiet arroja ningun mensaje list_name Asigna un nombre en la lista de datos la base generada .grouping_vars Vector de variables adicionales de agrupacion de los conteos","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/cfr.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"Case Fatality Rate (CFR) — cfr","text":"Appends la lista de datos_covid una nueva entrada de nombre list_name (default: casos) con una base de datos (tibble o dbConnection) con los resultados agregados. case hospitalization rate - Base de datos generara con los datos agregados (el nombre cambia si se usa list_name). dict - Diccionario de datos dats - Datos originales (conexion DB) disconnect  - Función para desconectarte de DB","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/cfr.html","id":"detalles","dir":"Reference","previous_headings":"","what":"Detalles","title":"Case Fatality Rate (CFR) — cfr","text":"official product / este es un producto oficial","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/cfr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"Case Fatality Rate (CFR) — cfr","text":"","code":"if (FALSE) { datos_covid <- descarga_datos_abiertos()  # Casos a nivel nacional datos_covid <- datos_covid |> cfr() head(datos_covid$`case fatality rate`)  # Nacional datos_covid <- datos_covid |> cfr(list_name = \"cfr_nacional\", group_by_entidad = F)  # CFR en Jalisco y Colima datos_covid <- datos_covid |>   cfr(entidades = c(\"JALISCO\", \"COLIMA\"), list_name = \"cfr_Jaliscolima\")  # Calcula el CFR suponiendo toda la base son confirmados datos_covid <- datos_covid |>   cfr(     entidades = c(\"JALISCO\", \"COLIMA\"),     tipo_clasificacion = c(       \"Sospechosos\", \"Confirmados COVID\",       \"Negativo a COVID\", \"Inv\\u00e1lido\", \"No realizado\"     ),     group_by_tipo_clasificacion = TRUE, list_name = \"Jaliscolima2_cfr\"   )  # Distinguiendo entre ambulatorio y hospitalizado datos_covid <- datos_covid |>   casos(     entidades = c(\"JALISCO\", \"COLIMA\"),     tipo_paciente = c(\"AMBULATORIO\", \"HOSPITALIZADO\"),     group_by_tipo_paciente = TRUE,     list_name = \"Jalisco + colima cfr\"   )  # CFR en ambulatorios y hospitalizados datos_covid |>   cfr(     tipo_paciente = c(\"AMBULATORIO\", \"HOSPITALIZADO\"),     group_by_tipo_paciente = TRUE,     group_by_entidad = FALSE,     list_name = \"CFR_hosp_amb\"   ) |>   plot_covid(df_name = \"CFR_hosp_amb\", type = \"line\", facet_ncol = 3)  # Si deseas agrupar por una variable que no este en las opciones datos_covid <- datos_covid |>   cfr(.grouping_vars = c(\"DIABETES\"), list_name = \"cfr_diab\") }"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Case Hospitalization Rate (CHR) — chr","title":"Case Hospitalization Rate (CHR) — chr","text":"chr Calcula la proporción de enfermos que resultan hospitalizados sobre todos los enfermos confirmados en distintas categorías (residencia / edad / etc)","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Case Hospitalization Rate (CHR) — chr","text":"","code":"chr(   datos_covid,   entidades = c(\"AGUASCALIENTES\", \"BAJA CALIFORNIA\", \"BAJA CALIFORNIA SUR\", \"CAMPECHE\",     \"CHIAPAS\", \"CHIHUAHUA\", \"CIUDAD DE MÉXICO\", \"COAHUILA DE ZARAGOZA\", \"COLIMA\",     \"DURANGO\", \"GUANAJUATO\", \"GUERRERO\", \"HIDALGO\", \"JALISCO\", \"MÉXICO\",     \"MICHOACÁN DE OCAMPO\", \"MORELOS\", \"NAYARIT\", \"NUEVO LEÓN\", \"OAXACA\", \"PUEBLA\",     \"QUERÉTARO\", \"QUINTANA ROO\", \"SAN LUIS POTOSÍ\", \"SINALOA\", \"SONORA\", \"TABASCO\",     \"TAMAULIPAS\", \"TLAXCALA\", \"VERACRUZ DE IGNACIO DE LA LLAVE\", \"YUCATÁN\", \"ZACATECAS\"),   group_by_entidad = TRUE,   entidad_tipo = c(\"Unidad Medica\", \"Residencia\", \"Nacimiento\"),   fecha_tipo = c(\"Sintomas\", \"Ingreso\", \"Defuncion\"),   tipo_clasificacion = c(\"Confirmados COVID\"),   group_by_tipo_clasificacion = FALSE,   incluir_paciente_no_especificado = FALSE,   tipo_sector = c(\"CRUZ ROJA\", \"DIF\", \"ESTATAL\", \"IMSS\", \"IMSS-BIENESTAR\", \"ISSSTE\",     \"MUNICIPAL\", \"PEMEX\", \"PRIVADA\", \"SEDENA\", \"SEMAR\", \"SSA\", \"UNIVERSITARIO\",     \"NO ESPECIFICADO\"),   group_by_tipo_sector = FALSE,   defunciones = FALSE,   edad_cut = NULL,   fill_NA = TRUE,   list_name = \"case hospitalization rate\",   quiet = FALSE,   .grouping_vars = c() )"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/chr.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"Case Hospitalization Rate (CHR) — chr","text":"datos_covid data available automatically downloads COVID-19 information. entidades Vector con las entidades de las unidades medicas analizar. Opciones: AGUASCALIENTES, BAJA CALIFORNIA, BAJA CALIFORNIA SUR, CAMPECHE, CHIAPAS, CHIHUAHUA, CIUDAD DE MEXICO, COAHUILA DE ZARAGOZA , COLIMA, DURANGO, GUANAJUATO, GUERRERO, HIDALGO, JALISCO, MEXICO, MICHOACAN DE OCAMPO, MORELOS,NAYARIT NUEVO LEON, OAXACA ,PUEBLA, QUERETARO,QUINTANA ROO, SAN LUIS POTOSI, SINALOA, SONORA, TABASCO, TAMAULIPAS,TLAXCALA, VERACRUZ DE IGNACIO DE LA LLAVE, YUCATAN, ZACATECAS group_by_entidad Si junta las entidades en una sola o bien las muestra por separado sin agrupar. entidad_tipo Selecciona Unidad Medica, Nacimiento o Residencia. por default incluye Unidad Medica fecha_tipo Selecciona Ingreso, Sintomas o Defuncion por default incluye fecha de Sintomas tipo_clasificacion Vector con el tipo de clasificaciones incluir: Sospechosos,Confirmados COVID, Negativo COVID, Inv\\u00e1lido, realizado group_by_tipo_clasificacion Boolean determinando si regresa la base con cada entrada agrupada por tipo de clasificación (es decir cada fecha se generan tantos observaciones como grupos de tipo de clasificación) incluir_paciente_no_especificado Si en el denominador se incluyen los pacientes cuyo tipo es  ESPECIFICADO. Por default es FALSE por lo que sólo se incluyen AMBULATORIO, HOSPITALIZADO. tipo_sector Vector con los sectores del sistema de salud incluir: CRUZ ROJA,DIF,ESTATAL,IMSS,IMSS-BIENESTAR,ISSSTE, MUNICIPAL,PEMEX, PRIVADA,SEDENA,SEMAR,SSA, UNIVERSITARIO,ESPECIFICADO. group_by_tipo_sector Boolean determinando si regresa la base con cada entrada agrupada por tipo de sector (es decir cada fecha se generan tantos observaciones como grupos de tipo de sector) defunciones Boolean si incluir sólo defunciones TRUE o todos FALSE. edad_cut Vector con secuencia de edades para hacer grupos. Por ejemplo edad_cut = c(0, 10, Inf) arma dos grupos de edad de 0 10 y de 10 infinito o bien edad_cut = c(15, 20) deja sólo los registros entre 15 y 20 años. Por default es NULL fill_NA Regresa observaciones para todas las combinaciones de variables incluyendo como NA donde se observaron casos y por tanto el denominador y el chr es indefinido. list_name Asigna un nombre en la lista de datos la base generada quiet arroja ningun mensaje .grouping_vars Vector de variables adicionales de agrupacion de los conteos","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/chr.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"Case Hospitalization Rate (CHR) — chr","text":"Appends la lista de datos_covid una nueva entrada de nombre list_name (default: casos) con una base de datos (tibble o dbConnection) con los resultados agregados. case hospitalization rate - Base de datos generara con los datos agregados (el nombre cambia si se usa list_name). dict - Diccionario de datos dats - Datos originales (conexion DB) disconnect  - Función para desconectarte de DB","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/chr.html","id":"detalles","dir":"Reference","previous_headings":"","what":"Detalles","title":"Case Hospitalization Rate (CHR) — chr","text":"official product / este es un producto oficial","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/chr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"Case Hospitalization Rate (CHR) — chr","text":"","code":"if (FALSE) { datos_covid <- descarga_datos_abiertos()  # Casos a nivel nacional datos_covid <- datos_covid |> chr() head(datos_covid$`case hospitalization rate`)  # Nacional datos_covid <- datos_covid |> chr(list_name = \"chr nacional\", group_by_entidad = F)  # CFR en Jalisco y Colima datos_covid <- datos_covid |>   chr(entidades = c(\"JALISCO\", \"COLIMA\"), list_name = \"chr_Jaliscolima\")  # Calcula el CHR suponiendo toda la base son confirmados datos_covid <- datos_covid |>   chr(     entidades = c(\"JALISCO\", \"COLIMA\"),     tipo_clasificacion = c(       \"Sospechosos\", \"Confirmados COVID\",       \"Negativo a COVID\", \"Inv\\u00e1lido\", \"No realizado\"     ),     group_by_tipo_clasificacion = TRUE, list_name = \"Jaliscolima2_chr\"   )  # Distinguiendo sólo entre defunciones datos_covid <- datos_covid |>   chr(     entidades = c(\"JALISCO\", \"COLIMA\"),     defunciones = TRUE,     list_name = \"Jalisco + colima chr\"   )  # Si deseas agrupar por una variable que no este en las opciones datos_covid <- datos_covid |>   chr(.grouping_vars = c(\"DIABETES\"), list_name = \"chr_diab\") }"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/covidmx-package.html","id":null,"dir":"Reference","previous_headings":"","what":"covidmx: Herramientas para el analisis de datos de COVID-19 en Mexico — covidmx-package","title":"covidmx: Herramientas para el analisis de datos de COVID-19 en Mexico — covidmx-package","text":"Descarga y analiza los datos para COVID-19 de la Direccion General de Epidemiologia de Mexico, la Red de Infecciones Respiratorias Agudas Graves (Red IRAG) y la Global Initiative Sharing Influenza Data (GISAID). EN: Downloads analyzes data COVID-19 Mexican General Directorate Epidemiology, IRAG network GISAID.","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/covidmx/reference/covidmx-package.html","id":"autor-a","dir":"Reference","previous_headings":"","what":"Autor-a","title":"covidmx: Herramientas para el analisis de datos de COVID-19 en Mexico — covidmx-package","text":"Maintainer: Rodrigo Zepeda-Tello rzepeda17@gmail.com (ORCID) Authors: Mauricio Hernandez-Avila","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/datosabiertos.html","id":null,"dir":"Reference","previous_headings":"","what":"Datos abiertos de COVID-19 — datosabiertos","title":"Datos abiertos de COVID-19 — datosabiertos","text":"Base de datos que contiene una extraccion pequenia de la base de datos abiertos que se obtiene mediante descarga_datos_abiertos.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/datosabiertos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Datos abiertos de COVID-19 — datosabiertos","text":"","code":"datosabiertos"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/datosabiertos.html","id":"formato","dir":"Reference","previous_headings":"","what":"Formato","title":"Datos abiertos de COVID-19 — datosabiertos","text":"Una lista con tres objetos dats Base de datos de la DGE actualizada el 14 julio 2022 dict Diccionario de datos disconnect Funcion que simula desconexion de MariaDB","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/datosabiertos.html","id":"fuente","dir":"Reference","previous_headings":"","what":"Fuente","title":"Datos abiertos de COVID-19 — datosabiertos","text":"https://www.gob.mx/salud/documentos/datos-abiertos-152127","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/datosabiertos.html","id":"detalles","dir":"Reference","previous_headings":"","what":"Detalles","title":"Datos abiertos de COVID-19 — datosabiertos","text":"El proposito de esta base es poder probar las funciones que se aplican sobre datos_covid","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_abiertos.html","id":null,"dir":"Reference","previous_headings":"","what":"Descarga de datos abiertos — descarga_datos_abiertos","title":"Descarga de datos abiertos — descarga_datos_abiertos","text":"Conjunto de funciones para la descarga de datos abiertos de la Direccion General de Epidemiologia La funcion de descarga principal es descarga_datos_abiertos llama las siguientes funciones en orden: descarga_diccionario() descarga_db() pega_db_datos_abiertos_tbl_y_diccionario() su vez descarga_diccionario ejecuta las siguientes para obtener el diccionario de datos: descarga_db_diccionario_ssa() unzip_db_diccionario_ssa() parse_db_diccionario_ssa() su vez descarga_db ejecuta las siguientes para obtener los datos abiertos: descarga_db_datos_abiertos_tbl() unzip_db_datos_abiertos_tbl() parse_db_datos_abiertos_tbl() Si en algun momento se interrumpio la descarga o hubo problemas de conexion o detuviste el proceso de generacion de la base de datos abiertos puedes llamar las funciones de read_datos_abiertos()","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_abiertos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Descarga de datos abiertos — descarga_datos_abiertos","text":"","code":"descarga_datos_abiertos(   read_format = c(\"duckdb\", \"tibble\"),   tblname = \"covidmx\",   drv = duckdb::duckdb(),   dbdir = tempfile(fileext = \".duckdb\"),   pragma_memory_limit = \"1GB\",   colClasses = get_col_class(),   sites.covid = c(`2022` = paste0(\"http://datosabiertos.salud.gob.mx/gobmx/salud\",     \"/datos_abiertos/datos_abiertos_covid19.zip\"), `2021` =     paste0(\"https://datosabiertos.salud.gob.mx/gobmx/salud\",     \"/datos_abiertos/historicos/2021/\", \"COVID19MEXICO2021.zip\"), `2020` =     paste0(\"https://datosabiertos.salud.gob.mx/gobmx/salud\",     \"/datos_abiertos/historicos/2020/\", \"COVID19MEXICO2020.zip\")),   download_process = c(\"pins\", \"download.file\"),   site.covid.dic = paste0(\"http://datosabiertos.salud.\", \"gob.mx/gobmx/salud/datos_a\",     \"biertos/diccionario_datos_\", \"covid19.zip\"),   unzip_command = Sys.getenv(\"unzip_command\"),   unzip_args = Sys.getenv(\"unzip_args\"),   unzip_args_dict = list(exdir = \".\", overwrite = TRUE),   check_unzip_install = TRUE,   clear_zip = (download_process[1] != \"pins\"),   clear_csv = TRUE,   use_dict = TRUE,   datos_abiertos_zip_paths = NULL,   datos_abiertos_unzipped_path = NULL,   datos_abiertos_tbl = NULL,   diccionario_zip_path = NULL,   diccionario_unzipped_path = NULL,   diccionario = NULL,   quiet = FALSE,   cache_datos = NULL,   use_cache_on_failure = TRUE,   cache_diccionario = NULL,   force_download = FALSE,   show_warnings = TRUE,   board_url_name = \"datos_abiertos\",   board_url_name_dict = \"diccionario_covid\",   download_file_args = list(method = \"curl\", destfile = tempfile(), quiet = quiet),   descarga_db_datos_abiertos_tbl_args = list(),   descarga_db_diccionario_ssa_args = list(),   ... )  descarga_db(   read_format = c(\"duckdb\", \"tibble\"),   tblname = \"covidmx\",   pragma_memory_limit = \"1GB\",   drv = duckdb::duckdb(),   dbdir = tempfile(fileext = \".duckdb\"),   colClasses = get_col_class(),   sites.covid = c(`2022` = paste0(\"http://datosabiertos.salud.gob.mx/gobmx/salud\",     \"/datos_abiertos/datos_abiertos_covid19.zip\"), `2021` =     paste0(\"https://datosabiertos.salud.gob.mx/gobmx/salud\",     \"/datos_abiertos/historicos/2021/\", \"COVID19MEXICO2021.zip\"), `2020` =     paste0(\"https://datosabiertos.salud.gob.mx/gobmx/salud\",     \"/datos_abiertos/historicos/2020/\", \"COVID19MEXICO2020.zip\")),   download_process = c(\"pins\", \"download.file\"),   unzip_command = Sys.getenv(\"unzip_command\"),   unzip_args = Sys.getenv(\"unzip_args\"),   check_unzip_install = TRUE,   clear_zip = (download_process[1] != \"pins\"),   clear_csv = TRUE,   force_download = FALSE,   show_warnings = TRUE,   datos_abiertos_zip_paths = NULL,   datos_abiertos_unzipped_path = NULL,   datos_abiertos_tbl = NULL,   quiet = FALSE,   board_url_name = \"datos_abiertos\",   cache = NULL,   use_cache_on_failure = TRUE,   download_file_args = list(method = \"curl\", destfile = tempfile(), quiet = quiet),   descarga_db_datos_abiertos_tbl_args = list(),   ... )  descarga_diccionario(   download_process = c(\"pins\", \"download.file\"),   site.covid.dic = paste0(\"http://datosabiertos.salud.\", \"gob.mx/gobmx/salud/datos_a\",     \"biertos/diccionario_datos_\", \"covid19.zip\"),   quiet = FALSE,   clear_zip = download_process[1] != \"pins\",   clear_csv = TRUE,   diccionario_zip_path = NULL,   diccionario_unzipped_path = NULL,   diccionario = NULL,   board_url_name_dict = \"diccionario_covid\",   cache_diccionario = NULL,   use_cache_on_failure = TRUE,   force_download = FALSE,   show_warnings = TRUE,   download_file_args_dict = list(method = \"curl\", destfile = tempfile(), quiet = quiet),   unzip_args_dict = list(exdir = \".\", overwrite = TRUE),   descarga_db_diccionario_ssa_args = list() )  descarga_db_datos_abiertos_tbl(   download_process = c(\"pins\", \"download.file\"),   sites.covid = c(`2022` = paste0(\"http://datosabiertos.salud.gob.mx/gobmx/salud\",     \"/datos_abiertos/datos_abiertos_covid19.zip\"), `2021` =     paste0(\"https://datosabiertos.salud.gob.mx/gobmx/salud\",     \"/datos_abiertos/historicos/2021/\", \"COVID19MEXICO2021.zip\"), `2020` =     paste0(\"https://datosabiertos.salud.gob.mx/gobmx/salud\",     \"/datos_abiertos/historicos/2020/\", \"COVID19MEXICO2020.zip\")),   quiet = FALSE,   board_url_name = \"datos_abiertos\",   cache = NULL,   use_cache_on_failure = TRUE,   force_download = FALSE,   show_warnings = TRUE,   download_file_args = list(method = \"curl\", destfile = tempfile(), quiet = quiet),   ... )  descarga_db_diccionario_ssa(   download_process = c(\"pins\", \"download.file\"),   site.covid.dic = paste0(\"http://datosabiertos.salud.\", \"gob.mx/gobmx/salud/datos_a\",     \"biertos/diccionario_datos_\", \"covid19.zip\"),   quiet = FALSE,   board_url_name_dict = \"diccionario_covid\",   cache_diccionario = NULL,   use_cache_on_failure = TRUE,   force_download = FALSE,   show_warnings = TRUE,   download_file_args_dict = list(method = \"curl\", destfile = tempfile(), quiet = quiet),   ... )  unzip_db_datos_abiertos_tbl(   datos_abiertos_zip_paths,   unzip_command = Sys.getenv(\"unzip_command\"),   unzip_args = Sys.getenv(\"unzip_args\"),   check_unzip_install = TRUE,   quiet = FALSE,   clear_zip = FALSE )  unzip_db_diccionario_ssa(   diccionario_zip_path,   unzip_args_dict = list(exdir = \".\", overwrite = TRUE),   clear_zip = FALSE )  parse_db_diccionario_ssa(diccionario_unzipped_path, clear_csv = FALSE)  parse_db_datos_abiertos_tbl(   datos_abiertos_unzipped_path,   read_format = c(\"duckdb\", \"tibble\"),   pragma_memory_limit = \"1GB\",   dbdir = tempfile(fileext = \".duckdb\"),   drv = duckdb::duckdb(),   colClasses = get_col_class(),   tblname = \"covidmx\",   quiet = TRUE,   clear_csv = FALSE,   ... )  pega_db_datos_abiertos_tbl_y_diccionario(datos_abiertos_tbl, diccionario)"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_abiertos.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"Descarga de datos abiertos — descarga_datos_abiertos","text":"read_format \"duckdb\" o \"tibble\" establece el formato de lectura de la base de datos. En la mayoria de los casos \"tibble\" va resultar en un error de memoria. tblname Nombre de la tabla dentro de el DATABASE dbname donde guardar los datos por default se llama covidmx. drv Un  driver para dbConnect (default duckdb::duckdb()) dbdir Parametro de duckdb::dbConnect__duckdb_driver() pragma_memory_limit Memory limit program PRAGMAS. change around half RAM colClasses Clases de la columna para leer en read.csv sites.covid Sitio web con el vinculo al archivo .zip de los datos abiertos. Puedes cambiarlo por uno de los historicos, por ejemplo. download_process (opcional)  Metodo para descargar ya sea pins o download.file. Se recomienda pins pues guarda en memoria la fecha de la ultima descarga y analiza si ha pasado mas de un dia desde la descarga. En caso afirmativo verifica si el archivo ha cambiado y si hubo cambios entonces lo descarga. site.covid.dic Sitio para descarga del diccionario de datos. unzip_command Forma de extraer la base de datos de datos abiertos. La forma de llamarla es con system2(unzip_command, args = c(unzip_args, file_download_data)). unzip_args Argumentos de extraccion de la base de datos de datos abiertos. La forma de llamarla es con system2(unzip_command, args = c(unzip_args, file_download_data)). unzip_args_dict Lista de argumentos para usar utils::unzip en el diccionario de datos. check_unzip_install Bandera de verificacion para checar si tienes lo necesario para unzippear los datos. clear_zip Si borrar los archivos .zip descargados para el diccionario y los datos abiertos. se recomienda si estas usando pins. Ve la nota para mas informacion. clear_csv Si borrar los archivos .csv que se generan despues de abrir el zip. El default es que si. use_dict Si descargar el diccionario de site.covid.dic. datos_abiertos_zip_paths Camino los datos abiertos si ya los descargaste en zip datos_abiertos_unzipped_path Camino los datos abiertos csv si ya los descargaste y descomprimiste el archivo zip en un csv datos_abiertos_tbl Lo que resulta de realizar una descarga de los datos abiertos usando descarga_db diccionario_zip_path Camino al diccionario si ya losdescargaste en zip diccionario_unzipped_path Camino al diccionario csv si ya lo descargaste y descomprimiste el archivo zip en un csv diccionario Lo que resulta de realizar una descarga del diccionario usando descarga_diccionario quiet (opcional) Variable para mostrar mensajes cache_datos Direccion donde guardar los datos en memoria usando pins para tener que volver descargarlos si nada ha cambiado use_cache_on_failure Booleana. Establece que si se pueden descargar datos nuevos utilice los que tenga en memoria. cache_diccionario Direccion donde guardar el diccionario en memoria usando pins para tener que volver descargarlo si nada ha cambiado force_download analiza si cambio el pin y descarga datos nuevos en caso afirmativo show_warnings si arrojar warnings board_url_name Establece el nombre del pins::board_url para los datos abiertos board_url_name_dict Establece el nombre del pins::board_url para los datos abiertos download_file_args Lista de argumentos adicionales para download.file de los datos si se elige este metodo para descargar. descarga_db_datos_abiertos_tbl_args Lista con argumentos adicionales para el pins::pin_download de datos abiertos descarga_db_diccionario_ssa_args Lista con argumentos adicionales para el pins::pin_download de datos abiertos ... Parametros adicionales para pins::pin_download cache parametro para el cache de pins::board_url download_file_args_dict Lista de argumentos adicionales para download.file del diccionario si se elige este metodo de descarga.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_abiertos.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"Descarga de datos abiertos — descarga_datos_abiertos","text":"Lista de valores: dats        - Tabla conectada mediante duckdb::dbConnect__duckdb_driver() (si duckdb) o tibble (si tibble) disconnect  - Funcion para cerrar la conexion la base de datos. dict        - Lista de tibbles con el diccionario de datos para cada variable","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_abiertos.html","id":"detalles","dir":"Reference","previous_headings":"","what":"Detalles","title":"Descarga de datos abiertos — descarga_datos_abiertos","text":"Si tienes RAM que te sobre puedes crear una base de datos en duckdb sino leer directo el archivo csv. Esto se logra con read_format = tibble. lo recomiendo pues puedes terminar con tu sesion de R si se te acaba la memoria. Windows Para abrir el archivo .zip quiza requieras tambien descargar e instalar 7Zip por default el sistema lo busca en C:\\\\Program Files\\\\7-Zip\\\\7z.exe pero si esta ese directorio es necesario que en unzip_command especifiques el camino donde se instalo 7z.exe.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_abiertos.html","id":"nota","dir":"Reference","previous_headings":"","what":"Nota","title":"Descarga de datos abiertos — descarga_datos_abiertos","text":"te recomiendo borrar el cache con clear_zip o editarlo por cualquier otro medio si estas usando pins pues puede romperse la dependencia. Si accidentalmente lo borraste usa pins::board_cache_path() para ir al path y borrar manualmente toda la carpeta.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_abiertos.html","id":"uso-de-pins","dir":"Reference","previous_headings":"","what":"Uso de pins","title":"Descarga de datos abiertos — descarga_datos_abiertos","text":"Para almacenar los datos se utiliza un pequenio cambio sobre la libreria pins. Los datos se descargan y se almacenan en cache junto con informacion sobre cuando fue la descarga. Si ha pasado un dia desde la ultima descarga se descarga nada nuevo. Si los datos que se tienen han cambiado respecto lo que esta en linea tampoco se vuelven descargar aunque haya pasado mas de un dia. Si se te fue el Internet te preocupes, pins lee tu descarga mas reciente. Para ver donde estan descargados tus datos usa pins::board_cache_path(). Para borrarlos usa pins::cache_prune().","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_abiertos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"Descarga de datos abiertos — descarga_datos_abiertos","text":"","code":"if (FALSE) { # Descarga de la base de datos junto con diccionario en duckdb datos_covid <- descarga_datos_abiertos()  # Luego haces algo con esos datos...  # Cuando terminas cierras la sesion: datos_covid$disconnect()  # Descarga solo el diccionario diccionario    <- descarga_diccionario()  # O bien descarga solo los datos abiertos datos_abiertos <- descarga_db()  # Pegalos en el formato que se necesita para el resto de funciones datos_covid    <- pega_db_datos_abiertos(datos_abiertos, diccionario)  # Tambien puedes descargar paso por paso datos_abiertos <- descarga_db_datos_abiertos_tbl() |> # Descarga   unzip_db_datos_abiertos_tbl() |> # Unzippea   parse_db_datos_abiertos_tbl() # Duckdb  # O bien el diccionario diccionario <- descarga_db_diccionario_ssa() |> # Descarga   unzip_db_diccionario_ssa() |> # Unzippea   parse_db_diccionario_ssa() # Tibble }"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_ocupacion_hospitalaria.html","id":null,"dir":"Reference","previous_headings":"","what":"LEE LA BASE DE DATOS DE OCUPACIoN HOSPITALARIA — descarga_datos_ocupacion_hospitalaria","title":"LEE LA BASE DE DATOS DE OCUPACIoN HOSPITALARIA — descarga_datos_ocupacion_hospitalaria","text":"descarga_datos_ocupacion_hospitalaria Lee los datos de ocupacion hospitalaria de la RED IRAG disponibles en https://www.gits.igg.unam.mx/red-irag-dashboard/reviewHome#","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_ocupacion_hospitalaria.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"LEE LA BASE DE DATOS DE OCUPACIoN HOSPITALARIA — descarga_datos_ocupacion_hospitalaria","text":"","code":"descarga_datos_ocupacion_hospitalaria(nivel = c(\"Estatal\", \"Unidad Médica\"))"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_ocupacion_hospitalaria.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"LEE LA BASE DE DATOS DE OCUPACIoN HOSPITALARIA — descarga_datos_ocupacion_hospitalaria","text":"nivel \"Estatal\" o \"Unidad Médica\"","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_ocupacion_hospitalaria.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"LEE LA BASE DE DATOS DE OCUPACIoN HOSPITALARIA — descarga_datos_ocupacion_hospitalaria","text":"data.frame con los datos de ocupacion hospitalaria","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_ocupacion_hospitalaria.html","id":"detalles","dir":"Reference","previous_headings":"","what":"Detalles","title":"LEE LA BASE DE DATOS DE OCUPACIoN HOSPITALARIA — descarga_datos_ocupacion_hospitalaria","text":"official product / este es un producto oficial Spanish Los datos son descargados de manera automatica en mi Github: RodrigoZepeda/CapacidadHospitalariaMX y esta funcion los lee de ahí","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_ocupacion_hospitalaria.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"LEE LA BASE DE DATOS DE OCUPACIoN HOSPITALARIA — descarga_datos_ocupacion_hospitalaria","text":"","code":"if (FALSE) { ocupacion_hospitalaria <- descarga_datos_ocupacion_hospitalaria() }"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_red_irag.html","id":null,"dir":"Reference","previous_headings":"","what":"LEE LA BASE DE DATOS DE OCUPACION HOSPITALARIA DE RED IRAG — descarga_datos_red_irag","title":"LEE LA BASE DE DATOS DE OCUPACION HOSPITALARIA DE RED IRAG — descarga_datos_red_irag","text":"descarga_datos_red_irag Lee los datos de ocupacion hospitalaria de la RED IRAG disponibles en https://www.gits.igg.unam.mx/red-irag-dashboard/reviewHome#","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_red_irag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"LEE LA BASE DE DATOS DE OCUPACION HOSPITALARIA DE RED IRAG — descarga_datos_red_irag","text":"","code":"descarga_datos_red_irag(   nivel = c(\"Estatal\", \"Unidad Médica\"),   cache = NULL,   use_cache_on_failure = TRUE,   quiet = TRUE,   force_download = FALSE,   show_warnings = TRUE,   ... )"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_red_irag.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"LEE LA BASE DE DATOS DE OCUPACION HOSPITALARIA DE RED IRAG — descarga_datos_red_irag","text":"nivel \"Estatal\" o \"Unidad Medica\" cache cache para pins::board_url. use_cache_on_failure parametro para pins::board_url. quiet booleana para imprimir mensajes en la consola. force_download analiza si cambio el pin y descarga datos nuevos en caso afirmativo show_warnings si arrojar warnings ... parametros adicionales para pins::pin_download.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_red_irag.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"LEE LA BASE DE DATOS DE OCUPACION HOSPITALARIA DE RED IRAG — descarga_datos_red_irag","text":"data.frame con los datos de ocupacion hospitalaria","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_red_irag.html","id":"detalles","dir":"Reference","previous_headings":"","what":"Detalles","title":"LEE LA BASE DE DATOS DE OCUPACION HOSPITALARIA DE RED IRAG — descarga_datos_red_irag","text":"Los datos de Red IRAG son descargados diariamente de manera automatica en Github: RodrigoZepeda/CapacidadHospitalariaMX y esta funcion los lee de ahi","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_red_irag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"LEE LA BASE DE DATOS DE OCUPACION HOSPITALARIA DE RED IRAG — descarga_datos_red_irag","text":"","code":"if (FALSE) { # Descarga de datos estatales ocupacion_hospitalaria <- descarga_datos_red_irag(\"Estatal\")  # Descarga de datos por unidad medica ocupacion_hospitalaria <- descarga_datos_red_irag(\"Unidad Medica\")  # Si ya descargaste hace menos de un día el programa solito se da cuenta y lee de memoria # sin verificar que el contenido en Internet haya cambiado ocupacion_hospitalaria <- descarga_datos_red_irag(\"Unidad Medica\")  # Puedes forzarlo a checar el contenido en Internet usando variantes_covid <- descarga_datos_red_irag(\"Unidad Medica\", force_download = TRUE) }"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_variantes_GISAID.html","id":null,"dir":"Reference","previous_headings":"","what":"LEE LA BASE DE DATOS DE VARIANTES DE COVID-19 DE GISAID — descarga_datos_variantes_GISAID","title":"LEE LA BASE DE DATOS DE VARIANTES DE COVID-19 DE GISAID — descarga_datos_variantes_GISAID","text":"descarga_datos_variantes_GISAID Lee los datos de variantes del reporte nacional diario en https://github.com/RodrigoZepeda/VariantesCovid  creado partir de la informacion de la Global Initiative Sharing Avian Influenza Data (GISAID)","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_variantes_GISAID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"LEE LA BASE DE DATOS DE VARIANTES DE COVID-19 DE GISAID — descarga_datos_variantes_GISAID","text":"","code":"descarga_datos_variantes_GISAID(   nivel = c(\"nacional\", \"cdmx\"),   cache = NULL,   use_cache_on_failure = TRUE,   quiet = FALSE,   force_download = FALSE,   show_warnings = TRUE,   ... )"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_variantes_GISAID.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"LEE LA BASE DE DATOS DE VARIANTES DE COVID-19 DE GISAID — descarga_datos_variantes_GISAID","text":"nivel si se desea descargar \"nacional\" o \"cdmx\". cache cache para pins::board_url. use_cache_on_failure parametro para pins::board_url. quiet booleana para imprimir mensajes en la consola. force_download analiza si cambio el pin y descarga datos nuevos en caso afirmativo show_warnings si arrojar warnings ... parametros adicionales para pins::pin_download.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_variantes_GISAID.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"LEE LA BASE DE DATOS DE VARIANTES DE COVID-19 DE GISAID — descarga_datos_variantes_GISAID","text":"data.frame con los datos porcentuales y de conteo de variantes","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_variantes_GISAID.html","id":"detalles","dir":"Reference","previous_headings":"","what":"Detalles","title":"LEE LA BASE DE DATOS DE VARIANTES DE COVID-19 DE GISAID — descarga_datos_variantes_GISAID","text":"Cada vez que uses estos datos necesitas citar GISAID (ver referencias) asi como el reporte en https://github.com/RodrigoZepeda/VariantesCovid. Los datos son descargados de manera automatica en mi Github: RodrigoZepeda/VariantesCovid el programa descarga_datos_variantes_GISAID se conecta dicho repositorio, busca si la informacion esta actualizada y si si la descarga, si , utiliza informacion almacenada en el cache local. La descarga usa el paquete pins","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_variantes_GISAID.html","id":"referencias","dir":"Reference","previous_headings":"","what":"Referencias","title":"LEE LA BASE DE DATOS DE VARIANTES DE COVID-19 DE GISAID — descarga_datos_variantes_GISAID","text":"Khare, S., et al (2021) GISAID's Role Pandemic Response. China CDC Weekly, 3(49): 1049-1051. doi:10.46234/ccdcw2021.255 PMCID: 8668406 Elbe, S. Buckland-Merrett, G. (2017) Data, disease diplomacy: GISAID’s innovative contribution global health. Global Challenges, 1:33-46. doi:10.1002/gch2.1018 PMCID: 31565258 Shu, Y. McCauley, J. (2017) GISAID: vision reality. EuroSurveillance, 22(13) doi:10.2807/1560-7917.ES.2017.22.13.30494 PMCID: PMC5388101 Zepeda-Tello, R. (2022). Reporte Nacional de Variantes de COVID-19. URL: https://github.com/RodrigoZepeda/VariantesCovid","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_variantes_GISAID.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"LEE LA BASE DE DATOS DE VARIANTES DE COVID-19 DE GISAID — descarga_datos_variantes_GISAID","text":"","code":"if (FALSE) { # Descarga de variantes a nivel nacional variantes_covid <- descarga_datos_variantes_GISAID(\"nacional\")  # Descarga de variantes para CDMX variantes_covid <- descarga_datos_variantes_GISAID(\"cdmx\")  # Si ya descargaste hace menos de un día el programa solito se da cuenta y lee de memoria # sin verificar que el contenido en Internet haya cambiado variantes_covid <- descarga_datos_variantes_GISAID(\"nacional\")  # Puedes forzarlo a checar el contenido en Internet usando variantes_covid <- descarga_datos_variantes_GISAID(\"nacional\", force_download = TRUE) }"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/estima_rt.html","id":null,"dir":"Reference","previous_headings":"","what":"RT: Número efectivo de reproducción — estima_rt","title":"RT: Número efectivo de reproducción — estima_rt","text":"estima_rt Calcula el número efectivo de reproducción por fecha y entidad","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/estima_rt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"RT: Número efectivo de reproducción — estima_rt","text":"","code":"estima_rt(   datos_covid,   entidades = c(\"AGUASCALIENTES\", \"BAJA CALIFORNIA\", \"BAJA CALIFORNIA SUR\", \"CAMPECHE\",     \"CHIAPAS\", \"CHIHUAHUA\", \"CIUDAD DE MÉXICO\", \"COAHUILA DE ZARAGOZA\", \"COLIMA\",     \"DURANGO\", \"GUANAJUATO\", \"GUERRERO\", \"HIDALGO\", \"JALISCO\", \"MÉXICO\",     \"MICHOACÁN DE OCAMPO\", \"MORELOS\", \"NAYARIT\", \"NUEVO LEÓN\", \"OAXACA\", \"PUEBLA\",     \"QUERÉTARO\", \"QUINTANA ROO\", \"SAN LUIS POTOSÍ\", \"SINALOA\", \"SONORA\", \"TABASCO\",     \"TAMAULIPAS\", \"TLAXCALA\", \"VERACRUZ DE IGNACIO DE LA LLAVE\", \"YUCATÁN\", \"ZACATECAS\"),   group_by_entidad = TRUE,   entidad_tipo = c(\"Unidad Medica\", \"Residencia\", \"Nacimiento\"),   fecha_tipo = c(\"Sintomas\", \"Ingreso\", \"Defuncion\"),   tipo_clasificacion = c(\"Sospechosos\", \"Confirmados COVID\", \"Negativo a COVID\",     \"Inválido\", \"No realizado\"),   tipo_paciente = c(\"AMBULATORIO\", \"HOSPITALIZADO\", \"NO ESPECIFICADO\"),   list_name = \"estima_rt\",   min_date = as.Date(\"2021/11/21\", format = \"%Y/%m/%d\"),   max_date = as.Date(Sys.time()),   method = \"parametric_si\",   config = if (requireNamespace(\"EpiEstim\", quietly = TRUE)) {          EpiEstim::make_config(list(mean_si = 3.5, std_si = 1.5))  } else {      NULL  },   ... )"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/estima_rt.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"RT: Número efectivo de reproducción — estima_rt","text":"datos_covid data available automatically downloads COVID-19 information. entidades Vector con las entidades de las unidades medicas analizar. Opciones: AGUASCALIENTES, BAJA CALIFORNIA, BAJA CALIFORNIA SUR, CAMPECHE, CHIAPAS, CHIHUAHUA, CIUDAD DE MEXICO, COAHUILA DE ZARAGOZA , COLIMA, DURANGO, GUANAJUATO, GUERRERO, HIDALGO, JALISCO, MEXICO, MICHOACAN DE OCAMPO, MORELOS,NAYARIT NUEVO LEON, OAXACA ,PUEBLA, QUERETARO,QUINTANA ROO, SAN LUIS POTOSI, SINALOA, SONORA, TABASCO, TAMAULIPAS,TLAXCALA, VERACRUZ DE IGNACIO DE LA LLAVE, YUCATAN, ZACATECAS group_by_entidad Si junta las entidades en una sola o bien las muestra por separado sin agrupar. entidad_tipo Selecciona Unidad Medica, Nacimiento o Residencia. por default incluye Unidad Medica fecha_tipo Selecciona Ingreso, Sintomas o Defuncion por default incluye fecha de Sintomas tipo_clasificacion Vector con el tipo de clasificaciones incluir: Sospechosos,Confirmados COVID, Negativo COVID, Inv\\u00e1lido, realizado tipo_paciente Vector con el tipo de pacientes incluir. Opciones: AMBULATORIO, HOSPITALIZADO, ESPECIFICADO list_name Asigna un nombre en la lista de datos la base generada min_date Mínima fecha partir de la cual estimar el RT max_date Máxima fecha partir de la cual estimar el RT method Method estimating RT EpiEstim::estimate_R config Configuration estimating RT EpiEstim::estimate_R ... Parámetros adicionales para EpiEstim::estimate_R.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/estima_rt.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"RT: Número efectivo de reproducción — estima_rt","text":"Appends la lista de datos_covid una nueva entrada de nombre list_name (default: casos) con una base de datos (tibble) con los resultados agregados. positividad - Base de datos generara con los datos agregados (el nombre cambia si se usa list_name). dict - Diccionario de datos dats - Datos originales (conexion DB) disconnect  - Funcion para desconectarte de DB","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/estima_rt.html","id":"detalles","dir":"Reference","previous_headings":"","what":"Detalles","title":"RT: Número efectivo de reproducción — estima_rt","text":"Por default calcula el número efectivo de reproducción por estado official product / este es un producto oficial","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/estima_rt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"RT: Número efectivo de reproducción — estima_rt","text":"","code":"if (FALSE) { datos_covid <- descarga_datos_abiertos()  # Casos a nivel nacional en los confirmados datos_covid <- datos_covid |>   estima_rt(     tipo_clasificacion = \"Confirmados COVID\",     group_by_entidad   = FALSE   )  # Casos en AGS, CHI en los confirmados datos_covid |>   estima_rt(     entidades = c(\"CHIHUAHUA\", \"AGUASCALIENTES\"),     tipo_clasificacion = \"Confirmados COVID\",     group_by_entidad = TRUE,      list_name = \"rt_ch_ags\"   ) |>    plot_covid(df_name = \"rt_ch_ags\", df_date_index = \"FECHA_SINTOMAS\",               df_variable = \"Mean(R)\", df_covariates = \"ENTIDAD_FEDERATIVA\") }"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/numero_pruebas.html","id":null,"dir":"Reference","previous_headings":"","what":"Numero de Pruebas — numero_pruebas","title":"Numero de Pruebas — numero_pruebas","text":"numero_pruebas Calcula el numero total de pruebas por fecha agrupando (o sin hacerlo) por covariables.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/numero_pruebas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Numero de Pruebas — numero_pruebas","text":"","code":"numero_pruebas(   datos_covid,   entidades = c(\"AGUASCALIENTES\", \"BAJA CALIFORNIA\", \"BAJA CALIFORNIA SUR\", \"CAMPECHE\",     \"CHIAPAS\", \"CHIHUAHUA\", \"CIUDAD DE MÉXICO\", \"COAHUILA DE ZARAGOZA\", \"COLIMA\",     \"DURANGO\", \"GUANAJUATO\", \"GUERRERO\", \"HIDALGO\", \"JALISCO\", \"MÉXICO\",     \"MICHOACÁN DE OCAMPO\", \"MORELOS\", \"NAYARIT\", \"NUEVO LEÓN\", \"OAXACA\", \"PUEBLA\",     \"QUERÉTARO\", \"QUINTANA ROO\", \"SAN LUIS POTOSÍ\", \"SINALOA\", \"SONORA\", \"TABASCO\",     \"TAMAULIPAS\", \"TLAXCALA\", \"VERACRUZ DE IGNACIO DE LA LLAVE\", \"YUCATÁN\", \"ZACATECAS\"),   group_by_entidad = TRUE,   entidad_tipo = c(\"Unidad Medica\", \"Residencia\", \"Nacimiento\"),   fecha_tipo = c(\"Sintomas\", \"Ingreso\", \"Defuncion\"),   tipo_prueba = c(\"Antigeno\", \"PCR\"),   group_by_tipo_prueba = TRUE,   tipo_paciente = c(\"AMBULATORIO\", \"HOSPITALIZADO\", \"NO ESPECIFICADO\"),   group_by_tipo_paciente = FALSE,   tipo_uci = c(\"SI\", \"NO\", \"NO APLICA\", \"SE IGNORA\", \"NO ESPECIFICADO\"),   group_by_tipo_uci = FALSE,   tipo_sector = c(\"CRUZ ROJA\", \"DIF\", \"ESTATAL\", \"IMSS\", \"IMSS-BIENESTAR\", \"ISSSTE\",     \"MUNICIPAL\", \"PEMEX\", \"PRIVADA\", \"SEDENA\", \"SEMAR\", \"SSA\", \"UNIVERSITARIO\",     \"NO ESPECIFICADO\"),   group_by_tipo_sector = FALSE,   defunciones = FALSE,   edad_cut = NULL,   as_tibble = TRUE,   fill_zeros = as_tibble,   list_name = \"numero_pruebas\",   .grouping_vars = c() )"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/numero_pruebas.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"Numero de Pruebas — numero_pruebas","text":"datos_covid data available automatically downloads COVID-19 information. entidades Vector con las entidades de las unidades medicas analizar. Opciones: AGUASCALIENTES, BAJA CALIFORNIA, BAJA CALIFORNIA SUR, CAMPECHE, CHIAPAS, CHIHUAHUA, CIUDAD DE MEXICO, COAHUILA DE ZARAGOZA , COLIMA, DURANGO, GUANAJUATO, GUERRERO, HIDALGO, JALISCO, MEXICO, MICHOACAN DE OCAMPO, MORELOS,NAYARIT NUEVO LEON, OAXACA ,PUEBLA, QUERETARO,QUINTANA ROO, SAN LUIS POTOSI, SINALOA, SONORA, TABASCO, TAMAULIPAS,TLAXCALA, VERACRUZ DE IGNACIO DE LA LLAVE, YUCATAN, ZACATECAS group_by_entidad Si junta las entidades en una sola o bien las muestra por separado sin agrupar. entidad_tipo Selecciona Unidad Medica, Nacimiento o Residencia. por default incluye Unidad Medica fecha_tipo Selecciona Ingreso, Sintomas o Defuncion por default incluye fecha de Sintomas tipo_prueba Vector con el tipo de pruebas incluir Antigeno, PCR group_by_tipo_prueba Boolean determinando si regresa la base con cada entrada agrupada por tipo de pureba (es decir cada fecha y entidad reporta separado positividad en PCR y Antigeno) tipo_paciente Vector con el tipo de pacientes incluir. Opciones: AMBULATORIO, HOSPITALIZADO, ESPECIFICADO group_by_tipo_paciente Boolean determinando si regresa la base con cada entrada agrupada por tipo de paciente (es decir cada fecha se generan tantos observaciones como grupos de tipo de paciente) tipo_uci Vector con el tipo de valores para Unidad de Cuidado Intensivo incluir: SI,,APLICA,SE IGNORA,ESPECIFICADO group_by_tipo_uci Boolean determinando si regresa la base con cada entrada agrupada por tipo de uci (es decir cada fecha se generan tantos observaciones como grupos de tipo de uci) tipo_sector Vector con los sectores del sistema de salud incluir: CRUZ ROJA,DIF,ESTATAL,IMSS,IMSS-BIENESTAR,ISSSTE, MUNICIPAL,PEMEX, PRIVADA,SEDENA,SEMAR,SSA, UNIVERSITARIO,ESPECIFICADO. group_by_tipo_sector Boolean determinando si regresa la base con cada entrada agrupada por tipo de sector (es decir cada fecha se generan tantos observaciones como grupos de tipo de sector) defunciones Boolean si incluir sólo defunciones TRUE o todos FALSE. edad_cut Vector con secuencia de edades para hacer grupos. Por ejemplo edad_cut = c(0, 10, Inf) arma dos grupos de edad de 0 10 y de 10 infinito o bien edad_cut = c(15, 20) deja sólo los registros entre 15 y 20 años. Por default es NULL as_tibble Regresar como tibble el resultado. En caso de que as_tibble sea FALSE se devuelve como conexion en MARIADB. fill_zeros En caso de que el resultado sea un tibble regresa observaciones para todas las combinaciones de variables incluyendo como 0 donde se observaron casos. En caso contrario se incluyen las filas donde se observaron casos. list_name Asigna un nombre en la lista de datos la base generada .grouping_vars Vector de variables adicionales de agrupacion de los conteos","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/numero_pruebas.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"Numero de Pruebas — numero_pruebas","text":"Appends la lista de datos_covid una nueva entrada de nombre list_name (default: casos) con una base de datos (tibble o dbConnection) con los resultados agregados. positividad - Base de datos generara con los datos agregados (el nombre cambia si se usa list_name). dict - Diccionario de datos dats - Datos originales (conexion DB) disconnect  - Función para desconectarte de DB","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/numero_pruebas.html","id":"detalles","dir":"Reference","previous_headings":"","what":"Detalles","title":"Numero de Pruebas — numero_pruebas","text":"Por default calcula la el numero de pruebas de Antígeno y PCR por estado y tipo official product / este es un producto oficial","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/numero_pruebas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"Numero de Pruebas — numero_pruebas","text":"","code":"if (FALSE) { datos_covid <- descarga_datos_abiertos()  # Número de pruebas PCR/ANTI a nivel nacional por estado datos_covid <- datos_covid |> numero_pruebas() head(datos_covid$numero_pruebas)  # Número de pruebas nacionales pero sin separar por tipo ni estado datos_covid <- datos_covid |>   numero_pruebas(     group_by_entidad = FALSE, group_by_tipo_prueba = FALSE,     list_name = \"Todas_las_pruebas\"   )  # Positivos en Jalisco y Colima casos_col_jal <- datos_covid |>   numero_pruebas(     entidades = c(\"JALISCO\", \"COLIMA\"),     list_name = \"Pruebas_jal_col\"   )  # Si deseas agrupar por una variable que no este en las opciones asi como tipo paciente casos_col_jal <- datos_covid |>   numero_pruebas(     entidades = c(\"JALISCO\", \"COLIMA\"),     tipo_paciente = c(\"AMBULATORIO\", \"HOSPITALIZADO\"),     group_by_tipo_paciente = TRUE,     .grouping_vars = c(\"DIABETES\"),     list_name = \"Diabetescoljal\"   ) }"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/pipe.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/pipe.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/plot_covid.html","id":null,"dir":"Reference","previous_headings":"","what":"PLOT DATOS DE COVID — plot_covid","title":"PLOT DATOS DE COVID — plot_covid","text":"plot_covid Grafica automaticamente la base de datos de covid","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/plot_covid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"PLOT DATOS DE COVID — plot_covid","text":"","code":"plot_covid(   datos_covid,   df_name = \"casos\",   df_date_index = stringr::str_subset(colnames(datos_covid[df_name][[1]]),     \"FECHA|fecha|Fecha\"),   df_variable = NULL,   df_covariates = NULL,   facet_scale = \"free_y\",   facet_ncol = 4,   date_break_format = \"2 months\",   date_labels_format = \"%B-%y\",   type = c(\"point\", \"line\", \"spline\", \"area\"),   plot_theme = ggplot2::theme(panel.background = ggplot2::element_rect(fill = \"white\"),     plot.background = ggplot2::element_rect(fill = \"white\"), axis.text.x =     ggplot2::element_text(angle = 90, hjust = 1), axis.line.x =     ggplot2::element_line(color = \"black\"), legend.position = \"none\"),   ... )"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/plot_covid.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"PLOT DATOS DE COVID — plot_covid","text":"datos_covid data available automatically downloads COVID-19 information y calcula los casos por entidad df_name Nombre de la base de datos dentro de la lista datos_covid df_date_index Nombre de la variable que contiene la fecha df_variable Nombre de la variable que se va graficar en el eje y df_covariates Covariables para el facet (maximo 2) facet_scale Escala para el facet_wrap facet_ncol Numero de columnas para el facet_wrap date_break_format Breaks para el eje x date_labels_format Formato de fecha para el eje x type Tipo de grafica (line, area, spline o point) plot_theme Tema para el ggplot2 ... Parametros adicionales para ggformula::geom_spline en caso de elegir type=\"spline\"","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/plot_covid.html","id":"detalles","dir":"Reference","previous_headings":"","what":"Detalles","title":"PLOT DATOS DE COVID — plot_covid","text":"Por default calcula el total de casos. official product / este es un producto oficial","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/plot_covid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"PLOT DATOS DE COVID — plot_covid","text":"","code":"if (FALSE) { # Grafica de casos por entidad datos_covid |>   casos(list_name = \"casos_for_plot\") |>   plot_covid(df_name = \"casos_for_plot\")  # Grafica de casos nacional datos_covid |>   casos(group_by_entidad = FALSE, list_name = \"plot_nal\") |>   plot_covid(df_name = \"plot_nal\")  # Ajuste mediante splines datos_covid |>   casos(group_by_entidad = F, list_name = \"spline_nacional\") |>   plot_covid(df_name = \"spline_nacional\", type = \"spline\", spar = 0.5)  }"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/positividad.html","id":null,"dir":"Reference","previous_headings":"","what":"Positividad — positividad","title":"Positividad — positividad","text":"positividad Calcula la positividad por fecha agrupando (o sin hacerlo) por covariables.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/positividad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Positividad — positividad","text":"","code":"positividad(   datos_covid,   entidades = c(\"AGUASCALIENTES\", \"BAJA CALIFORNIA\", \"BAJA CALIFORNIA SUR\", \"CAMPECHE\",     \"CHIAPAS\", \"CHIHUAHUA\", \"CIUDAD DE MÉXICO\", \"COAHUILA DE ZARAGOZA\", \"COLIMA\",     \"DURANGO\", \"GUANAJUATO\", \"GUERRERO\", \"HIDALGO\", \"JALISCO\", \"MÉXICO\",     \"MICHOACÁN DE OCAMPO\", \"MORELOS\", \"NAYARIT\", \"NUEVO LEÓN\", \"OAXACA\", \"PUEBLA\",     \"QUERÉTARO\", \"QUINTANA ROO\", \"SAN LUIS POTOSÍ\", \"SINALOA\", \"SONORA\", \"TABASCO\",     \"TAMAULIPAS\", \"TLAXCALA\", \"VERACRUZ DE IGNACIO DE LA LLAVE\", \"YUCATÁN\", \"ZACATECAS\"),   group_by_entidad = TRUE,   entidad_tipo = c(\"Unidad Medica\", \"Residencia\", \"Nacimiento\"),   fecha_tipo = c(\"Sintomas\", \"Ingreso\", \"Defuncion\"),   tipo_prueba = c(\"Antigeno\", \"PCR\"),   group_by_tipo_prueba = TRUE,   tipo_paciente = c(\"AMBULATORIO\", \"HOSPITALIZADO\", \"NO ESPECIFICADO\"),   group_by_tipo_paciente = FALSE,   tipo_uci = c(\"SI\", \"NO\", \"NO APLICA\", \"SE IGNORA\", \"NO ESPECIFICADO\"),   group_by_tipo_uci = FALSE,   tipo_sector = c(\"CRUZ ROJA\", \"DIF\", \"ESTATAL\", \"IMSS\", \"IMSS-BIENESTAR\", \"ISSSTE\",     \"MUNICIPAL\", \"PEMEX\", \"PRIVADA\", \"SEDENA\", \"SEMAR\", \"SSA\", \"UNIVERSITARIO\",     \"NO ESPECIFICADO\"),   group_by_tipo_sector = FALSE,   defunciones = FALSE,   edad_cut = NULL,   fill_NA = TRUE,   list_name = \"positividad\",   quiet = FALSE,   remove_inconclusive = TRUE,   .grouping_vars = c() )"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/positividad.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"Positividad — positividad","text":"datos_covid data available automatically downloads COVID-19 information. entidades Vector con las entidades de las unidades medicas analizar. Opciones: AGUASCALIENTES, BAJA CALIFORNIA, BAJA CALIFORNIA SUR, CAMPECHE, CHIAPAS, CHIHUAHUA, CIUDAD DE MEXICO, COAHUILA DE ZARAGOZA , COLIMA, DURANGO, GUANAJUATO, GUERRERO, HIDALGO, JALISCO, MEXICO, MICHOACAN DE OCAMPO, MORELOS,NAYARIT NUEVO LEON, OAXACA ,PUEBLA, QUERETARO,QUINTANA ROO, SAN LUIS POTOSI, SINALOA, SONORA, TABASCO, TAMAULIPAS,TLAXCALA, VERACRUZ DE IGNACIO DE LA LLAVE, YUCATAN, ZACATECAS group_by_entidad Si junta las entidades en una sola o bien las muestra por separado sin agrupar. entidad_tipo Selecciona Unidad Medica, Nacimiento o Residencia. por default incluye Unidad Medica fecha_tipo Selecciona Ingreso, Sintomas o Defuncion por default incluye fecha de Sintomas tipo_prueba Vector con el tipo de pruebas incluir Antigeno, PCR group_by_tipo_prueba Boolean determinando si regresa la base con cada entrada agrupada por tipo de pureba (es decir cada fecha y entidad reporta separado positividad en PCR y Antigeno) tipo_paciente Vector con el tipo de pacientes incluir. Opciones: AMBULATORIO, HOSPITALIZADO, ESPECIFICADO group_by_tipo_paciente Boolean determinando si regresa la base con cada entrada agrupada por tipo de paciente (es decir cada fecha se generan tantos observaciones como grupos de tipo de paciente) tipo_uci Vector con el tipo de valores para Unidad de Cuidado Intensivo incluir: SI,,APLICA,SE IGNORA,ESPECIFICADO group_by_tipo_uci Boolean determinando si regresa la base con cada entrada agrupada por tipo de uci (es decir cada fecha se generan tantos observaciones como grupos de tipo de uci) tipo_sector Vector con los sectores del sistema de salud incluir: CRUZ ROJA,DIF,ESTATAL,IMSS,IMSS-BIENESTAR,ISSSTE, MUNICIPAL,PEMEX, PRIVADA,SEDENA,SEMAR,SSA, UNIVERSITARIO,ESPECIFICADO. group_by_tipo_sector Boolean determinando si regresa la base con cada entrada agrupada por tipo de sector (es decir cada fecha se generan tantos observaciones como grupos de tipo de sector) defunciones Boolean si incluir solo defunciones TRUE o todos FALSE. edad_cut Vector con secuencia de edades para hacer grupos. Por ejemplo edad_cut = c(0, 10, Inf) arma dos grupos de edad de 0 10 y de 10 infinito o bien edad_cut = c(15, 20) deja solo los registros entre 15 y 20 años. Por default es NULL fill_NA Regresa observaciones para todas las combinaciones de variables incluyendo como NA donde se observaron casos en el denominador. En caso contrario se incluyen las filas donde se observaron casos. list_name Asigna un nombre en la lista de datos la base generada quiet Booleana si TRUE arroja mensaje alguno. remove_inconclusive considera las pruebas cuyo resultado es inconcluso o aún ha sido otorgado .grouping_vars Vector de variables adicionales de agrupacion de los conteos","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/positividad.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"Positividad — positividad","text":"Appends la lista de datos_covid una nueva entrada de nombre list_name (default: casos) con una base de datos (tibble) con los resultados agregados. positividad - Base de datos generara con los datos agregados (el nombre cambia si se usa list_name). dict - Diccionario de datos dats - Datos originales (conexion DB) disconnect  - Funcion para desconectarte de DB","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/positividad.html","id":"detalles","dir":"Reference","previous_headings":"","what":"Detalles","title":"Positividad — positividad","text":"Por default calcula la positividad de Antigeno + PCR por estado official product / este es un producto oficial","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/positividad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"Positividad — positividad","text":"","code":"if (FALSE) { datos_covid <- descarga_datos_abiertos()  # Casos a nivel nacional por estado por tipo de prueba datos_covid <- datos_covid |> positividad() head(datos_covid$casos)  # Total nacional defunciones <- datos_covid |> positividad(group_by_entidad = FALSE, list_name = \"posnac\")  # Positivos en Jalisco y Colima casos_col_jal <- datos_covid |>       positividad(entidades = c(\"JALISCO\", \"COLIMA\"), list_name = \"jalcol_positivida\")  # Agrupando ambas pruebas en una sola confirmados <- datos_covid |>   positividad(     entidades = c(\"JALISCO\", \"COLIMA\"),     group_by_tipo_prueba = FALSE,     list_name = \"jalcol_positivida_todos\"   )  # Regresa la suma de los de COLIMA + JALISCO casos_col_jal <- datos_covid |>   positividad(     entidades = c(\"JALISCO\", \"COLIMA\"),     tipo_paciente = c(\"AMBULATORIO\", \"HOSPITALIZADO\"),     group_by_tipo_paciente = TRUE,     list_name = \"jalcol_positivida_todos_2\"   )  # Si deseas agrupar por una variable que no este en las opciones casos_col_jal <- datos_covid |>   positividad(     entidades = c(\"JALISCO\", \"COLIMA\"),     tipo_paciente = c(\"AMBULATORIO\", \"HOSPITALIZADO\"),     group_by_tipo_paciente = TRUE,     .grouping_vars = c(\"DIABETES\"),     list_name = \"jalcol_positivida_todos_ambhosp\"   ) }"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/read_datos_abiertos.html","id":null,"dir":"Reference","previous_headings":"","what":"LEE LA BASE DE DATOS ABIERTOS DE LA DIRECCION GENERAL DE EPIDEMIOLOGIA QUE YA DESCARGASTE — read_datos_abiertos","title":"LEE LA BASE DE DATOS ABIERTOS DE LA DIRECCION GENERAL DE EPIDEMIOLOGIA QUE YA DESCARGASTE — read_datos_abiertos","text":"read_datos_abiertos Lee los datos abiertos almacenados en tu base de duckdb que bajaste con descarga_datos_abiertos. Intenta de manera automática determinar si los lee de duckdb, csv ó zip La funcion principal es read_datos_abiertos() la cual decide si los lee de zipp , duckdbocsv` Tambien puedes usar las auxiliares respectivas read_datos_abiertos_zip()     Si sólo descargaste los datos de la DGE en .zip read_datos_abiertos_csv()     Si descargaste los datos de la DGE en .zip y los descomprimiste. read_datos_abiertos_duckdb()  Si ya creaste tu table en duckdb","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/read_datos_abiertos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"LEE LA BASE DE DATOS ABIERTOS DE LA DIRECCION GENERAL DE EPIDEMIOLOGIA QUE YA DESCARGASTE — read_datos_abiertos","text":"","code":"read_datos_abiertos(   datos_abiertos_path,   tblname = \"covidmx\",   pragma_memory_limit = \"1GB\",   drv = duckdb::duckdb(),   dbdir = tempfile(fileext = \".duckdb\"),   colClasses = get_col_class(),   read_format = c(\"duckdb\", \"tibble\"),   ... )  read_datos_abiertos_zip(   datos_abiertos_zip_paths,   diccionario_zip_path = NULL,   diccionario_unzipped_path = NULL,   diccionario = NULL,   read_format = c(\"duckdb\", \"tibble\"),   tblname = \"covidmx\",   drv = duckdb::duckdb(),   dbdir = tempfile(fileext = \".duckdb\"),   colClasses = get_col_class(),   download_process = c(\"pins\", \"download.file\"),   site.covid.dic = paste0(\"http://datosabiertos.salud.\", \"gob.mx/gobmx/salud/datos_a\",     \"biertos/diccionario_datos_\", \"covid19.zip\"),   unzip_command = Sys.getenv(\"unzip_command\"),   unzip_args = Sys.getenv(\"unzip_args\"),   unzip_args_dict = list(exdir = \".\", overwrite = TRUE),   check_unzip_install = TRUE,   clear_zip = (download_process[1] != \"pins\"),   clear_csv = TRUE,   use_dict = TRUE,   quiet = FALSE,   cache_datos = NULL,   use_cache_on_failure = TRUE,   cache_diccionario = NULL,   force_download = FALSE,   show_warnings = TRUE,   board_url_name = \"datos_abiertos\",   board_url_name_dict = \"diccionario_covid\",   download_file_args = list(method = \"curl\", destfile = tempfile(), quiet = quiet),   descarga_db_diccionario_ssa_args = list(),   ... )  read_datos_abiertos_csv(   datos_abiertos_unzipped_path,   diccionario_zip_path = NULL,   diccionario_unzipped_path = NULL,   diccionario = NULL,   read_format = c(\"duckdb\", \"tibble\"),   tblname = \"covidmx\",   drv = duckdb::duckdb(),   dbdir = tempfile(fileext = \".duckdb\"),   colClasses = get_col_class(),   download_process = c(\"pins\", \"download.file\"),   site.covid.dic = paste0(\"http://datosabiertos.salud.\", \"gob.mx/gobmx/salud/datos_a\",     \"biertos/diccionario_datos_\", \"covid19.zip\"),   unzip_args_dict = list(exdir = \".\", overwrite = TRUE),   clear_csv = TRUE,   quiet = FALSE,   use_cache_on_failure = TRUE,   cache_diccionario = NULL,   force_download = FALSE,   show_warnings = TRUE,   board_url_name_dict = \"diccionario_covid\",   download_file_args = list(method = \"curl\", destfile = tempfile(), quiet = quiet),   descarga_db_diccionario_ssa_args = list(),   ... )  read_datos_abiertos_duckdb(   dbdir,   drv = duckdb::duckdb(),   tblname = \"covidmx\",   pragma_memory_limit = \"1GB\",   diccionario_zip_path = NULL,   diccionario_unzipped_path = NULL,   diccionario = NULL,   download_process = c(\"pins\", \"download.file\"),   site.covid.dic = paste0(\"http://datosabiertos.salud.\", \"gob.mx/gobmx/salud/datos_a\",     \"biertos/diccionario_datos_\", \"covid19.zip\"),   unzip_args_dict = list(exdir = \".\", overwrite = TRUE),   clear_zip = download_process[1] != \"pins\",   clear_csv = TRUE,   use_dict = TRUE,   quiet = FALSE,   use_cache_on_failure = TRUE,   cache_diccionario = NULL,   force_download = FALSE,   show_warnings = TRUE,   board_url_name_dict = \"diccionario_covid\",   download_file_args = list(method = \"curl\", destfile = tempfile(), quiet = quiet),   descarga_db_diccionario_ssa_args = list(),   ... )"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/read_datos_abiertos.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"LEE LA BASE DE DATOS ABIERTOS DE LA DIRECCION GENERAL DE EPIDEMIOLOGIA QUE YA DESCARGASTE — read_datos_abiertos","text":"datos_abiertos_path Camino los datos abiertos si son un zip, un csv o un .duckdb tblname Nombre de la tabla dentro de el DATABASE dbname donde guardar los datos por default se llama covidmx. pragma_memory_limit Memory limit program PRAGMAS. change around half RAM drv Un  driver para dbConnect (default duckdb::duckdb()) dbdir Parametro de duckdb::dbConnect__duckdb_driver() colClasses Clases de la columna para leer en read.csv read_format \"duckdb\" o \"tibble\" establece el formato de lectura de la base de datos. En la mayoria de los casos \"tibble\" va resultar en un error de memoria. ... Parametros adicionales para pins::pin_download datos_abiertos_zip_paths Camino los datos abiertos si ya los descargaste en zip diccionario_zip_path Camino al diccionario si ya losdescargaste en zip diccionario_unzipped_path Camino al diccionario csv si ya lo descargaste y descomprimiste el archivo zip en un csv diccionario Lo que resulta de realizar una descarga del diccionario usando descarga_diccionario download_process (opcional)  Metodo para descargar ya sea pins o download.file. Se recomienda pins pues guarda en memoria la fecha de la ultima descarga y analiza si ha pasado mas de un dia desde la descarga. En caso afirmativo verifica si el archivo ha cambiado y si hubo cambios entonces lo descarga. site.covid.dic Sitio para descarga del diccionario de datos. unzip_command Forma de extraer la base de datos de datos abiertos. La forma de llamarla es con system2(unzip_command, args = c(unzip_args, file_download_data)). unzip_args Argumentos de extraccion de la base de datos de datos abiertos. La forma de llamarla es con system2(unzip_command, args = c(unzip_args, file_download_data)). unzip_args_dict Lista de argumentos para usar utils::unzip en el diccionario de datos. check_unzip_install Bandera de verificacion para checar si tienes lo necesario para unzippear los datos. clear_zip Si borrar los archivos .zip descargados para el diccionario y los datos abiertos. se recomienda si estas usando pins. Ve la nota para mas informacion. clear_csv Si borrar los archivos .csv que se generan despues de abrir el zip. El default es que si. use_dict Si descargar el diccionario de site.covid.dic. quiet (opcional) Variable para mostrar mensajes cache_datos Direccion donde guardar los datos en memoria usando pins para tener que volver descargarlos si nada ha cambiado use_cache_on_failure Booleana. Establece que si se pueden descargar datos nuevos utilice los que tenga en memoria. cache_diccionario Direccion donde guardar el diccionario en memoria usando pins para tener que volver descargarlo si nada ha cambiado force_download analiza si cambio el pin y descarga datos nuevos en caso afirmativo show_warnings si arrojar warnings board_url_name Establece el nombre del pins::board_url para los datos abiertos board_url_name_dict Establece el nombre del pins::board_url para los datos abiertos download_file_args Lista de argumentos adicionales para download.file de los datos si se elige este metodo para descargar. descarga_db_diccionario_ssa_args Lista con argumentos adicionales para el pins::pin_download de datos abiertos datos_abiertos_unzipped_path Camino los datos abiertos csv si ya los descargaste y descomprimiste el archivo zip en un csv","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/read_datos_abiertos.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"LEE LA BASE DE DATOS ABIERTOS DE LA DIRECCION GENERAL DE EPIDEMIOLOGIA QUE YA DESCARGASTE — read_datos_abiertos","text":"Lista de valores: dats        - Tabla conectada mediante DBI::dbConnect (si duckdb) o tibble (si tibble) disconnect  - Funcion para cerrar la conexion la base de datos. dict        - Lista de tibbles con el diccionario de datos para cada variable","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/read_datos_abiertos.html","id":"nota","dir":"Reference","previous_headings":"","what":"Nota","title":"LEE LA BASE DE DATOS ABIERTOS DE LA DIRECCION GENERAL DE EPIDEMIOLOGIA QUE YA DESCARGASTE — read_datos_abiertos","text":"Para guardar tu base con duckdb cambia el dbdir un archivo .duckdb. Como ejemplo dbdir = \"ejemplo.duckdb\".","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/read_datos_abiertos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"LEE LA BASE DE DATOS ABIERTOS DE LA DIRECCION GENERAL DE EPIDEMIOLOGIA QUE YA DESCARGASTE — read_datos_abiertos","text":"","code":"if (FALSE) { # Lee los datos de duckdb una vez descargados descarga_datos_abiertos() datos_covid <- read_datos_abiertos()  # Es lo mismo que: datos_covid <- read_datos_abiertos_duckdb()  # Descarga los datos y lee de un zip direccion_zip <- descarga_db_datos_abiertos_tbl() datos_covid <- read_datos_abiertos(direccion_zip)  # Es lo mismo que: datos_covid <- read_datos_abiertos_zip(direccion_zip)  # Descarga los datos y lee de un csv direccion_zip <- descarga_db_datos_abiertos_tbl() direccion_csv <- unzip_db_datos_abiertos_tbl(direccion_zip) datos_covid   <- read_datos_abiertos(direccion_csv)  datos_covid <- read_datos_abiertos_csv(direccion_csv) }"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/rt.html","id":null,"dir":"Reference","previous_headings":"","what":"RT: Número efectivo de reproducción — rt","title":"RT: Número efectivo de reproducción — rt","text":"rt Calcula el número efectivo de reproducción por fecha y entidad","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/rt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"RT: Número efectivo de reproducción — rt","text":"","code":"rt(   datos_covid = NULL,   entidades = c(\"AGUASCALIENTES\", \"BAJA CALIFORNIA\", \"BAJA CALIFORNIA SUR\", \"CAMPECHE\",     \"CHIAPAS\", \"CHIHUAHUA\", \"CIUDAD DE MÉXICO\", \"COAHUILA DE ZARAGOZA\", \"COLIMA\",     \"DURANGO\", \"GUANAJUATO\", \"GUERRERO\", \"HIDALGO\", \"JALISCO\", \"MÉXICO\",     \"MICHOACÁN DE OCAMPO\", \"MORELOS\", \"NAYARIT\", \"NUEVO LEÓN\", \"OAXACA\", \"PUEBLA\",     \"QUERÉTARO\", \"QUINTANA ROO\", \"SAN LUIS POTOSÍ\", \"SINALOA\", \"SONORA\", \"TABASCO\",     \"TAMAULIPAS\", \"TLAXCALA\", \"VERACRUZ DE IGNACIO DE LA LLAVE\", \"YUCATÁN\", \"ZACATECAS\"),   group_by_entidad = TRUE,   entidad_tipo = c(\"Unidad Medica\", \"Residencia\", \"Nacimiento\"),   fecha_tipo = c(\"Sintomas\", \"Ingreso\", \"Defuncion\"),   tipo_clasificacion = c(\"Sospechosos\", \"Confirmados COVID\", \"Negativo a COVID\",     \"Inválido\", \"No realizado\"),   tipo_paciente = c(\"AMBULATORIO\", \"HOSPITALIZADO\", \"NO ESPECIFICADO\"),   list_name = \"rt\",   min_date = as.Date(\"2021/11/21\", format = \"%Y/%m/%d\"),   method = \"parametric_si\",   config = EpiEstim::make_config(list(mean_si = 3.5, std_si = 1.5)),   ... )"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/rt.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"RT: Número efectivo de reproducción — rt","text":"datos_covid data available automatically downloads COVID-19 information. entidades Vector con las entidades de las unidades medicas analizar. Opciones: AGUASCALIENTES, BAJA CALIFORNIA, BAJA CALIFORNIA SUR, CAMPECHE, CHIAPAS, CHIHUAHUA, CIUDAD DE MEXICO, COAHUILA DE ZARAGOZA , COLIMA, DURANGO, GUANAJUATO, GUERRERO, HIDALGO, JALISCO, MEXICO, MICHOACAN DE OCAMPO, MORELOS,NAYARIT NUEVO LEON, OAXACA ,PUEBLA, QUERETARO,QUINTANA ROO, SAN LUIS POTOSI, SINALOA, SONORA, TABASCO, TAMAULIPAS,TLAXCALA, VERACRUZ DE IGNACIO DE LA LLAVE, YUCATAN, ZACATECAS group_by_entidad Si junta las entidades en una sola o bien las muestra por separado sin agrupar. entidad_tipo Selecciona Unidad Medica, Nacimiento o Residencia. por default incluye Unidad Medica fecha_tipo Selecciona Ingreso, Sintomas o Defuncion por default incluye fecha de Sintomas tipo_clasificacion Vector con el tipo de clasificaciones incluir: Sospechosos,Confirmados COVID, Negativo COVID, Inv\\u00e1lido, realizado tipo_paciente Vector con el tipo de pacientes incluir. Opciones: AMBULATORIO, HOSPITALIZADO, ESPECIFICADO list_name Asigna un nombre en la lista de datos la base generada min_date Mínima fecha partir de la cual estimar el RT method Method estimating RT EpiEstim::estimate_R config Configuration estimating RT EpiEstim::estimate_R ... Parámetros adicionales para EpiEstim::estimate_R.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/rt.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"RT: Número efectivo de reproducción — rt","text":"Appends la lista de datos_covid una nueva entrada de nombre list_name (default: casos) con una base de datos (tibble) con los resultados agregados. positividad - Base de datos generara con los datos agregados (el nombre cambia si se usa list_name). dict - Diccionario de datos dats - Datos originales (conexion DB) disconnect  - Funcion para desconectarte de DB","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/rt.html","id":"detalles","dir":"Reference","previous_headings":"","what":"Detalles","title":"RT: Número efectivo de reproducción — rt","text":"Por default calcula el número efectivo de reproducción por estado official product / este es un producto oficial","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/rt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"RT: Número efectivo de reproducción — rt","text":"","code":"if (FALSE) { datos_covid <- descarga_datos_abiertos(language = \"Espanol\")  #Casos a nivel nacional en los confirmados datos_covid <- datos_covid %>%         rt(tipo_clasificacion == \"Confirmados COVID\",           group_by_entidad = FALSE)  #Casos en AGS, CHI en los confirmados datos_covid <- datos_covid %>%         rt(entidades = c(\"CHIHUAHUA\",\"AGUASCALIENTES\"),           tipo_clasificacion == \"Confirmados COVID\",           group_by_entidad = TRUE) }"},{"path":[]},{"path":"https://rodrigozepeda.github.io/covidmx/news/index.html","id":"breaking-changes-0-6-0-0000","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"covidmx 0.6.0.0000","text":"Se eliminó MariaDB y ahora se utiliza duckdb. Se eliminó el requerimiento de instalar herramientas para abrir el zip. Se eliminó la dependencia de glue y se agregó una de cli.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/news/index.html","id":"covidmx-0510000","dir":"Changelog","previous_headings":"","what":"covidmx 0.5.1.0000","title":"covidmx 0.5.1.0000","text":"Se eliminó el chequeo de MariaDBhasDefault para los sistemas donde hay conexión pesar de tener el default.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/news/index.html","id":"covidmx-0500000","dir":"Changelog","previous_headings":"","what":"covidmx 0.5.0.0000","title":"covidmx 0.5.0.0000","text":"Se agregó la nueva variable driver las conexiones MariaDB para permitir otro tipo de SQL. Se agregó la variable sqlimport para que eventualmente se pueda cambiar mysqlimport mariadb-import por el cambio en MariaDB acá. Se arregló un error donde se asignaba bien el cache del diccionario.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/news/index.html","id":"covidmx-0420000","dir":"Changelog","previous_headings":"","what":"covidmx 0.4.2.0000","title":"covidmx 0.4.2.0000","text":"Se arregló el bug que eliminaba la descarga en csv si ésta se parseaba en tibble.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/news/index.html","id":"covidmx-0410000","dir":"Changelog","previous_headings":"","what":"covidmx 0.4.1.0000","title":"covidmx 0.4.1.0000","text":"Se arregló el bug que impedía seleccionar solo Antígeno como pruebas en numero_pruebas Se arregló el bug que impedía seleccionar solo Antígeno como pruebas en positividad Se arregló el bug que impedía seleccionar Defuncón como fecha_tipo en numero_pruebas Se agregó la opción de quiet positividad","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/news/index.html","id":"covidmx-0400000","dir":"Changelog","previous_headings":"","what":"covidmx 0.4.0.0000","title":"covidmx 0.4.0.0000","text":"Se arregló bug que al filtrar por IMSS devolvía IMSS-BIENESTAR en tipo_sector Se arregló bug que al filtrar por devolvía ESPECIFICADO en tipo_paciente Se agregaron tests y se conectò codecov.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/news/index.html","id":"covidmx-0300000","dir":"Changelog","previous_headings":"","what":"covidmx 0.3.0.0000","title":"covidmx 0.3.0.0000","text":"Se arregló un bug que al filtrar por BAJA CALIFORNIA también devolvía BAJA CALIFORNIA SUR en casos. Se agregó un dataset datosabiertos para poder probar funciones sobre ese data. Se cambió el tutorial una tabla llamada tblname para que sea más rápido que la descarga y creación del repositorio de Github. Se agregó el parámetro max_date estima_rt para mejorar la estimación de la ventana de tiempo del RT. Se eliminó que casos por default descargue los datos si tiene un input o si su input es vacío pues generaba un bug cuando el elemento de la lista estaba. Se agregó un mensaje onAttach y se eliminaron mensajes al descargar archivos.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/news/index.html","id":"covidmx-0200000","dir":"Changelog","previous_headings":"","what":"covidmx 0.2.0.0000","title":"covidmx 0.2.0.0000","text":"Agregué NEWS.md La descarga y lectura ahora es más robusta con funciones para trabajar si descargaste pero se interrumpió el unzip o tienes el csv pero lo leíste. Checa descarga_datos_abiertos y read_datos_abiertos. La descarga de archivos tiene una nueva estructura inspirada en pins que lee de memoria (cache) si ha pasado más de un día de la descarga, si ya pasó más de un día pero detecta que el archivo en línea es idéntico al que tienes en memoria o si tienes Internet. Se cambió rt por estima_rt para ocasionar problemas con la distribución de Student en stats::rt.","code":""}]
