[{"path":"https://rodrigozepeda.github.io/covidmx/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 covidmx authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Estudio_de_Caso_CDMX.html","id":"casos-semanales-y-número-efectivo-de-reproducción","dir":"Articles","previous_headings":"","what":"Casos semanales y número efectivo de reproducción","title":"Estudio de caso: Ciudad de México","text":"Comenzamos con el primer panel para lo cual necesitamos correr dos funciones: la de casos y la del número efectivo de reproducción. Calculamos ambos seleccionando la entidad y sólo los confirmados: Cada una de las bases de datos se encuentran dentro de datos_covid con diferente nombre: Por otro lado descargamos los datos de variantes Generamos entonces una base única partir del 2021/11/20 que contenga información de variantes y casos Así se ve la base generada: Hacemos la gráfica comenzando con unas barras con colores por variante  Sobreponemos el RT y agregamos formato","code":"datos_covid <- datos_covid |>   #Calculamos los casos   casos(entidades          = \"CIUDAD DE MÉXICO\",         group_by_entidad   = FALSE,         tipo_clasificacion = \"Confirmados COVID\") |>   #Y calculamos el estima_rt   estima_rt(entidades = \"CIUDAD DE MÉXICO\",      min_date  = as.Date(\"2021/11/20\", format = \"%Y/%m/%d\"),      tipo_clasificacion = \"Confirmados COVID\",      method = \"parametric_si\",        #Método de estimación del estima_rt      config = EpiEstim::make_config(        list(        mean_si = 3.5, #Media de tiempo del intervalo serial        std_si = 1.5   #Varianza de tiempo del intervalo serial        )     )) names(datos_covid) ## [1] \"dats\"       \"disconnect\" \"dict\"       \"casos\"      \"estima_rt\" variantes <- descarga_datos_variantes_GISAID(\"cdmx\") #Limpiamos del estima_rt los últimas dos semanas porque se cae datos_covid$estima_rt <- datos_covid$estima_rt |>   filter(FECHA_SINTOMAS <= today() - weeks(2))  #Filtramos las fechas para coincidir con el RT datos_covid$casos <- datos_covid$casos |>   filter(FECHA_SINTOMAS >= as.Date(\"2021/11/20\", format = \"%Y/%m/%d\"))   #Asignamos semana epidemiológica y año para la coloración y colapsamos por semana datos_covid$casos <- datos_covid$casos |>   mutate(SEMANA_EPI = epiweek(FECHA_SINTOMAS)) |>   mutate(ANIO_EPI   = epiyear(FECHA_SINTOMAS)) |>   group_by(SEMANA_EPI, ANIO_EPI) |>   summarise(n = sum(n), .groups = \"keep\")  #Unimos la información de variantes datos_covid$casos <- datos_covid$casos |>   #Renombramos pues la base de variantes ya trae una n   rename(casos_covid = n) |>   #Juntamos la info de variantes   left_join(variantes, by = c(\"SEMANA_EPI\" = \"semana\", \"ANIO_EPI\" = \"ano\")) |>   #Truco para convertir semana epidemiológica en fecha   left_join(     tibble(fecha = seq(ymd(\"2021/11/20\"), today(), by = \"1 week\")) |>       mutate(SEMANA_EPI = epiweek(fecha)) |>       mutate(ANIO_EPI = epiyear(fecha)),      by = c(\"SEMANA_EPI\", \"ANIO_EPI\")   ) head(datos_covid$casos) ## # A tibble: 6 × 9 ## # Groups:   SEMANA_EPI, ANIO_EPI [1] ##   SEMANA_EPI ANIO_EPI casos_c…¹ variant     n    freq Actualizacion       Fuente ##        <dbl>    <dbl>     <dbl> <chr>   <int>   <dbl> <dttm>              <chr>  ## 1          1     2022     76394 Omicro…     1 0.00202 2022-09-06 03:16:10 GISAI… ## 2          1     2022     76394 Omicro…     1 0.00202 2022-09-06 03:16:10 GISAI… ## 3          1     2022     76394 Omicro…     2 0.00403 2022-09-06 03:16:10 GISAI… ## 4          1     2022     76394 Omicro…     3 0.00605 2022-09-06 03:16:10 GISAI… ## 5          1     2022     76394 VOC De…    17 0.0343  2022-09-06 03:16:10 GISAI… ## 6          1     2022     76394 Omicro…   472 0.952   2022-09-06 03:16:10 GISAI… ## # … with 1 more variable: fecha <date>, and abbreviated variable name ## #   ¹​casos_covid ggplot() +   geom_col(aes(x = fecha, y = as.numeric(casos_covid)*freq, fill = variant),             data = datos_covid$casos) +   scale_fill_manual(\"Variante\", values = met.brewer(\"Cross\", n = 6)) cdmx_rt <- ggplot() +   geom_col(aes(x = as.Date(fecha), y = as.numeric(casos_covid)*freq, fill = variant),             data = datos_covid$casos) +   #Se multiplica por 40,000 para andar cerca de la media de casos   geom_line(aes(x = as.Date(FECHA_SINTOMAS), 40000*`Median(R)`), data = datos_covid$estima_rt,             linetype = \"solid\", linewidth = 1) +    scale_fill_manual(\"Variante\", values = met.brewer(\"Cross\", n = 6)) +   labs(     x = \"Fecha de inicio de síntomas\",     y = \"Casos confirmados de COVID-19\",     title = \"\",     caption = \"**Fuente:** GISAID EpiCoV y Github: @RodrigoZepeda/VariantesCovid\"   ) +   scale_y_continuous(labels = scales::label_comma(),                        sec.axis = sec_axis(~ . / 40000,                                           name = \"Número efectivo de reproducción (RT)\")) +   theme_minimal() +   theme(     legend.position = \"top\",     plot.caption    = element_markdown()     ) +   geom_hline(aes(yintercept = 40000), linetype = \"dashed\", color = \"gray25\") +   coord_cartesian(xlim = c(min(datos_covid$casos$fecha), max(datos_covid$casos$fecha))) +   scale_x_date(date_breaks = \"1 month\", date_labels = \"%b-%Y\")  cdmx_rt"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Estudio_de_Caso_CDMX.html","id":"ocupación-hospitalaria-y-hospitalizaciones","dir":"Articles","previous_headings":"","what":"Ocupación hospitalaria y hospitalizaciones","title":"Estudio de caso: Ciudad de México","text":"Por otro lado descargamos la información de ocupación hospitalaria de la RED IRAG. Obtenemos entonces las unidades médicas con mayor ocupación en la fecha más reciente: Por otro lado juntamos las bases de ocupación y de casos hospitalizados por fecha de ingreso Finalmente realizamos la gráfica  Por otro lado graficamos la ocupación por unidad:  Podemos conjuntar ambos en un solo gráfico con cowplot:","code":"#Descarga de datos por estado ocupacion_estado <- descarga_datos_red_irag(\"Estatal\")  #Descargamos las unidades médicas ocupacion_UM     <- descarga_datos_red_irag(\"Unidad Médica\") ocupacion_UM <- ocupacion_UM |>    filter(Estado == \"Ciudad de México\") |>   filter(Fecha == max(Fecha)) #Obtenemos la ocupación por estado ocupacion_cdmx <- ocupacion_estado |>   filter(Estado == \"Ciudad de México\")  #Y los casos hospitalizados por fecha de ingreso datos_covid <- datos_covid |> casos(   entidades        = \"CIUDAD DE MÉXICO\",   group_by_entidad = FALSE,   fecha_tipo       = \"Ingreso\",   tipo_paciente    = \"HOSPITALIZADO\",   list_name        = \"hospitalizados\" )  #Pegamos en la misma base datos_covid$hospitalizados <- datos_covid$hospitalizados |>   left_join(ocupacion_cdmx, by = c(\"FECHA_INGRESO\" = \"Fecha\")) #Obtenemos el máximo de pacientes para el reescalamiento m_pacientes <- max(datos_covid$hospitalizados$n, na.rm = T) |> as.numeric()  #Obtenemos los colores colores     <- met.brewer(\"Cross\")    #Reescalamos el porcentaje para que aparezca plot_hospitalizados <- ggplot(datos_covid$hospitalizados) +   geom_area(aes(x = as.Date(FECHA_INGRESO), y = `Hospitalizados (%)`/100*m_pacientes),             fill = colores[8], alpha = 0.25) +   geom_line(aes(x = as.Date(FECHA_INGRESO), y = as.double(n)), color = colores[1]) +   theme_minimal() +   coord_cartesian(xlim = c(ymd(\"2020/04/02\"), today())) +   scale_x_date(date_breaks = \"3 months\", date_labels = \"%b-%Y\", expand = c(0,0)) +   labs(     x = \"\",      y = \"Hospitalizados\",     title = glue(\"<span style='color:{colores[1]}'>PACIENTES HOSPITALIZADOS<\/span> Y \",                  \"<span style='color:{colores[8]}'>% DE OCUPACIÓN<\/span>\"),     caption = glue(\"**Fuente:** _Github \",                     \"@RodrigoZepeda/CapacidadHospitalariaMX_\")   ) +   theme(     axis.text.x  = element_text(angle = 90, hjust = 1),     plot.title   = element_markdown(),     plot.caption = element_markdown()   ) +   scale_y_continuous(labels = scales::label_comma(),                        sec.axis = sec_axis(~ . / m_pacientes,                                           labels  = scales::label_percent(),                                          name    = \"Ocupación de la Red IRAG (%)\"))  plot_hospitalizados #Arreglamos como factor y quitamos los de cero ocupación ocupacion_UM <- ocupacion_UM |>   mutate(`Unidad médica` = factor(`Unidad médica`,                                  levels = `Unidad médica`[order(`Hospitalizados (%)`)],                                 ordered = TRUE)) |>   filter(`Hospitalizados (%)` > 0)  #Reescalamos el porcentaje para que aparezca plot_ocupacion <- ggplot(ocupacion_UM) +   geom_col(aes(x = `Unidad médica`, y = `Hospitalizados (%)`/100, fill = `Hospitalizados (%)`)) +   labs(     x = \"\",      y = \"Ocupación de la Unidad Médica (%)\",     caption = \"**Nota** Se excluyen Unidades Médicas con ocupación del 0% o sin reporte.\"   ) +    theme_minimal() +    scale_fill_gradientn(colours =  met.brewer(\"Cross\", direction = -1)) +    coord_flip() +   theme(     legend.position = \"none\",     axis.text.y     = element_text(size = 4),     plot.caption    = element_markdown() ) +   scale_y_continuous(labels = scales::label_percent())  plot_ocupacion plot_hosp <- plot_grid(plot_hospitalizados, ggplot() + theme_void(), plot_ocupacion, ncol = 3,                        rel_widths = c(1, 0.1, 1)) plot_hosp"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Estudio_de_Caso_CDMX.html","id":"positividad","dir":"Articles","previous_headings":"","what":"Positividad","title":"Estudio de caso: Ciudad de México","text":"Generamos la gráfica de positividad donde además se coloque el número de pruebas por semana. Para ello calculamos tanto la positividad como el número de pruebas: Generamos la gráfica de positividad distinguiendo por tipo de prueba:","code":"datos_covid <- datos_covid |>   #Calculamos también la positividad   positividad(     entidades            = \"CIUDAD DE MÉXICO\",      group_by_entidad     = FALSE,      tipo_prueba          = c(\"Antigeno\", \"PCR\"),     group_by_tipo_prueba = TRUE   ) #Nos quedamos sólo a  partir de 2022 datos_covid$positividad <- datos_covid$positividad |>   filter(year(FECHA_SINTOMAS) >= 2022)  #Para poner al nivel mpruebas         <- max(datos_covid$positividad$n_pruebas) |> as.numeric()  positividad_plot <- ggplot(datos_covid$positividad) +   geom_col(aes(x = as.Date(FECHA_SINTOMAS), y = as.numeric(n_pruebas), fill = TIPO_PRUEBA),             alpha = 0.25) +   geom_line(aes(x = as.Date(FECHA_SINTOMAS), y = Positividad*mpruebas, color = TIPO_PRUEBA)) +   theme_minimal() +   scale_x_date(date_breaks = \"1 month\", date_labels = \"%b-%Y\", expand = c(0,0)) +   labs(     x = \"\",      y = \"Número de pruebas realizadas\",     title = glue(\"POSITIVIDAD EN \",                   \"<span style='color:{colores[3]}'>ANTIGENO<\/span> Y \",                   \"<span style='color:{colores[6]}'>PCR<\/span>\")   ) +   scale_y_continuous(labels = scales::label_comma(),                        sec.axis = sec_axis(~ . / mpruebas,                                           labels  = scales::label_percent(),                                          name    = \"Positividad (%)\")) +   scale_fill_manual(\"Tipo de prueba\", values = c(colores[3], colores[6])) +   scale_color_manual(\"Tipo de prueba\", values = c(colores[3], colores[6])) +   theme(     axis.text.x     = element_text(angle = 90, hjust = 1),     legend.position = \"none\",     plot.title      = element_markdown()   )  positividad_plot"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Estudio_de_Caso_CDMX.html","id":"mortalidad","dir":"Articles","previous_headings":"","what":"Mortalidad","title":"Estudio de caso: Ciudad de México","text":"Por último generamos la gráfica de defunciones. Para ello tomamos la misma función que en casos pero con defunciones = TRUE en 4 grupos de edad:  Finalmente unimos este panel con el de positividad","code":"#Calculamos las defunciones por grupo de edad datos_covid <- datos_covid |>   casos(     entidades        = \"CIUDAD DE MÉXICO\",     group_by_entidad = FALSE,     defunciones      = TRUE,     fecha_tipo       = \"Defunción\",     edad_cut         = c(0, 20, 40, 60, Inf),     list_name        = \"defunciones\"   ) #Nos quedamos sólo con 2022 datos_covid$defunciones <- datos_covid$defunciones |>   filter(year(FECHA_DEF) == 2022)  plot_defunciones <- ggplot(datos_covid$defunciones) +   geom_col(aes(x = as.Date(FECHA_DEF), y = as.numeric(n), fill = EDAD_CAT)) +   facet_wrap(~EDAD_CAT, scales = \"free_y\") +   theme_minimal() +   labs(     x = \"\",     y = \"Defunciones\",     title = \"DEFUNCIONES\"   ) +   scale_fill_manual(values = met.brewer(\"Cross\", 4)) +   scale_y_continuous(labels = scales::label_comma(accuracy = 1)) +   scale_x_date(date_breaks = \"1 month\", date_labels = \"%b-%Y\", expand = c(0,0)) +   theme(     axis.text.x = element_text(angle = 90, hjust = 1),     legend.position = \"none\"   )  plot_defunciones plot_defun_pos <-  plot_grid(positividad_plot, ggplot() + theme_void(), plot_defunciones,                              rel_widths = c(1, 0.1, 1), ncol = 3) plot_defun_pos"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Estudio_de_Caso_CDMX.html","id":"generación-del-reporte","dir":"Articles","previous_headings":"","what":"Generación del reporte","title":"Estudio de caso: Ciudad de México","text":"Finalmente juntamos todas las gráficas en un solo grid, agregamos el título: Y ¡magia! quedó la gráfica que elaboramos con los datos del paquete","code":"#Juntamos los plots gráfica_sin_titulo <- plot_grid(cdmx_rt, plot_hosp, plot_defun_pos, ncol = 1)  #Agregamos título plot_title <- ggdraw() + draw_label(\"CIUDAD DE MÉXICO\", fontface='bold', size = 40) plot_grid(plot_title, gráfica_sin_titulo, ncol = 1, rel_heights = c(0.1, 1))"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Estudio_de_Caso_CDMX.html","id":"información-adicional","dir":"Articles","previous_headings":"","what":"Información adicional","title":"Estudio de caso: Ciudad de México","text":"","code":"sessioninfo::session_info() ## ─ Session info ─────────────────────────────────────────────────────────────── ##  setting  value ##  version  R version 4.2.0 (2022-04-22) ##  os       macOS Big Sur/Monterey 10.16 ##  system   x86_64, darwin17.0 ##  ui       X11 ##  language es ##  collate  en_US.UTF-8 ##  ctype    en_US.UTF-8 ##  tz       America/Mexico_City ##  date     2022-09-08 ##  pandoc   2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown) ##  ## ─ Packages ─────────────────────────────────────────────────────────────────── ##  package         * version    date (UTC) lib source ##  assertthat        0.2.1      2019-03-21 [2] CRAN (R 4.2.0) ##  backports         1.4.1      2021-12-13 [2] CRAN (R 4.2.0) ##  bit               4.0.4      2020-08-04 [2] CRAN (R 4.2.0) ##  bit64             4.0.5      2020-08-30 [2] CRAN (R 4.2.0) ##  bitops            1.0-7      2021-04-24 [2] CRAN (R 4.2.0) ##  blob              1.2.3      2022-04-10 [2] CRAN (R 4.2.0) ##  broom             1.0.1      2022-08-29 [2] CRAN (R 4.2.0) ##  bslib             0.4.0      2022-07-16 [2] CRAN (R 4.2.0) ##  cachem            1.0.6      2021-08-19 [2] CRAN (R 4.2.0) ##  cellranger        1.1.0      2016-07-27 [2] CRAN (R 4.2.0) ##  cli               3.3.0      2022-04-25 [2] CRAN (R 4.2.0) ##  coarseDataTools   0.6-6      2021-12-09 [2] CRAN (R 4.2.0) ##  coda              0.19-4     2020-09-30 [2] CRAN (R 4.2.0) ##  colorspace        2.0-3      2022-02-21 [2] CRAN (R 4.2.0) ##  covidmx         * 0.7.1.0000 2022-09-09 [1] local ##  cowplot         * 1.1.1      2020-12-30 [2] CRAN (R 4.2.0) ##  crayon            1.5.1      2022-03-26 [2] CRAN (R 4.2.0) ##  curl              4.3.2      2021-06-23 [2] CRAN (R 4.2.0) ##  DBI               1.1.3      2022-06-18 [2] CRAN (R 4.2.0) ##  dbplyr            2.2.1      2022-06-27 [2] CRAN (R 4.2.0) ##  desc              1.4.1      2022-03-06 [2] CRAN (R 4.2.0) ##  digest            0.6.29     2021-12-01 [2] CRAN (R 4.2.0) ##  dplyr           * 1.0.10     2022-09-01 [2] CRAN (R 4.2.0) ##  duckdb            0.5.0      2022-09-05 [2] CRAN (R 4.2.0) ##  ellipsis          0.3.2      2021-04-29 [2] CRAN (R 4.2.0) ##  EpiEstim          2.2-4      2021-01-07 [2] CRAN (R 4.2.0) ##  evaluate          0.16       2022-08-09 [2] CRAN (R 4.2.0) ##  fansi             1.0.3      2022-03-24 [2] CRAN (R 4.2.0) ##  farver            2.1.1      2022-07-06 [2] CRAN (R 4.2.0) ##  fastmap           1.1.0      2021-01-25 [2] CRAN (R 4.2.0) ##  fitdistrplus      1.1-8      2022-03-10 [2] CRAN (R 4.2.0) ##  forcats         * 0.5.2      2022-08-19 [2] CRAN (R 4.2.0) ##  fs                1.5.2      2021-12-08 [2] CRAN (R 4.2.0) ##  gargle            1.2.0      2021-07-02 [2] CRAN (R 4.2.0) ##  generics          0.1.3      2022-07-05 [2] CRAN (R 4.2.0) ##  ggplot2         * 3.3.6      2022-05-03 [2] CRAN (R 4.2.0) ##  ggtext          * 0.1.1      2022-08-12 [2] Github (wilkelab/ggtext@50fdaba) ##  glue            * 1.6.2      2022-02-24 [2] CRAN (R 4.2.0) ##  googledrive       2.0.0      2021-07-08 [2] CRAN (R 4.2.0) ##  googlesheets4     1.0.1      2022-08-13 [2] CRAN (R 4.2.0) ##  gridExtra         2.3        2017-09-09 [2] CRAN (R 4.2.0) ##  gridtext          0.1.4.9000 2022-08-12 [2] Github (wilkelab/gridtext@6192174) ##  gtable            0.3.1      2022-09-01 [2] CRAN (R 4.2.0) ##  haven             2.5.1      2022-08-22 [2] CRAN (R 4.2.0) ##  highr             0.9        2021-04-16 [2] CRAN (R 4.2.0) ##  hms               1.1.2      2022-08-19 [2] CRAN (R 4.2.0) ##  htmltools         0.5.3      2022-07-18 [2] CRAN (R 4.2.0) ##  httr              1.4.4      2022-08-17 [2] CRAN (R 4.2.0) ##  incidence         1.7.3      2020-11-04 [2] CRAN (R 4.2.0) ##  jquerylib         0.1.4      2021-04-26 [2] CRAN (R 4.2.0) ##  jsonlite          1.8.0      2022-02-22 [2] CRAN (R 4.2.0) ##  knitr             1.40       2022-08-24 [2] CRAN (R 4.2.0) ##  labeling          0.4.2      2020-10-20 [2] CRAN (R 4.2.0) ##  lattice           0.20-45    2021-09-22 [2] CRAN (R 4.2.0) ##  lifecycle         1.0.1      2021-09-24 [2] CRAN (R 4.2.0) ##  lubridate       * 1.8.0      2021-10-07 [2] CRAN (R 4.2.0) ##  magrittr          2.0.3      2022-03-30 [2] CRAN (R 4.2.0) ##  markdown          1.1        2019-08-07 [2] CRAN (R 4.2.0) ##  MASS              7.3-58.1   2022-08-03 [2] CRAN (R 4.2.0) ##  Matrix            1.4-1      2022-03-23 [2] CRAN (R 4.2.0) ##  MatrixModels      0.5-0      2021-03-02 [2] CRAN (R 4.2.0) ##  mcmc              0.9-7      2020-03-21 [2] CRAN (R 4.2.0) ##  MCMCpack          1.6-3      2022-04-13 [2] CRAN (R 4.2.0) ##  memoise           2.0.1      2021-11-26 [2] CRAN (R 4.2.0) ##  MetBrewer       * 0.2.0      2022-03-21 [2] CRAN (R 4.2.0) ##  modelr            0.1.9      2022-08-19 [2] CRAN (R 4.2.0) ##  munsell           0.5.0      2018-06-12 [2] CRAN (R 4.2.0) ##  pillar            1.8.1      2022-08-19 [2] CRAN (R 4.2.0) ##  pins              1.0.2      2022-08-23 [2] CRAN (R 4.2.0) ##  pkgconfig         2.0.3      2019-09-22 [2] CRAN (R 4.2.0) ##  pkgdown           2.0.6      2022-07-16 [2] CRAN (R 4.2.0) ##  plyr              1.8.7      2022-03-24 [2] CRAN (R 4.2.0) ##  png               0.1-7      2013-12-03 [2] CRAN (R 4.2.0) ##  purrr           * 0.3.4      2020-04-17 [2] CRAN (R 4.2.0) ##  quantreg          5.94       2022-07-20 [2] CRAN (R 4.2.0) ##  R6                2.5.1      2021-08-19 [2] CRAN (R 4.2.0) ##  ragg              1.2.2      2022-02-21 [2] CRAN (R 4.2.0) ##  rappdirs          0.3.3      2021-01-31 [2] CRAN (R 4.2.0) ##  Rcpp              1.0.9      2022-07-08 [2] CRAN (R 4.2.0) ##  RCurl             1.98-1.8   2022-07-30 [2] CRAN (R 4.2.0) ##  readr           * 2.1.2      2022-01-30 [2] CRAN (R 4.2.0) ##  readxl            1.4.1      2022-08-17 [2] CRAN (R 4.2.0) ##  reprex            2.0.2      2022-08-17 [2] CRAN (R 4.2.0) ##  reshape2          1.4.4      2020-04-09 [2] CRAN (R 4.2.0) ##  rlang             1.0.5      2022-08-31 [2] CRAN (R 4.2.0) ##  rmarkdown         2.16       2022-08-24 [2] CRAN (R 4.2.0) ##  rprojroot         2.0.3      2022-04-02 [2] CRAN (R 4.2.0) ##  rstudioapi        0.14       2022-08-22 [2] CRAN (R 4.2.0) ##  rvest             1.0.3      2022-08-19 [2] CRAN (R 4.2.0) ##  sass              0.4.2      2022-07-16 [2] CRAN (R 4.2.0) ##  scales            1.2.1      2022-08-20 [2] CRAN (R 4.2.0) ##  sessioninfo       1.2.2      2021-12-06 [2] CRAN (R 4.2.0) ##  SparseM           1.81       2021-02-18 [2] CRAN (R 4.2.0) ##  stringi           1.7.8      2022-07-11 [2] CRAN (R 4.2.0) ##  stringr         * 1.4.1      2022-08-20 [2] CRAN (R 4.2.0) ##  survival          3.4-0      2022-08-09 [2] CRAN (R 4.2.0) ##  systemfonts       1.0.4      2022-02-11 [2] CRAN (R 4.2.0) ##  textshaping       0.3.6      2021-10-13 [2] CRAN (R 4.2.0) ##  tibble          * 3.1.8      2022-07-22 [2] CRAN (R 4.2.0) ##  tidyr           * 1.2.0      2022-02-01 [2] CRAN (R 4.2.0) ##  tidyselect        1.1.2      2022-02-21 [2] CRAN (R 4.2.0) ##  tidyverse       * 1.3.2      2022-07-18 [2] CRAN (R 4.2.0) ##  tzdb              0.3.0      2022-03-28 [2] CRAN (R 4.2.0) ##  utf8              1.2.2      2021-07-24 [2] CRAN (R 4.2.0) ##  vctrs             0.4.1      2022-04-13 [2] CRAN (R 4.2.0) ##  vroom             1.5.7      2021-11-30 [2] CRAN (R 4.2.0) ##  withr             2.5.0      2022-03-03 [2] CRAN (R 4.2.0) ##  xfun              0.32       2022-08-10 [2] CRAN (R 4.2.0) ##  xml2              1.3.3      2021-11-30 [2] CRAN (R 4.2.0) ##  yaml              2.3.5      2022-02-21 [2] CRAN (R 4.2.0) ##  ##  [1] /private/var/folders/42/2kdf45dd1qz5n7kf9lm8ld9r0000gn/T/RtmpsH30hS/temp_libpath6c6c2718544a ##  [2] /Library/Frameworks/R.framework/Versions/4.2/Resources/library ##  ## ──────────────────────────────────────────────────────────────────────────────"},{"path":[]},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Instalacion_de_MARIADB.html","id":"instalación-en-osx-mac","dir":"Articles","previous_headings":"Instalación","what":"Instalación en OSX (Mac)","title":"Instalación de MariaDB","text":"Para instalar en OSX la recomendación es primero instalar Homebrew. Para ello puedes abrir tu terminal (en aplicaciones o en la pestaña Terminal de RStudio) y copiar siguiente código dándole ENTER al final: Una vez se haya instalado puedes instalar MariaDB escribiendo en la misma terminal: Para garantizar que MariaDB siempre esté prendida en tu computadora utiliza launchctl con: Finalmente para abrir MariaDB ahí mismo en la terminal:","code":"/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" brew install mariadb brew services start mariadb sudo mariadb"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Instalacion_de_MARIADB.html","id":"instalación-en-ubuntu","dir":"Articles","previous_headings":"Instalación","what":"Instalación en Ubuntu","title":"Instalación de MariaDB","text":"Para instalar en Ubuntu abre terminal y actualiza apt: Una vez hayas instalado inicia el servicio de MariaDB: Y para que cada vez que prendes la computadora MariaDB comience sin que le tengas que decir que inicie: Si es la primera vez que estás usando esto te recomiendo correr la configuración de seguridad: Finalmente para abrir MariaDB ahí mismo en la terminal:","code":"sudo apt update && sudo apt install mariadb-server sudo systemctl start mariadb.service sudo systemctl enable mariadb.service sudo mysql_secure_installation sudo mariadb"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Instalacion_de_MARIADB.html","id":"instalación-en-windows","dir":"Articles","previous_headings":"Instalación","what":"Instalación en Windows","title":"Instalación de MariaDB","text":"Descarga el ejecutable de https://mariadb.org/download. Elige la versión más alta posible que sea preview y donde Windows esté listada como una de las opciones. Una vez descargado inicia el instalador. Acepta la licencia. Selecciona dónde quieres que se almacene (el default está bien). Escribe una contraseña para root. Ahí mismo si estás en un servidor sino sólo en tu computadora, desactiva la opción que permite acceso máquinas remotas. Selecciona la opción para usar UTF-8. Selecciona la opción de instalar como servicio llamado MariaDB. El puerto TCP por default es el 3306. Si lo cambias, anota el nuevo. Selecciona siguiente y termina la instalación. Una vez hayas instalado abre la línea de comandos de MariaDB (commandprompt) como administrador.","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Instalacion_de_MARIADB.html","id":"creación-de-usuario","dir":"Articles","previous_headings":"Ajustes para covidmx","what":"Creación de usuario","title":"Instalación de MariaDB","text":"Una vez hayas abierto MARIADB crea un usuario con el nombre que quieras (aquí le pongo usuario) pero tú pon lo que quieras y asígnale una contraseña (aquí le pongo password). Termina de asignarle los permisos: Finalmente armamos una base de datos que se llame COVIDMX (tú ponle como quieras) para usar con el paquete: Finalmente sal de MariaDB:","code":"GRANT ALL ON *.* TO 'usuario'@'localhost' IDENTIFIED BY 'password' WITH GRANT OPTION; FLUSH PRIVILEGES; CREATE DATABASE IF NOT EXISTS covidmx; EXIT;"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Instalacion_de_MARIADB.html","id":"verificación-de-cambios","dir":"Articles","previous_headings":"Ajustes para covidmx","what":"Verificación de cambios","title":"Instalación de MariaDB","text":"Si quieres verificar que asignaste bien tu usuario dentro de MariaDB puedes hacer para ver si sí está ahí: Por otro lado para verificar que hiciste la tabla puedes hacer","code":"SELECT User FROM mysql.user; SHOW DATABASES;"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Instalacion_de_MARIADB.html","id":"variables-de-ambiente","dir":"Articles","previous_headings":"Ajustes para covidmx","what":"Variables de ambiente","title":"Instalación de MariaDB","text":"En R para descargar la base de datos necesitas asignar en descarga_datos_abiertos o en read_datos_abiertos el usuario, password y nombre de base de datos cada vez que lo uses la opción sugerida es crear variables ambientales ya sea en cada script: o como variables ambientales en tu archivo .Renviron: Recuerda que para editar el .Renviron desde R puedes hacer usethis::edit_r_environ(), editar y luego reiniciar R.","code":"descarga_datos_abiertos(   user     = \"tu_usuario\",   password = \"tu_password\",   dbname   = \"covidmx\",   ... ) Sys.setenv(\"MariaDB_user\"     =  \"tu_usuario\") Sys.setenv(\"MariaDB_password\" =  \"tu_password\") Sys.setenv(\"MariaDB_dbname\"   =  \"covidmx\")  #Estos cámbialos si sabes lo que estás haciendo son otros argumentos de DBI::dbConnect  Sys.setenv(\"MariaDB_host\"  =  \"localhost\") Sys.setenv(\"MariaDB_group\" =  \"\") Sys.setenv(\"MariaDB_port\"  =  \"\") MariaDB_user     = \"tu_usuario\" MariaDB_password = \"tu_password\" MariaDB_dbname   = \"covidmx\""},{"path":[]},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Preguntas_Frecuentes.html","id":"por-qué-me-conviene-usar-covidmx","dir":"Articles","previous_headings":"Preguntas","what":"¿Por qué me conviene usar covidmx?","title":"Preguntas Frecuentes","text":"Centraliza la información y la lectura de la base es más rápida que lo que ocurriría normalmente. Gracias covidmx pierdes menos tiempo descargando y le dedicas más tiempo analizar. El hecho de usar duckdb permite generar preguntas la base de manera rápida. Por ejemplo con el siguiente benchmark: Lo cual resulta en los siguientes tiempos (milisegundos): olvides desconectar","code":"#URL del 2021 url_2021 <- paste0(\"https://datosabiertos.salud.gob.mx/gobmx/salud\",                    \"/datos_abiertos/historicos/2021/\", \"COVID19MEXICO2021.zip\")  #Datos del 2021 en tibble (clásico) datos_tibble <- descarga_datos_abiertos(read_format = \"tibble\",                                          sites.covid = c(\"2021\" = url_2021))  #Datos del 2021 en duckdb (paquete covidmx) datos_duckdb <- descarga_datos_abiertos(sites.covid = c(\"2021\" = url_2021)) #Calculamos el total de casos por fecha y sexo para ver que  #el duckdb es mucho más rápido microbenchmark::microbenchmark(   datos_tibble$dats |>      group_by(FECHA_SINTOMAS, SEXO) |>     tally(),   datos_duckdb$dats |>      group_by(FECHA_SINTOMAS, SEXO) |>     tally() ) datos_duckdb$disconnect() ## ✔ Desconectado"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Preguntas_Frecuentes.html","id":"para-qué-me-sirve-la-descarga-con-pins","dir":"Articles","previous_headings":"Preguntas","what":"¿Para qué me sirve la descarga con pins?","title":"Preguntas Frecuentes","text":"El paquete de pins registra una dirección web y verifica que haya cambiado el archivo presente en la dirección antes de descargar de nuevo. Esto te permite perder tanto tiempo en la descarga. Ve cómo si descargo una vez y luego una subsecuente el mismo paquete advierte que hace falta pues nada ha cambiado:","code":"cache_dir <- tempdir() descarga_datos_red_irag(cache = cache_dir) #Primer intento no dice nada ## # A tibble: 28,146 × 6 ##    Estado           Hospitaliza…¹ Venti…² UCI y…³ Fecha      Actualizacion       ##    <chr>                    <dbl>   <dbl>   <dbl> <date>     <dttm>              ##  1 Oaxaca                   100      0       0    2020-04-01 2022-09-07 13:01:36 ##  2 Ciudad de México         100     65.8    65.8  2020-04-01 2022-09-07 13:01:36 ##  3 México                   100     16.7    33.3  2020-04-01 2022-09-07 13:01:36 ##  4 Guanajuato               100      7.69    7.69 2020-04-01 2022-09-07 13:01:36 ##  5 Oaxaca                   100      0       8.33 2020-04-02 2022-09-07 13:01:36 ##  6 Ciudad de México         100     60.2    61    2020-04-02 2022-09-07 13:01:36 ##  7 México                   100     16.7    16.7  2020-04-02 2022-09-07 13:01:36 ##  8 Guanajuato               100      8.33    8.33 2020-04-02 2022-09-07 13:01:36 ##  9 Oaxaca                   100      0       0    2020-04-03 2022-09-07 13:01:36 ## 10 Ciudad de México          43.7   36.8    75    2020-04-03 2022-09-07 13:01:36 ## # … with 28,136 more rows, and abbreviated variable names ## #   ¹​`Hospitalizados (%)`, ²​`Ventilación (%)`, ³​`UCI y Ventilación (%)` descarga_datos_red_irag(cache = cache_dir) #Segundo intento nos dice que ya descargó ## Warning: La descarga mas reciente de fue hace 0.00042 dias. Como tiene menos de un dia ## usare esa. Escribe `force_download = TRUE` si quieres descargar de todas ## formas. Para desactivar este mensaje `show_warnings = FALSE.` ## # A tibble: 28,146 × 6 ##    Estado           Hospitaliza…¹ Venti…² UCI y…³ Fecha      Actualizacion       ##    <chr>                    <dbl>   <dbl>   <dbl> <date>     <dttm>              ##  1 Oaxaca                   100      0       0    2020-04-01 2022-09-07 13:01:36 ##  2 Ciudad de México         100     65.8    65.8  2020-04-01 2022-09-07 13:01:36 ##  3 México                   100     16.7    33.3  2020-04-01 2022-09-07 13:01:36 ##  4 Guanajuato               100      7.69    7.69 2020-04-01 2022-09-07 13:01:36 ##  5 Oaxaca                   100      0       8.33 2020-04-02 2022-09-07 13:01:36 ##  6 Ciudad de México         100     60.2    61    2020-04-02 2022-09-07 13:01:36 ##  7 México                   100     16.7    16.7  2020-04-02 2022-09-07 13:01:36 ##  8 Guanajuato               100      8.33    8.33 2020-04-02 2022-09-07 13:01:36 ##  9 Oaxaca                   100      0       0    2020-04-03 2022-09-07 13:01:36 ## 10 Ciudad de México          43.7   36.8    75    2020-04-03 2022-09-07 13:01:36 ## # … with 28,136 more rows, and abbreviated variable names ## #   ¹​`Hospitalizados (%)`, ²​`Ventilación (%)`, ³​`UCI y Ventilación (%)`"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Preguntas_Frecuentes.html","id":"para-qué-me-sirve-duckdb","dir":"Articles","previous_headings":"Preguntas","what":"¿Para qué me sirve duckdb?","title":"Preguntas Frecuentes","text":"duckdb es un sistema de bases de datos caracterizado por su velocidad y por leer de memoria (disco duro) las bases. Usando duckdb tu computadora sufre por poca RAM y opera más rápido que con un tibble.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Preguntas_Frecuentes.html","id":"cómo-guardo-la-base-descargada-de-datos-abiertos","dir":"Articles","previous_headings":"Preguntas","what":"¿Cómo guardo la base descargada de datos abiertos?","title":"Preguntas Frecuentes","text":"Utiliza la opción dbdir para crear un archivo .duckdb y guardar tus datos en formato duckdb. Como ejemplo:","code":"#Descarga y almacena en archivo duckdb descarga_datos_abiertos(dbdir = \"ejemplo.duckdb\")   #Lee de archivo duckdb read_datos_abiertos(dbdir = \"ejemplo.duckdb\")"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Preguntas_Frecuentes.html","id":"deseo-aplicar-una-función-directamente-a-datos_coviddats-y-se-vuelve-muy-lento-se-acaba-la-memoria","dir":"Articles","previous_headings":"Preguntas","what":"Deseo aplicar una función directamente a datos_covid$dats y se vuelve muy lento / se acaba la memoria","title":"Preguntas Frecuentes","text":"Probablemente la función tenga un equivalente en duckdb. La recomendación es aplicar la mayor cantidad de filtros y selecciones que puedas en duckdb y después aplicarle la función que quieras. Ejemplo:","code":"datos_covid <- covidmx::datosabiertos  #No recomendado primero aplicar función ajena a duck y luego semana #tampoco se recomienda quedarte con todas las variables datos_covid$dats |>   mutate(dia_semana = lubridate::wday(FECHA_SINTOMAS)) |>   filter(SEXO == 1)   #Recomendado: quedarte solo las variables q necesitas y primero aplicar #las funciones de dbplyr datos_covid$dats |>   select(SEXO, FECHA_SINTOMAS) |>   filter(SEXO == 1) |>   mutate(dia_semana = lubridate::wday(FECHA_SINTOMAS))"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Preguntas_Frecuentes.html","id":"al-leer-con-tibble-se-me-acaba-la-memoria","dir":"Articles","previous_headings":"Preguntas","what":"Al leer con tibble se me acaba la memoria","title":"Preguntas Frecuentes","text":"Esto es normal pues los tibble viven en tu memoria RAM. Cambia read_format \"duckdb\".","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Preguntas_Frecuentes.html","id":"al-leer-con-duckdb-se-me-acaba-la-memoria","dir":"Articles","previous_headings":"Preguntas","what":"Al leer con duckdb se me acaba la memoria","title":"Preguntas Frecuentes","text":"Esto es normal si tu memoria RAM es pequeña. Cambia pragma_memory_limit = \"1GB\" algo más pequeño tomando en cuenta que el límite de PRAGMA siempre debe ser menor al de tu RAM (recomiendo la mitad o menos).","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Preguntas_Frecuentes.html","id":"cómo-leer-una-base-de-datos-abiertos-que-ya-tenía-en-mi-computadora","dir":"Articles","previous_headings":"Preguntas","what":"¿Cómo leer una base de datos abiertos que ya tenía en mi computadora?","title":"Preguntas Frecuentes","text":"Puedes usar las funciones del tipo read_datos_abiertos_* según vengan en zip, csv o duckdb. La función read_datos_abiertos intenta adivinar el formato automáticamente.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Preguntas_Frecuentes.html","id":"cómo-descargar-una-base-de-datos-abiertos-desde-otro-link","dir":"Articles","previous_headings":"Preguntas","what":"¿Cómo descargar una base de datos abiertos desde otro link?","title":"Preguntas Frecuentes","text":"En las funciones de descarga_ puedes cambiar la variable sites.covid poniendo el nombre de la base como identificador y el sitio en forma de vector. Por ejemplo descargando la siguiente de Github:","code":"dlink       <- c(\"gtest\" = \"https://github.com/RodrigoZepeda/covidmx/raw/main/datos_abiertos_covid19.zip\") datos_covid <- descarga_datos_abiertos(read_format = \"duckdb\", sites.covid = dlink,                                         tblname = \"test\", quiet = TRUE, show_warnings = F,                                         force_download = T, cache_datos  = tempfile(),                                         cache_diccionario = tempfile())"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Preguntas_Frecuentes.html","id":"quiero-obtener-una-sola-columna-de-la-base-pero-me-da-null-ej-datos_duckdbdatsorigen","dir":"Articles","previous_headings":"Preguntas","what":"Quiero obtener una sola columna de la base pero me da NULL (ej datos_duckdb$dats$ORIGEN)","title":"Preguntas Frecuentes","text":"La base de datos que leíste como duckdb es un tibble ni un data.frame por lo cual todas las funciones que aplican para tibble están disponibles. Para obtener una sola columna usa pull:","code":"datos_duckdb$dats %>% pull(ORIGEN)"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Preguntas_Frecuentes.html","id":"cómo-convertir-mi-base-en-tibble","dir":"Articles","previous_headings":"Preguntas","what":"¿Cómo convertir mi base en tibble?","title":"Preguntas Frecuentes","text":"Para convertir tu base en tibble utiliza collect. Por ejemplo:","code":"datos_duckdb$dats %>% collect()"},{"path":[]},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Preguntas_Frecuentes.html","id":"fun-is-not-supported-on-database-backends","dir":"Articles","previous_headings":"Errores frecuentes","what":"fun is not supported on database backends","title":"Preguntas Frecuentes","text":"La función que quieres aplicar es una función de dbplyr necesitas colapsar tu base primero en un tibble para poder aplicarla. Ver sección correspondiente","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Preguntas_Frecuentes.html","id":"error-in-dirnamefname-object-fname-not-found-in-addition-warning-message-in-system2unzip_command-args-cunzip_args-datos_abiertos_zip_path-running-command-unzip--o-had-status-9","dir":"Articles","previous_headings":"Errores frecuentes","what":"Error in dirname(fname) : object ‘fname’ not found In addition: Warning message: In system2(unzip_command, args = c(unzip_args, datos_abiertos_zip_path), : running command ‘’unzip’ -o …’ had status 9","title":"Preguntas Frecuentes","text":"El vínculo de sites.covid es incorrecto (quizá la SSA lo cambió). Para actualizar el correcto sigue las mismas instrucciones descritas en la sección previa.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Preguntas_Frecuentes.html","id":"error-rapi_startup-failed-to-open-database-io-error-cannot-open-file--the-process-cannot-access-the-file-because-it-is-being-used-by-another-process-","dir":"Articles","previous_headings":"Errores frecuentes","what":"Error: rapi_startup: Failed to open database: IO Error: Cannot open file. The process cannot access the file because it is being used by another process.","title":"Preguntas Frecuentes","text":"El problema es que estás usando el driver de duckdb en otro lado. Prueba la opción con read_only: drv = duckdb::duckdb(dbdir = 'tu/archivo.duckdb', read_only = TRUE).","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/articles/Preguntas_Frecuentes.html","id":"warning-message-downloading-failed-falling-back-to-cached-version","dir":"Articles","previous_headings":"Errores frecuentes","what":"Warning message: Downloading ‘…’ failed; falling back to cached version","title":"Preguntas Frecuentes","text":"Hubo un problema con la conexión Internet ya sea porque los datos cambiaron de sitio web o porque te quedaste sin señal.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"instalación","dir":"Articles","previous_headings":"","what":"Instalación","title":"Introducción a covidmx","text":"olvides llamar la librería y ¡codear! NOTA (datos precargados) Si lo que quieres hacer es ponerte jugar con las funciones del paquete directamente puedes saltar hasta la sección de casos y usar los datos precargados:","code":"#install.packages(\"remotes\") remotes::install_github(\"RodrigoZepeda/covidmx\") library(covidmx) library(dplyr) datos_covid <- covidmx::datosabiertos #Uso de los datos precargados"},{"path":[]},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"descarga-automática-de-base-de-datos-abiertos","dir":"Articles","previous_headings":"Datos Abiertos de la Dirección General de Epidemiología","what":"Descarga automática de base de datos abiertos","title":"Introducción a covidmx","text":"Lo más importante es comenzar descargando la base de datos abiertos. Esto lo puedes hacer como sigue: Para propósito de este tutorial trabajaremos con una base de datos más pequeña disponible en el repositorio de Github la cual guardaremos en duckdb bajo el nombre de tutorial. La descarga contiene una conexión duckdb dentro de datos_covid$dats la cual puedes operar con dbplyr. se agregan las etiquetas los datos pues es muy tardado hacerlo: Sin embargo el diccionario se almacena como una lista en dict para su consulta y uso por las funciones internas: por ejemplo para ver el diccionario de antígeno: ¿Se te fue el Internet? te preocupes, descarga_datos_abiertos trabajará con tu descarga más reciente.","code":"datos_covid <- descarga_datos_abiertos() #Cómo vas a guardar tu base .duckdb base_duck   <- \"mi_archivo.duckdb\" dlink       <- c(\"tutorial\" =                     \"https://github.com/RodrigoZepeda/covidmx/raw/main/datos_abiertos_covid19.zip\") datos_covid <- descarga_datos_abiertos(sites.covid = dlink, tblname = \"tutorial\",                                         dbdir = base_duck) datos_covid$dats |> dplyr::glimpse() #> Rows: ?? #> Columns: 40 #> Database: DuckDB 0.5.0 [root@Darwin 21.5.0:R 4.2.0//var/folders/42/2kdf45dd1qz5n7kf9lm8ld9r0000gn/T//RtmpxCFxFD/file773f512b392b.duckdb] #> $ FECHA_ACTUALIZACION   <dttm> 2022-07-14, 2022-07-14, 2022-07-14, 2022-07-14,… #> $ ID_REGISTRO           <chr> \"78ce0b\", \"526821\", \"4ab051\", \"ba3171\", \"b970bb\"… #> $ ORIGEN                <int> 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 2, … #> $ SECTOR                <int> 12, 4, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,… #> $ ENTIDAD_UM            <chr> \"03\", \"03\", \"03\", \"03\", \"03\", \"03\", \"03\", \"03\", … #> $ SEXO                  <int> 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ ENTIDAD_NAC           <chr> \"09\", \"03\", \"25\", \"03\", \"03\", \"25\", \"03\", \"17\", … #> $ ENTIDAD_RES           <chr> \"03\", \"03\", \"03\", \"03\", \"03\", \"03\", \"03\", \"03\", … #> $ MUNICIPIO_RES         <chr> \"003\", \"008\", \"008\", \"008\", \"003\", \"003\", \"008\",… #> $ TIPO_PACIENTE         <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, … #> $ FECHA_INGRESO         <dttm> 2021-07-08, 2021-07-01, 2021-07-01, 2021-07-01,… #> $ FECHA_SINTOMAS        <dttm> 2021-07-04, 2021-07-01, 2021-07-01, 2021-07-01,… #> $ FECHA_DEF             <dttm> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ INTUBADO              <int> 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 2, 9… #> $ NEUMONIA              <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, … #> $ EDAD                  <int> 17, 28, 30, 22, 32, 35, 24, 40, 21, 78, 13, 54, … #> $ NACIONALIDAD          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ EMBARAZO              <int> 2, 97, 97, 97, 97, 97, 97, 2, 2, 2, 2, 2, 2, 2, … #> $ HABLA_LENGUA_INDIG    <int> 99, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,… #> $ INDIGENA              <int> 99, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,… #> $ DIABETES              <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, … #> $ EPOC                  <int> 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … #> $ ASMA                  <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … #> $ INMUSUPR              <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … #> $ HIPERTENSION          <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … #> $ OTRA_COM              <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … #> $ CARDIOVASCULAR        <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … #> $ OBESIDAD              <int> 2, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … #> $ RENAL_CRONICA         <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … #> $ TABAQUISMO            <int> 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … #> $ OTRO_CASO             <int> 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … #> $ TOMA_MUESTRA_LAB      <int> 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, … #> $ RESULTADO_LAB         <int> 2, 97, 97, 97, 97, 1, 97, 97, 97, 97, 97, 4, 97,… #> $ TOMA_MUESTRA_ANTIGENO <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ RESULTADO_ANTIGENO    <int> 2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, … #> $ CLASIFICACION_FINAL   <int> 7, 7, 3, 7, 7, 3, 3, 3, 7, 7, 3, 6, 7, 7, 7, 7, … #> $ MIGRANTE              <int> 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, … #> $ PAIS_NACIONALIDAD     <chr> \"México\", \"México\", \"México\", \"México\", \"México\"… #> $ PAIS_ORIGEN           <chr> \"97\", \"97\", \"97\", \"97\", \"97\", \"97\", \"97\", \"97\", … #> $ UCI                   <int> 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 2, 9… datos_covid$dict |> dplyr::glimpse() #> List of 31 #>  $ ORIGEN               : tibble [3 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:3] 1 2 99 #>   ..$ DESCRIPCIÓN: chr [1:3] \"USMER\" \"FUERA DE USMER\" \"NO ESPECIFICADO\" #>  $ SECTOR               : tibble [14 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:14] 1 2 3 4 5 6 7 8 9 10 ... #>   ..$ DESCRIPCIÓN: chr [1:14] \"CRUZ ROJA\" \"DIF\" \"ESTATAL\" \"IMSS\" ... #>  $ SEXO                 : tibble [3 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:3] 1 2 99 #>   ..$ DESCRIPCIÓN: chr [1:3] \"MUJER\" \"HOMBRE\" \"NO ESPECIFICADO\" #>  $ PACIENTE             : tibble [3 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:3] 1 2 99 #>   ..$ DESCRIPCIÓN: chr [1:3] \"AMBULATORIO\" \"HOSPITALIZADO\" \"NO ESPECIFICADO\" #>  $ NACIONALIDAD         : tibble [3 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:3] 1 2 99 #>   ..$ DESCRIPCIÓN: chr [1:3] \"MEXICANA\" \"EXTRANJERA\" \"NO ESPECIFICADO\" #>  $ RESULTADO_LAB        : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 3 4 97 #>   ..$ DESCRIPCIÓN: chr [1:5] \"POSITIVO A SARS-COV-2\" \"NO POSITIVO A SARS-COV-2\" \"RESULTADO PENDIENTE\" \"RESULTADO NO ADECUADO\" ... #>  $ RESULTADO_ANTIGENO   : tibble [3 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:3] 1 2 97 #>   ..$ DESCRIPCIÓN: chr [1:3] \"POSITIVO A SARS-COV-2\" \"NEGATIVO A SARS-COV-2\" \"NO APLICA (CASO SIN MUESTRA)\" #>  $ CLASIFICACION_FINAL  : tibble [7 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE        : num [1:7] 1 2 3 4 5 6 7 #>   ..$ CLASIFICACIÓN: chr [1:7] \"CASO DE COVID-19 CONFIRMADO POR ASOCIACIÓN CLÍNICA EPIDEMIOLÓGICA\" \"CASO DE COVID-19 CONFIRMADO POR COMITÉ DE  DICTAMINACIÓN\" \"CASO DE SARS-COV-2  CONFIRMADO\" \"INVÁLIDO POR LABORATORIO\" ... #>   ..$ DESCRIPCIÓN  : chr [1:7] \"Confirmado por asociación aplica cuando el caso informó ser contacto de un positivo a COVID-19 (y este se encue\"| __truncated__ \"Confirmado por dictaminación solo aplica para defunciones bajo las siguientes condiciones: \\r\\nAl caso no se le\"| __truncated__ \"Confirmado aplica cuando:\\r\\nEl caso tiene muestra de laboratorio o prueba antigénica y resultó positiva  a SAR\"| __truncated__ \"Inválido aplica cuando el caso no tienen asociación clínico epidemiológica, ni dictaminación a COVID-19. Se le \"| __truncated__ ... #>  $ MUNICIPIO_RES        : tibble [2,501 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE_MUNICIPIO: chr [1:2501] \"001\" \"002\" \"003\" \"004\" ... #>   ..$ MUNICIPIO      : chr [1:2501] \"AGUASCALIENTES\" \"ASIENTOS\" \"CALVILLO\" \"COSÍO\" ... #>   ..$ CLAVE_ENTIDAD  : chr [1:2501] \"01\" \"01\" \"01\" \"01\" ... #>  $ INTUBADO             : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ NEUMONIA             : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ EMBARAZO             : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ HABLA LENGUA INDIGENA: tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ INDIGENA             : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ DIABETES             : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ EPOC                 : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ ASMA                 : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ INMUSUPR             : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ HIPERTENSION         : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ CARDIOVASCULAR       : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ OTRO_CASO            : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ TOMA_MUESTRA_LAB     : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ TOMA_MUESTRA_ANTIGENO: tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ OTRA_COMORBILIDAD    : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ OBESIDAD             : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ RENAL_CRONICA        : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ TABAQUISMO           : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ UCI                  : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE      : num [1:5] 1 2 97 98 99 #>   ..$ DESCRIPCIÓN: chr [1:5] \"SI\" \"NO\" \"NO APLICA\" \"SE IGNORA\" ... #>  $ ENTIDAD_UM           : tibble [36 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE_ENTIDAD     : chr [1:36] \"01\" \"02\" \"03\" \"04\" ... #>   ..$ ENTIDAD_FEDERATIVA: chr [1:36] \"AGUASCALIENTES\" \"BAJA CALIFORNIA\" \"BAJA CALIFORNIA SUR\" \"CAMPECHE\" ... #>   ..$ ABREVIATURA       : chr [1:36] \"AS\" \"BC\" \"BS\" \"CC\" ... #>  $ ENTIDAD_RES          : tibble [36 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE_ENTIDAD     : chr [1:36] \"01\" \"02\" \"03\" \"04\" ... #>   ..$ ENTIDAD_FEDERATIVA: chr [1:36] \"AGUASCALIENTES\" \"BAJA CALIFORNIA\" \"BAJA CALIFORNIA SUR\" \"CAMPECHE\" ... #>   ..$ ABREVIATURA       : chr [1:36] \"AS\" \"BC\" \"BS\" \"CC\" ... #>  $ ENTIDAD_NAC          : tibble [36 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ CLAVE_ENTIDAD     : chr [1:36] \"01\" \"02\" \"03\" \"04\" ... #>   ..$ ENTIDAD_FEDERATIVA: chr [1:36] \"AGUASCALIENTES\" \"BAJA CALIFORNIA\" \"BAJA CALIFORNIA SUR\" \"CAMPECHE\" ... #>   ..$ ABREVIATURA       : chr [1:36] \"AS\" \"BC\" \"BS\" \"CC\" ... datos_covid$dict$RESULTADO_ANTIGENO #> # A tibble: 3 × 2 #>   CLAVE DESCRIPCIÓN                  #>   <dbl> <chr>                        #> 1     1 POSITIVO A SARS-COV-2        #> 2     2 NEGATIVO A SARS-COV-2        #> 3    97 NO APLICA (CASO SIN MUESTRA)"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"lectura-desde-duckdb","dir":"Articles","previous_headings":"Datos Abiertos de la Dirección General de Epidemiología","what":"Lectura desde duckdb","title":"Introducción a covidmx","text":"es necesario volver descargar si reinicias tu sesión de R siempre y cuando los hayas guardado en duckdb estableciendo un dbdir (de lo contrario la base de datos sólo dura lo que dure tu sesión de R). Puedes sólo leer los datos abiertos que ya tienes usando la función read_datos_abiertos.R; El proceso de descarga de cualquier base de covidmx es un proceso inteligente. Si ha pasado más de un día desde que descargaste la base el programa te advertirá de que tiene sentido volver descargar. Podemos ver un ejemplo descargando sólo el diccionario (que ya descargamos arriba con descarga_datos_abiertos) Si de todas maneras quieres reintentar la descarga puedes usar force_download = TRUE lo cual verificará mediante pins que la base en línea sea distinta de la que tienes almacenada y en caso afirmativo descargará los datos.","code":"read_datos_abiertos(base_duck, tblname = \"tutorial\") |> glimpse() #> List of 3 #>  $ dats      :List of 2 #>   ..$ src       :List of 2 #>   .. ..$ con  :Formal class 'duckdb_connection' [package \"duckdb\"] with 6 slots #>   .. ..$ disco: NULL #>   .. ..- attr(*, \"class\")= chr [1:4] \"src_duckdb_connection\" \"src_dbi\" \"src_sql\" \"src\" #>   ..$ lazy_query:List of 13 #>   .. ..$ x                :List of 13 #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"lazy_select_query\" \"lazy_query\" #>   .. ..$ select           : tibble [40 × 5] (S3: tbl_df/tbl/data.frame) #>   .. ..$ where            : NULL #>   .. ..$ group_by         : NULL #>   .. ..$ order_by         : NULL #>   .. ..$ distinct         : logi FALSE #>   .. ..$ limit            : NULL #>   .. ..$ select_operation : chr \"mutate\" #>   .. ..$ last_op          : chr \"mutate\" #>   .. ..$ message_summarise: NULL #>   .. ..$ group_vars       : chr(0)  #>   .. ..$ order_vars       : NULL #>   .. ..$ frame            : NULL #>   .. ..- attr(*, \"class\")= chr [1:2] \"lazy_select_query\" \"lazy_query\" #>   ..- attr(*, \"class\")= chr [1:5] \"tbl_duckdb_connection\" \"tbl_dbi\" \"tbl_sql\" \"tbl_lazy\" ... #>  $ disconnect:function (quiet = FALSE)   #>  $ dict      :List of 31 #>   ..$ ORIGEN               : tibble [3 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ SECTOR               : tibble [14 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ SEXO                 : tibble [3 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ PACIENTE             : tibble [3 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ NACIONALIDAD         : tibble [3 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ RESULTADO_LAB        : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ RESULTADO_ANTIGENO   : tibble [3 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CLASIFICACION_FINAL  : tibble [7 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ MUNICIPIO_RES        : tibble [2,501 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ INTUBADO             : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ NEUMONIA             : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ EMBARAZO             : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ HABLA LENGUA INDIGENA: tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ INDIGENA             : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ DIABETES             : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ EPOC                 : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ ASMA                 : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ INMUSUPR             : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ HIPERTENSION         : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ CARDIOVASCULAR       : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ OTRO_CASO            : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ TOMA_MUESTRA_LAB     : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ TOMA_MUESTRA_ANTIGENO: tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ OTRA_COMORBILIDAD    : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ OBESIDAD             : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ RENAL_CRONICA        : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ TABAQUISMO           : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ UCI                  : tibble [5 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ ENTIDAD_UM           : tibble [36 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ ENTIDAD_RES          : tibble [36 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ ENTIDAD_NAC          : tibble [36 × 3] (S3: tbl_df/tbl/data.frame) diccionario_datos <- descarga_diccionario() #> Warning: La descarga mas reciente de fue hace 0.14717 dias. Como tiene menos de un dia #> usare esa. Escribe `force_download = TRUE` si quieres descargar de todas #> formas. Para desactivar este mensaje `show_warnings = FALSE.` diccionario_datos <- descarga_diccionario(force_download = TRUE)"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"lectura-de-base-de-datos-de-zip-o-csv","dir":"Articles","previous_headings":"Datos Abiertos de la Dirección General de Epidemiología","what":"Lectura de base de datos de zip o csv","title":"Introducción a covidmx","text":"Si el proceso de descarga se interrumpe en algún momento puedes leer los datos abiertos de zip o bien del csv descomprimido con read_datos_abiertos también: Lo mismo puedes hacer si tienes el diccionario descargado con las variables diccionario_zip_path, diccionario_unzipped_path y diccionario para cuando el diciconario es un archivo zip, un archivo xlsx o un tibble en tu sesiòn de R (respectivamente) como sigue: Una vez descargados (o leídos), basta componer la base de datos con cualquiera de las funciones para tener una tabla de datos agregada por fecha y entidad. Para terminar de usar los datos, nos desconectamos de la base con:","code":"#Descarga sólo el zip zip_path    <- descarga_db_datos_abiertos_tbl(sites.covid = dlink, show_warnings = F, quiet = T) datos_covid <- read_datos_abiertos(zip_path, tblname = \"tutorial\")  #O bien descomprime el zip y lee el csv csv_path    <- unzip_db_datos_abiertos_tbl(zip_path) datos_covid <- read_datos_abiertos_csv(csv_path, tblname = \"tutorial\") #Descarga el diccionario en zip zip_path    <- descarga_db_diccionario_ssa() datos_covid <- read_datos_abiertos(base_duck, diccionario_zip_path = zip_path, tblname = \"tutorial\") datos_covid$disconnect() #> ✔ Desconectado"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"lectura-de-la-base-de-datos-del-tutorial","dir":"Articles","previous_headings":"Datos Abiertos de la Dirección General de Epidemiología","what":"Lectura de la base de datos del tutorial","title":"Introducción a covidmx","text":"Para lo que sigue del tutorial usaremos los datos precargados:","code":"datos_covid <- covidmx::datosabiertos #Uso de los datos precargados"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"casos","dir":"Articles","previous_headings":"Datos Abiertos de la Dirección General de Epidemiología","what":"Casos (Incidencia)","title":"Introducción a covidmx","text":"Las bases de datos se agregan la lista bajo el nombre default casos. Por ejemplo: El objeto casos por default es un tibble con el que ya puedes operar: Nota que lo que hace es agregar por fecha y por entidad de la unidad médica los casos. Se puede filtar por entidad de la unidad médica seleccionando las entidades de interés: Si se quiere filtrar por entidad de nacimiento y que la fecha sea la de ingreso, por ejemplo: Finalmente, si sólo se desean casos confirmados e inválidos: Nota que por default el programa rellena con ceros lo que se observó. Si quieres cancelar esta opción basta con cambiar fill_zeros = FALSE: Si se desea que los casos vengan agregados (es decir QUINTANA ROO + AGUASCALIENTES) se puede cambiar la opción de group_by_entidad FALSE: La variable edad_cut te permite quedarte sòlo con un grupo de edad o bien definir múltiples. Por ejemplo para quedarte sólo con los casos de 5 25 años: O bien definir grupos de edad de la forma 0-20, 20-60 y 60+ Puedes acumular diferentes bases de datos en la misma lista asignándoles nombres: Hay múltiples opciones permitiendo seleccionar variables específicas de unidades de cuidado intensivo, defunciones y si devolver la tabla como tibble o como conexión de dbplyr MARIADB: Puedes ver la base generada así:","code":"datos_covid <- datos_covid |> casos() datos_covid$casos |> head() #> # A tibble: 6 × 5 #>   FECHA_SINTOMAS      ENTIDAD_UM     n ENTIDAD_FEDERATIVA  ABREVIATURA #>   <dttm>              <chr>      <int> <chr>               <chr>       #> 1 2021-07-01 00:00:00 02           139 BAJA CALIFORNIA     BC          #> 2 2021-07-01 00:00:00 03           519 BAJA CALIFORNIA SUR BS          #> 3 2021-07-02 00:00:00 02           164 BAJA CALIFORNIA     BC          #> 4 2021-07-02 00:00:00 03           357 BAJA CALIFORNIA SUR BS          #> 5 2021-07-03 00:00:00 02           170 BAJA CALIFORNIA     BC          #> 6 2021-07-03 00:00:00 03           421 BAJA CALIFORNIA SUR BS datos_covid |>    casos(entidades = c(\"BAJA CALIFORNIA\",\"BAJA CALIFORNIA SUR\"),         list_name = \"BC/BCS\") #> # A tibble: 6 × 5 #>   FECHA_SINTOMAS      ENTIDAD_UM     n ENTIDAD_FEDERATIVA  ABREVIATURA #>   <dttm>              <chr>      <int> <chr>               <chr>       #> 1 2021-07-01 00:00:00 02           139 BAJA CALIFORNIA     BC          #> 2 2021-07-01 00:00:00 03           519 BAJA CALIFORNIA SUR BS          #> 3 2021-07-02 00:00:00 02           164 BAJA CALIFORNIA     BC          #> 4 2021-07-02 00:00:00 03           357 BAJA CALIFORNIA SUR BS          #> 5 2021-07-03 00:00:00 02           170 BAJA CALIFORNIA     BC          #> 6 2021-07-03 00:00:00 03           421 BAJA CALIFORNIA SUR BS datos_covid |>      casos(entidades    = \"BAJA CALIFORNIA\",           entidad_tipo = \"Nacimiento\",           fecha_tipo   = \"Ingreso\",           list_name    = \"DB_Filtro_Nac\") #> # A tibble: 6 × 5 #>   FECHA_INGRESO       ENTIDAD_NAC     n ENTIDAD_FEDERATIVA ABREVIATURA #>   <dttm>              <chr>       <int> <chr>              <chr>       #> 1 2021-07-01 00:00:00 02              9 BAJA CALIFORNIA    BC          #> 2 2021-07-02 00:00:00 02             33 BAJA CALIFORNIA    BC          #> 3 2021-07-03 00:00:00 02             14 BAJA CALIFORNIA    BC          #> 4 2021-07-04 00:00:00 02             16 BAJA CALIFORNIA    BC          #> 5 2021-07-05 00:00:00 02            156 BAJA CALIFORNIA    BC          #> 6 2021-07-06 00:00:00 02            119 BAJA CALIFORNIA    BC datos_covid |>      casos(entidades    = \"BAJA CALIFORNIA\",           entidad_tipo = \"Nacimiento\",           fecha_tipo   = \"Ingreso\",           tipo_clasificacion = c(\"Confirmados COVID\", \"Invalido\"),           list_name = \"BC_conf_inv\") #> # A tibble: 6 × 5 #>   FECHA_INGRESO       ENTIDAD_NAC     n ENTIDAD_FEDERATIVA ABREVIATURA #>   <dttm>              <chr>       <int> <chr>              <chr>       #> 1 2021-07-01 00:00:00 02              3 BAJA CALIFORNIA    BC          #> 2 2021-07-02 00:00:00 02              3 BAJA CALIFORNIA    BC          #> 3 2021-07-03 00:00:00 02              4 BAJA CALIFORNIA    BC          #> 4 2021-07-04 00:00:00 02              1 BAJA CALIFORNIA    BC          #> 5 2021-07-05 00:00:00 02             24 BAJA CALIFORNIA    BC          #> 6 2021-07-06 00:00:00 02             26 BAJA CALIFORNIA    BC datos_covid |>      casos(entidades    = c(\"QUINTANA ROO\",\"AGUASCALIENTES\"),           entidad_tipo = \"Nacimiento\",           fecha_tipo   = \"Ingreso\",           tipo_clasificacion = c(\"Confirmados COVID\", \"Invalido\"),           list_name = \"Sin fill zeros\",           fill_zeros = FALSE) #> # A tibble: 6 × 5 #>   FECHA_INGRESO       ENTIDAD_NAC     n ENTIDAD_FEDERATIVA ABREVIATURA #>   <dttm>              <chr>       <int> <chr>              <chr>       #> 1 2021-07-05 00:00:00 01              1 AGUASCALIENTES     AS          #> 2 2021-07-09 00:00:00 23              1 QUINTANA ROO       QR          #> 3 2021-07-11 00:00:00 01              1 AGUASCALIENTES     AS          #> 4 2021-07-12 00:00:00 01              1 AGUASCALIENTES     AS          #> 5 2021-07-18 00:00:00 01              1 AGUASCALIENTES     AS          #> 6 2021-07-19 00:00:00 01              1 AGUASCALIENTES     AS datos_covid |>      casos(entidades          = c(\"QUINTANA ROO\",\"AGUASCALIENTES\"),           entidad_tipo       = \"Nacimiento\",           fecha_tipo         = \"Ingreso\",           tipo_clasificacion = c(\"Confirmados COVID\", \"Invalido\"),           group_by_entidad   = FALSE,           list_name          =   \"QROO_AGS_juntos\") #> # A tibble: 6 × 2 #>   FECHA_INGRESO           n #>   <dttm>              <int> #> 1 2021-07-01 00:00:00     0 #> 2 2021-07-02 00:00:00     0 #> 3 2021-07-03 00:00:00     0 #> 4 2021-07-04 00:00:00     0 #> 5 2021-07-05 00:00:00     1 #> 6 2021-07-06 00:00:00     0 datos_covid |>    casos(edad_cut = c(5, 25), list_name = \"5_25\") #> # A tibble: 6 × 6 #>   FECHA_SINTOMAS      EDAD_CAT ENTIDAD_UM     n ENTIDAD_FEDERATIVA  ABREVIATURA #>   <dttm>              <fct>    <chr>      <int> <chr>               <chr>       #> 1 2021-07-01 00:00:00 (5,25]   02            38 BAJA CALIFORNIA     BC          #> 2 2021-07-01 00:00:00 (5,25]   03           131 BAJA CALIFORNIA SUR BS          #> 3 2021-07-02 00:00:00 (5,25]   02            33 BAJA CALIFORNIA     BC          #> 4 2021-07-02 00:00:00 (5,25]   03            93 BAJA CALIFORNIA SUR BS          #> 5 2021-07-03 00:00:00 (5,25]   02            35 BAJA CALIFORNIA     BC          #> 6 2021-07-03 00:00:00 (5,25]   03           113 BAJA CALIFORNIA SUR BS datos_covid |>    casos(edad_cut = c(0, 20, 60, Inf), list_name = \"0_20_60\") #> # A tibble: 6 × 6 #>   FECHA_SINTOMAS      EDAD_CAT ENTIDAD_UM     n ENTIDAD_FEDERATIVA  ABREVIATURA #>   <dttm>              <fct>    <chr>      <int> <chr>               <chr>       #> 1 2021-07-01 00:00:00 (0,20]   02            22 BAJA CALIFORNIA     BC          #> 2 2021-07-01 00:00:00 (0,20]   03            70 BAJA CALIFORNIA SUR BS          #> 3 2021-07-01 00:00:00 (20,60]  02           107 BAJA CALIFORNIA     BC          #> 4 2021-07-01 00:00:00 (20,60]  03           426 BAJA CALIFORNIA SUR BS          #> 5 2021-07-01 00:00:00 (60,Inf] 02             9 BAJA CALIFORNIA     BC          #> 6 2021-07-01 00:00:00 (60,Inf] 03            21 BAJA CALIFORNIA SUR BS datos_covid <- datos_covid |>    casos(list_name = \"Todos por entidad\") |>   casos(list_name = \"Todos (nacional)\",    group_by_entidad = FALSE) |>    casos(list_name = \"Defunciones (todos)\", defunciones = TRUE)   datos_covid$`Todos (nacional)` |> head() #> # A tibble: 6 × 2 #>   FECHA_SINTOMAS          n #>   <dttm>              <int> #> 1 2021-07-01 00:00:00   658 #> 2 2021-07-02 00:00:00   521 #> 3 2021-07-03 00:00:00   591 #> 4 2021-07-04 00:00:00   643 #> 5 2021-07-05 00:00:00   736 #> 6 2021-07-06 00:00:00   728  datos_covid$`Todos por entidad` |> head() #> # A tibble: 6 × 5 #>   FECHA_SINTOMAS      ENTIDAD_UM     n ENTIDAD_FEDERATIVA  ABREVIATURA #>   <dttm>              <chr>      <int> <chr>               <chr>       #> 1 2021-07-01 00:00:00 02           139 BAJA CALIFORNIA     BC          #> 2 2021-07-01 00:00:00 03           519 BAJA CALIFORNIA SUR BS          #> 3 2021-07-02 00:00:00 02           164 BAJA CALIFORNIA     BC          #> 4 2021-07-02 00:00:00 03           357 BAJA CALIFORNIA SUR BS          #> 5 2021-07-03 00:00:00 02           170 BAJA CALIFORNIA     BC          #> 6 2021-07-03 00:00:00 03           421 BAJA CALIFORNIA SUR BS  datos_covid$`Defunciones (todos)` |> head() #> # A tibble: 6 × 5 #>   FECHA_SINTOMAS      ENTIDAD_UM     n ENTIDAD_FEDERATIVA  ABREVIATURA #>   <dttm>              <chr>      <int> <chr>               <chr>       #> 1 2021-07-01 00:00:00 02             3 BAJA CALIFORNIA     BC          #> 2 2021-07-01 00:00:00 03            24 BAJA CALIFORNIA SUR BS          #> 3 2021-07-02 00:00:00 02             4 BAJA CALIFORNIA     BC          #> 4 2021-07-02 00:00:00 03             5 BAJA CALIFORNIA SUR BS          #> 5 2021-07-03 00:00:00 02             4 BAJA CALIFORNIA     BC          #> 6 2021-07-03 00:00:00 03            18 BAJA CALIFORNIA SUR BS datos_covid <- datos_covid |>    casos(     #Lista de entidades que deseas     entidades = c(\"AGUASCALIENTES\", \"BAJA CALIFORNIA\", \"BAJA CALIFORNIA SUR\",                       \"CAMPECHE\", \"CHIAPAS\", \"CHIHUAHUA\",\"CIUDAD DE M\\u00c9XICO\",                       \"COAHUILA DE ZARAGOZA\" , \"COLIMA\", \"DURANGO\", \"GUANAJUATO\",                       \"GUERRERO\",\"HIDALGO\", \"JALISCO\", \"M\\u00c9XICO\",                       \"MICHOAC\\u00c1N DE OCAMPO\", \"MORELOS\",\"NAYARIT\",                       \"NUEVO LE\\u00d3N\", \"OAXACA\", \"PUEBLA\", \"QUER\\u00c9TARO\",                       \"QUINTANA ROO\", \"SAN LUIS POTOS\\u00cd\", \"SINALOA\", \"SONORA\",                       \"TABASCO\", \"TAMAULIPAS\", \"TLAXCALA\", \"VERACRUZ DE IGNACIO DE LA LLAVE\",                        \"YUCAT\\u00c1N\", \"ZACATECAS\"),          #Si quieres que los resultados salgan por entidad = TRUE o ya agregados = FALSE     group_by_entidad   = TRUE,          #Selecciona esas entidades a qué tipo de entidad refieren: Unidad Médica, Residencia, Nacimiento     entidad_tipo       = \"Nacimiento\", #c(\"Unidad Medica\", \"Residencia\", \"Nacimiento\"),          #Selecciona la fecha para la base de datos: Síntomas, Ingreso, Defunción     fecha_tipo         = \"Ingreso\",          #Selecciona todas las variables de clasificación que deseas agregar:     tipo_clasificacion = c(\"Sospechosos\",\"Confirmados COVID\", \"Negativo a COVID\", \"Inválido\",                             \"No realizado\"),          #Selecciona si deseas agrupar por la variable tipo_clasificacion     group_by_tipo_clasificacion = TRUE,          #Selecciona todos los pacientes quieres incluir:     tipo_paciente       = c(\"AMBULATORIO\", \"HOSPITALIZADO\", \"NO ESPECIFICADO\"),          #Selecciona si agrupar por tipo de paciente     group_by_tipo_paciente = TRUE,          #Selecciona todas las opciones de Unidad de Cuidado Intensivo del paciente:     tipo_uci      = c(\"SI\",\"NO\",\"NO APLICA\",\"SE IGNORA\",\"NO ESPECIFICADO\"),          #Selecciona si agrupar por tipo de unidad     group_by_tipo_uci  = TRUE,          #Selecciona los sectores del sistema de salud a incluir     tipo_sector   = c(\"CRUZ ROJA\", \"DIF\", \"ESTATAL\", \"IMSS\", \"IMSS-BIENESTAR\", \"ISSSTE\",                        \"MUNICIPAL\", \"PEMEX\", \"PRIVADA\", \"SEDENA\", \"SEMAR\", \"SSA\",                        \"UNIVERSITARIO\",\"NO ESPECIFICADO\"),          #Selecciona si deseas agrupar por tipo de sector     group_by_tipo_sector = FALSE,          #Selecciona si deseas sólo los que tuvieron defunción     defunciones   = TRUE,          #Selecciona los grupos de edad que deseas incluir en rango     edad_cut      = c(20, 40, 60), #Edades 20-40 y 40-60          #Selecciona si devolver el objeto como tibble     as_tibble     = TRUE,          #Selecciona si rellenar los conteos (n) con ceros cuando no haya observaciones.     fill_zeros    = TRUE,          #Nombre para llamarle en el objeto lista que regresa     list_name     = \"Ejemplo defunciones\",          #Agrupa los resultados además por estado de diabetes y sexo     .grouping_vars = c(\"DIABETES\", \"SEXO\")) datos_covid$`Ejemplo defunciones` |> head() #> # A tibble: 6 × 14 #>   FECHA_INGRESO       DIABETES  SEXO EDAD_…¹ ENTID…² CLASI…³ TIPO_…⁴   UCI     n #>   <dttm>                 <int> <int> <fct>   <chr>     <dbl>   <dbl> <dbl> <int> #> 1 2021-07-01 00:00:00        2     2 (20,40] 03            3       2     2     1 #> 2 2021-07-03 00:00:00        2     2 (20,40] 02            7       2     1     1 #> 3 2021-07-03 00:00:00        2     2 (40,60] 03            3       2     2     1 #> 4 2021-07-03 00:00:00        2     2 (40,60] 26            3       2     2     1 #> 5 2021-07-03 00:00:00       98     2 (40,60] 03            3       2     2     1 #> 6 2021-07-04 00:00:00        2     2 (40,60] 02            3       2     2     1 #> # … with 5 more variables: ENTIDAD_FEDERATIVA <chr>, ABREVIATURA <chr>, #> #   `CLASIFICACI\\032N` <chr>, DESCRIPCION_TIPO_PACIENTE <chr>, #> #   DESCRIPCION_TIPO_UCI <chr>, and abbreviated variable names ¹​EDAD_CAT, #> #   ²​ENTIDAD_NAC, ³​CLASIFICACION_FINAL, ⁴​TIPO_PACIENTE"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"número-de-pruebas","dir":"Articles","previous_headings":"Datos Abiertos de la Dirección General de Epidemiología","what":"Número de pruebas","title":"Introducción a covidmx","text":"Para calcular el número de pruebas los argumentos son los mismos que la función de casos con el agregado de que tipo_prueba es un vector donde se seleccionan las pruebas considerar (Antígeno o PCR) y group_by_tipo_prueba agrupa los resultados por tipo de prueba","code":"datos_covid <- datos_covid |>    numero_pruebas(entidades = c(\"BAJA CALIFORNIA\",\"BAJA CALIFORNIA SUR\"),                  tipo_prueba = c(\"Antigeno\", \"PCR\"),                  group_by_tipo_prueba = TRUE)  datos_covid$numero_pruebas |> head() #> # A tibble: 6 × 6 #>   FECHA_SINTOMAS      ENTIDAD_UM TIPO_PRUEBA     n ENTIDAD_FEDERATIVA  ABREVIA…¹ #>   <dttm>              <chr>      <chr>       <int> <chr>               <chr>     #> 1 2021-07-01 00:00:00 02         ANTIGENO      125 BAJA CALIFORNIA     BC        #> 2 2021-07-01 00:00:00 02         PCR            21 BAJA CALIFORNIA     BC        #> 3 2021-07-01 00:00:00 03         ANTIGENO      479 BAJA CALIFORNIA SUR BS        #> 4 2021-07-01 00:00:00 03         PCR            69 BAJA CALIFORNIA SUR BS        #> 5 2021-07-02 00:00:00 02         ANTIGENO      143 BAJA CALIFORNIA     BC        #> 6 2021-07-02 00:00:00 02         PCR            36 BAJA CALIFORNIA     BC        #> # … with abbreviated variable name ¹​ABREVIATURA datos_covid$numero_pruebas |>    plot_covid(facet_ncol = 2, date_break_format = \"1 month\") #> ! `df_variable` no fue especificada. Usaremos la columna n #> ! `df_covariates` no fue especificada. Usaremos `TIPO_PRUEBA and ENTIDAD_FEDERATIVA`"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"positividad","dir":"Articles","previous_headings":"Datos Abiertos de la Dirección General de Epidemiología","what":"Positividad","title":"Introducción a covidmx","text":"Para calcular la positividad la única forma actual es con un tibble. Los argumentos son los mismos que la función de casos con el agregado de que tipo_prueba es un vector donde se seleccionan las pruebas considerar (Antígeno o PCR) y group_by_tipo_prueba agrupa los resultados por tipo de prueba. La variable remove_inconclusive es una booleana (default TRUE) que elimina del denominador de la positividad las pruebas sin resultado o con resultado concluyente. Nota Positividad es la variable más lenta de calcular por ahora. Ten paciencia","code":"datos_covid <- datos_covid |>    positividad(entidades = c(\"BAJA CALIFORNIA\",\"BAJA CALIFORNIA SUR\"),                  tipo_prueba = c(\"Antigeno\", \"PCR\"),                  group_by_tipo_prueba = TRUE)  datos_covid$positividad |> head() #> # A tibble: 6 × 8 #> # Groups:   FECHA_SINTOMAS, ENTIDAD_UM, TIPO_PRUEBA, ENTIDAD_FEDERATIVA, #> #   ABREVIATURA [6] #>   Positivi…¹ FECHA_SINTOMAS      ENTID…² TIPO_…³ ENTID…⁴ ABREV…⁵ n_pru…⁶ n_pos…⁷ #>        <dbl> <dttm>              <chr>   <chr>   <chr>   <chr>     <int>   <int> #> 1      0.5   2021-07-01 00:00:00 02      PCR     BAJA C… BC           20      10 #> 2      0.594 2021-07-01 00:00:00 03      PCR     BAJA C… BS           64      38 #> 3      0.5   2021-07-02 00:00:00 02      PCR     BAJA C… BC           34      17 #> 4      0.519 2021-07-02 00:00:00 03      PCR     BAJA C… BS           52      27 #> 5      0.517 2021-07-03 00:00:00 02      PCR     BAJA C… BC           29      15 #> 6      0.755 2021-07-03 00:00:00 03      PCR     BAJA C… BS           53      40 #> # … with abbreviated variable names ¹​Positividad, ²​ENTIDAD_UM, ³​TIPO_PRUEBA, #> #   ⁴​ENTIDAD_FEDERATIVA, ⁵​ABREVIATURA, ⁶​n_pruebas, ⁷​n_positivos datos_covid$positividad |>    plot_covid(facet_ncol = 2,               facet_scale = \"fixed\",              type = \"spline\",              df_variable = \"Positividad\",              date_break_format = \"7 days\",              date_labels_format = \"%d/%m/%Y\",              df_covariates = c(\"TIPO_PRUEBA\", \"ENTIDAD_FEDERATIVA\"))"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"case-hospitalization-rate","dir":"Articles","previous_headings":"Datos Abiertos de la Dirección General de Epidemiología","what":"Case Hospitalization Rate","title":"Introducción a covidmx","text":"El chr se define como el total de casos confirmados que terminaron hospitalizados entre el total de confirmados: \\[ \\textrm{CHR} = \\frac{\\text{Hospitalizados Confirmados}}{\\text{Todos los confirmados}} \\] lo puedes calcular con chr: Las variables para agrupar son casi las mismas que en casos. Por ejemplo si queremos agrupar el chr en distintas categorías de edad nivel nacional:","code":"datos_covid <- datos_covid |> chr() #> # A tibble: 6 × 5 #>   FECHA_SINTOMAS      ENTIDAD_UM ENTIDAD_FEDERATIVA  ABREVIATURA CASE HOSPITAL…¹ #>   <dttm>              <chr>      <chr>               <chr>                 <dbl> #> 1 2021-07-01 00:00:00 02         BAJA CALIFORNIA     BC                   0.25   #> 2 2021-07-01 00:00:00 03         BAJA CALIFORNIA SUR BS                   0.183  #> 3 2021-07-02 00:00:00 02         BAJA CALIFORNIA     BC                   0.355  #> 4 2021-07-02 00:00:00 03         BAJA CALIFORNIA SUR BS                   0.0787 #> 5 2021-07-03 00:00:00 02         BAJA CALIFORNIA     BC                   0.0882 #> 6 2021-07-03 00:00:00 03         BAJA CALIFORNIA SUR BS                   0.122  #> # … with abbreviated variable name ¹​`CASE HOSPITALIZATION RATE` datos_covid <- datos_covid |>    chr(     group_by_entidad = FALSE,     edad_cut  = c(0, 20, 50, Inf),     list_name = \"CHR_edad_nacional\"   )   datos_covid |>   plot_covid(type = \"line\",               facet_ncol = 4,               date_break_format = \"7 days\",              date_labels_format = \"%d/%m/%Y\",              df_name = \"CHR_edad_nacional\")"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"case-fatality-rate","dir":"Articles","previous_headings":"Datos Abiertos de la Dirección General de Epidemiología","what":"Case Fatality Rate","title":"Introducción a covidmx","text":"El cfr se define como el total de casos confirmados que terminaron muertos: \\[ \\textrm{CFR} = \\frac{\\text{Defunciones Confirmadas}}{\\text{Todos los confirmados}} \\] lo puedes calcular con cfr: Las variables para agrupar son casi las mismas que en casos. Por ejemplo si queremos agrupar el cfr en distintas categorías de edad nivel nacional:  Podemos también calcular la mortalidad dentro de los hospitalizados y ambulatorios:","code":"datos_covid <- datos_covid |> cfr() #> # A tibble: 6 × 5 #>   FECHA_SINTOMAS      ENTIDAD_UM ENTIDAD_FEDERATIVA  ABREVIATURA CASE FATALITY…¹ #>   <dttm>              <chr>      <chr>               <chr>                 <dbl> #> 1 2021-07-01 00:00:00 02         BAJA CALIFORNIA     BC                   0.125  #> 2 2021-07-01 00:00:00 03         BAJA CALIFORNIA SUR BS                   0.0935 #> 3 2021-07-02 00:00:00 02         BAJA CALIFORNIA     BC                   0.0645 #> 4 2021-07-02 00:00:00 03         BAJA CALIFORNIA SUR BS                   0.0281 #> 5 2021-07-03 00:00:00 02         BAJA CALIFORNIA     BC                   0.0588 #> 6 2021-07-03 00:00:00 03         BAJA CALIFORNIA SUR BS                   0.0699 #> # … with abbreviated variable name ¹​`CASE FATALITY RATE` datos_covid <- datos_covid |>    cfr(entidades = c(\"BAJA CALIFORNIA\", \"BAJA CALIFORNIA SUR\"),     group_by_entidad = TRUE,     list_name = \"CFR_BC\"   )   datos_covid$CFR_BC |>   plot_covid(type = \"line\",               facet_ncol = 2,              date_break_format = \"7 days\",              date_labels_format = \"%d/%m/%Y\") datos_covid <- datos_covid |>    cfr(     tipo_paciente = \"HOSPITALIZADO\",     group_by_entidad       = FALSE,     list_name = \"CFR_HOSPITALIZADOS\"   )   datos_covid |>   plot_covid(df_name = \"CFR_HOSPITALIZADOS\",               type = \"line\",               facet_ncol = 2,              date_break_format = \"7 days\",              date_labels_format = \"%d/%m/%Y\",              df_variable = \"CASE FATALITY RATE\")"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"número-efectivo-de-reproducción","dir":"Articles","previous_headings":"Datos Abiertos de la Dirección General de Epidemiología","what":"Número efectivo de reproducción","title":"Introducción a covidmx","text":"El número efectivo de reproducción se estima mediante la función EpiEstim::estimate_R para la cual es necesario especificar el método y el intervalo serial como en este ejemplo. Podemos estimar el número nivel nacional partir de 2022: O bien por entidad sólo con los confirmados covid:","code":"datos_covid <- datos_covid |>    estima_rt(entidades = \"BAJA CALIFORNIA\",             min_date  = as.Date(\"2021/07/01\", format = \"%Y/%m/%d\")) #> # A tibble: 6 × 17 #>   ENTIDA…¹ ENTID…² ABREV…³ t_start t_end Mean(…⁴ Std(R…⁵ Quant…⁶ Quant…⁷ Quant…⁸ #>   <chr>    <chr>   <chr>     <dbl> <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #> 1 02       BAJA C… BC            2     8    1.29  0.0359   1.22    1.23     1.27 #> 2 02       BAJA C… BC            3     9    1.16  0.0320   1.10    1.11     1.14 #> 3 02       BAJA C… BC            4    10    1.10  0.0300   1.04    1.05     1.08 #> 4 02       BAJA C… BC            5    11    1.07  0.0289   1.01    1.02     1.05 #> 5 02       BAJA C… BC            6    12    1.05  0.0283   0.994   1.00     1.03 #> 6 02       BAJA C… BC            7    13    1.04  0.0279   0.989   0.997    1.02 #> # … with 7 more variables: `Median(R)` <dbl>, `Quantile.0.75(R)` <dbl>, #> #   `Quantile.0.95(R)` <dbl>, `Quantile.0.975(R)` <dbl>, #> #   FECHA_SINTOMAS_start <dttm>, FECHA_SINTOMAS_end <dttm>, #> #   FECHA_SINTOMAS <dttm>, and abbreviated variable names ¹​ENTIDAD_UM, #> #   ²​ENTIDAD_FEDERATIVA, ³​ABREVIATURA, ⁴​`Mean(R)`, ⁵​`Std(R)`, #> #   ⁶​`Quantile.0.025(R)`, ⁷​`Quantile.0.05(R)`, ⁸​`Quantile.0.25(R)` datos_covid <- datos_covid |>    estima_rt(tipo_clasificacion = \"Confirmados COVID\",      list_name = \"RT_confirmados_COVID\",      min_date  = as.Date(\"2021/07/01\", format = \"%Y/%m/%d\")) #> Warning in estimate_R_func(incid = incid, method = method, si_sample = si_sample, : You're estimating R too early in the epidemic to get the desired #>             posterior CV.  #> Warning in estimate_R_func(incid = incid, method = method, si_sample = si_sample, : You're estimating R too early in the epidemic to get the desired #>             posterior CV.  #> Warning in estimate_R_func(incid = incid, method = method, si_sample = si_sample, : You're estimating R too early in the epidemic to get the desired #>             posterior CV.  #> Warning in estimate_R_func(incid = incid, method = method, si_sample = si_sample, : You're estimating R too early in the epidemic to get the desired #>             posterior CV.  #> Warning in estimate_R_func(incid = incid, method = method, si_sample = si_sample, : You're estimating R too early in the epidemic to get the desired #>             posterior CV.  #> Warning in estimate_R_func(incid = incid, method = method, si_sample = si_sample, : You're estimating R too early in the epidemic to get the desired #>             posterior CV.  #> Warning in estimate_R_func(incid = incid, method = method, si_sample = si_sample, : You're estimating R too early in the epidemic to get the desired #>             posterior CV.  #> Warning in estimate_R_func(incid = incid, method = method, si_sample = si_sample, : You're estimating R too early in the epidemic to get the desired #>             posterior CV.  #> Warning in estimate_R_func(incid = incid, method = method, si_sample = si_sample, : You're estimating R too early in the epidemic to get the desired #>             posterior CV.  #> Warning in estimate_R_func(incid = incid, method = method, si_sample = si_sample, : You're estimating R too early in the epidemic to get the desired #>             posterior CV.  #> Warning in estimate_R_func(incid = incid, method = method, si_sample = si_sample, : You're estimating R too early in the epidemic to get the desired #>             posterior CV.  #> Warning in estimate_R_func(incid = incid, method = method, si_sample = si_sample, : You're estimating R too early in the epidemic to get the desired #>             posterior CV.  #> Warning in estimate_R_func(incid = incid, method = method, si_sample = si_sample, : You're estimating R too early in the epidemic to get the desired #>             posterior CV.  #> Warning in estimate_R_func(incid = incid, method = method, si_sample = si_sample, : You're estimating R too early in the epidemic to get the desired #>             posterior CV.  #> Warning in estimate_R_func(incid = incid, method = method, si_sample = si_sample, : You're estimating R too early in the epidemic to get the desired #>             posterior CV.  #> Warning in estimate_R_func(incid = incid, method = method, si_sample = si_sample, : You're estimating R too early in the epidemic to get the desired #>             posterior CV.  #> Warning in estimate_R_func(incid = incid, method = method, si_sample = si_sample, : You're estimating R too early in the epidemic to get the desired #>             posterior CV.  #> Warning in estimate_R_func(incid = incid, method = method, si_sample = si_sample, : You're estimating R too early in the epidemic to get the desired #>             posterior CV.  #> Warning in estimate_R_func(incid = incid, method = method, si_sample = si_sample, : You're estimating R too early in the epidemic to get the desired #>             posterior CV.  #> Warning in estimate_R_func(incid = incid, method = method, si_sample = si_sample, : You're estimating R too early in the epidemic to get the desired #>             posterior CV.  #> Warning in estimate_R_func(incid = incid, method = method, si_sample = si_sample, : You're estimating R too early in the epidemic to get the desired #>             posterior CV.  #> Warning in estimate_R_func(incid = incid, method = method, si_sample = si_sample, : You're estimating R too early in the epidemic to get the desired #>             posterior CV.  #> Warning in estimate_R_func(incid = incid, method = method, si_sample = si_sample, : You're estimating R too early in the epidemic to get the desired #>             posterior CV.  datos_covid$RT_confirmados_COVID |>   plot_covid(df_date_index = \"FECHA_SINTOMAS\",               df_variable = \"Mean(R)\",              df_covariates = \"ENTIDAD_FEDERATIVA\",              date_break_format = \"7 days\",              date_labels_format = \"%d/%m/%Y\")"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"desconexión-de-duckdb","dir":"Articles","previous_headings":"Datos Abiertos de la Dirección General de Epidemiología","what":"Desconexión de duckdb","title":"Introducción a covidmx","text":"Una vez que terminaste de trabajar con la base original en duckdb deconecta el pointer haciendo:","code":"datos_covid$disconnect() #> ✔ Desconectado"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"datos-de-variantes-gisaid","dir":"Articles","previous_headings":"","what":"Datos de variantes (GISAID)","title":"Introducción a covidmx","text":"Para descargar las variantes reportadas por la publicación diaria en Github del reporte nacional en RodrigoZepeda/VariantesCovid partir de las variantes de GISAID puedes hacer: Los datos se ven así: Por default baja nacional pero también puedes usar “cdmx”: En este caso, la descarga también es inteligente y necesitas poner force_download = TRUE si ha pasado menos de un día de tu última descarga (almacenada mediante pins en cache) y quieres volver bajar los datos. Puedes graficarlos con geom_stream dentro de la librería ggstream:  olvides citar GISAID así como la publicación diaria en RodrigoZepeda/VariantesCovid si las usas.","code":"variantes_covid <- descarga_datos_variantes_GISAID() variantes_covid |> head() #> # A tibble: 6 × 7 #>   variant     semana   ano     n  freq Actualizacion       Fuente                #>   <chr>        <int> <int> <int> <dbl> <dttm>              <chr>                 #> 1 VOI Epsilon     28  2020     1     1 2022-09-06 03:16:10 GISAID: https://www.… #> 2 VOI Epsilon     38  2020     1     1 2022-09-06 03:16:10 GISAID: https://www.… #> 3 VOC Delta       39  2020     2     1 2022-09-06 03:16:10 GISAID: https://www.… #> 4 VOI Epsilon     46  2020     1     1 2022-09-06 03:16:10 GISAID: https://www.… #> 5 VOI Epsilon     47  2020     2     1 2022-09-06 03:16:10 GISAID: https://www.… #> 6 VOI Epsilon     48  2020     5     1 2022-09-06 03:16:10 GISAID: https://www.… variantes_covid <- descarga_datos_variantes_GISAID(\"cdmx\") library(ggplot2)  #Pasamos año y semana epidemiológica a fecha variantes_covid <- variantes_covid |>   left_join(     data.frame(fecha = seq(as.Date(\"2020/01/03\", format = \"%Y/%m/%d\"), as.Date(Sys.time()),                            by = \"7 days\")) |>       mutate(ano    = lubridate::epiyear(fecha)) |>       mutate(semana = lubridate::epiweek(fecha))     ) #> Joining, by = c(\"semana\", \"ano\")  #Graficamos nvariantes <- length(unique(variantes_covid$variant))  ggplot(variantes_covid) +    ggstream::geom_stream(aes(x = fecha, y = n, fill = variant)) +   theme_void() +   theme(     legend.position = \"bottom\",     axis.text.x     = element_text(angle = 90, hjust = 1),     axis.line.x     = element_line(),     axis.ticks.x    = element_line()   ) +   scale_x_date(date_breaks = \"3 months\", date_labels = \"%b/%Y\") +   scale_fill_manual(\"Variante\", values = MetBrewer::met.brewer(\"Cross\", n =  nvariantes)) +   ggtitle(\"Variantes de COVID-19 en México\")"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"datos-de-ocupación-hospitalaria-red-irag","dir":"Articles","previous_headings":"","what":"Datos de ocupación hospitalaria (Red IRAG)","title":"Introducción a covidmx","text":"Puedes descargar los datos de la Red IRAG de ocupación hospitalaria nivel estatal o nivel unidad médica mediante descarga_datos_red_irag. Estos se obtienen de la publicación diaria en RodrigoZepeda/CapacidadHospitalariaMX. Los cuales se ven así:  O bien por unidad médica: que se ven así: En este caso, la descarga también es inteligente y necesitas poner force_download = TRUE si ha pasado menos de un día de tu última descarga (almacenada mediante pins en cache) y quieres volver bajar los datos. olvides citar RED IRAG así como la publicación diaria en RodrigoZepeda/CapacidadHospitalariaMX si las usas.","code":"estatales <- descarga_datos_red_irag() estatales |> plot_covid(df_covariates = \"Estado\") #> ! `df_variable` no fue especificada. Usaremos la columna Hospitalizados (%) unidad_medica <- descarga_datos_red_irag(nivel = \"Unidad Médica\") unidad_medica |> head() #> # A tibble: 6 × 9 #>   `Unidad médica`        Estado Insti…¹ CLUES Hospi…² Venti…³ UCI y…⁴ Fecha      #>   <chr>                  <chr>  <chr>   <chr>   <dbl>   <dbl>   <dbl> <date>     #> 1 Hospital Regional de … México SSA/CC  MCSS…     100      17      33 2020-04-01 #> 2 Hospital Juárez de Mé… Ciuda… SSA/CC  DFSS…     100      89      89 2020-04-01 #> 3 Instituto Nacional de… Ciuda… SSA/CC  DFSS…     100       0       0 2020-04-01 #> 4 Instituto Nacional de… Ciuda… SSA/CC  DFSS…     100      94      94 2020-04-01 #> 5 Instituto Nacional de… Ciuda… SSA/CC  DFSS…     100      50      50 2020-04-01 #> 6 Instituto Nacional de… Ciuda… SSA/CC  DFSS…     100      10      10 2020-04-01 #> # … with 1 more variable: Actualizacion <dttm>, and abbreviated variable names #> #   ¹​Institución, ²​`Hospitalizados (%)`, ³​`Ventilación (%)`, #> #   ⁴​`UCI y Ventilación (%)`"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"gráficas","dir":"Articles","previous_headings":"","what":"Gráficas","title":"Introducción a covidmx","text":"Para graficar puedes usar la función plot_covid por default grafica lo que està en datos_covid$casos y establecer cada cuándo hacer los cortes de fechas con date_break_format  pero puedes pedir otra con el eje x más limpio:  Para visualizar un suavizamiento con splines cambia el type y dale las opciones que darías geom_spline:  Puedes visualizar hasta dos covariables la vez con df_covariates y decirle cuál graficar con df_variable:","code":"datos_covid |> plot_covid(date_break_format = \"1 week\") #> ! `df_variable` no fue especificada. Usaremos la columna n #> ! `df_covariates` no fue especificada. Usaremos `ENTIDAD_FEDERATIVA` datos_covid |> plot_covid(\"Todos (nacional)\",                             date_break_format = \"1 week\",                            date_labels_format = \"%m/%y\") #> ! `df_variable` no fue especificada. Usaremos la columna n #> ! `df_covariates` no fue especificada. Usaremos `` datos_covid |>    plot_covid(\"Todos (nacional)\", type = \"spline\", spar = 0.5, date_break_format = \"1 week\") #> ! `df_variable` no fue especificada. Usaremos la columna n #> ! `df_covariates` no fue especificada. Usaremos `` datos_covid |>    plot_covid(\"Ejemplo defunciones\",               df_variable = \"n\",               df_covariates = c(\"SEXO\",\"ENTIDAD_FEDERATIVA\"),              date_break_format = \"3 weeks\",              type = \"area\")"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"desconexión","dir":"Articles","previous_headings":"","what":"Desconexión","title":"Introducción a covidmx","text":"olvides, cuando termines de usar duckdb desconectarte:","code":"datos_covid$disconnect() #> ✔ Desconectado"},{"path":"https://rodrigozepeda.github.io/covidmx/articles/covidmx.html","id":"información-adicional","dir":"Articles","previous_headings":"","what":"Información adicional","title":"Introducción a covidmx","text":"","code":"sessioninfo::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.2.0 (2022-04-22) #>  os       macOS Big Sur/Monterey 10.16 #>  system   x86_64, darwin17.0 #>  ui       X11 #>  language es #>  collate  en_US.UTF-8 #>  ctype    en_US.UTF-8 #>  tz       America/Mexico_City #>  date     2022-09-08 #>  pandoc   2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package         * version    date (UTC) lib source #>  assertthat        0.2.1      2019-03-21 [2] CRAN (R 4.2.0) #>  bit               4.0.4      2020-08-04 [2] CRAN (R 4.2.0) #>  bit64             4.0.5      2020-08-30 [2] CRAN (R 4.2.0) #>  bitops            1.0-7      2021-04-24 [2] CRAN (R 4.2.0) #>  blob              1.2.3      2022-04-10 [2] CRAN (R 4.2.0) #>  bslib             0.4.0      2022-07-16 [2] CRAN (R 4.2.0) #>  cachem            1.0.6      2021-08-19 [2] CRAN (R 4.2.0) #>  cellranger        1.1.0      2016-07-27 [2] CRAN (R 4.2.0) #>  cli               3.3.0      2022-04-25 [2] CRAN (R 4.2.0) #>  coarseDataTools   0.6-6      2021-12-09 [2] CRAN (R 4.2.0) #>  coda              0.19-4     2020-09-30 [2] CRAN (R 4.2.0) #>  colorspace        2.0-3      2022-02-21 [2] CRAN (R 4.2.0) #>  covidmx         * 0.7.1.0000 2022-09-09 [1] local #>  crayon            1.5.1      2022-03-26 [2] CRAN (R 4.2.0) #>  curl              4.3.2      2021-06-23 [2] CRAN (R 4.2.0) #>  DBI               1.1.3      2022-06-18 [2] CRAN (R 4.2.0) #>  dbplyr            2.2.1      2022-06-27 [2] CRAN (R 4.2.0) #>  desc              1.4.1      2022-03-06 [2] CRAN (R 4.2.0) #>  digest            0.6.29     2021-12-01 [2] CRAN (R 4.2.0) #>  dplyr           * 1.0.10     2022-09-01 [2] CRAN (R 4.2.0) #>  duckdb            0.5.0      2022-09-05 [2] CRAN (R 4.2.0) #>  ellipsis          0.3.2      2021-04-29 [2] CRAN (R 4.2.0) #>  EpiEstim          2.2-4      2021-01-07 [2] CRAN (R 4.2.0) #>  evaluate          0.16       2022-08-09 [2] CRAN (R 4.2.0) #>  fansi             1.0.3      2022-03-24 [2] CRAN (R 4.2.0) #>  farver            2.1.1      2022-07-06 [2] CRAN (R 4.2.0) #>  fastmap           1.1.0      2021-01-25 [2] CRAN (R 4.2.0) #>  fitdistrplus      1.1-8      2022-03-10 [2] CRAN (R 4.2.0) #>  forcats           0.5.2      2022-08-19 [2] CRAN (R 4.2.0) #>  fs                1.5.2      2021-12-08 [2] CRAN (R 4.2.0) #>  generics          0.1.3      2022-07-05 [2] CRAN (R 4.2.0) #>  ggforce           0.3.4      2022-08-18 [2] CRAN (R 4.2.0) #>  ggformula         0.10.2     2022-09-01 [2] CRAN (R 4.2.0) #>  ggplot2         * 3.3.6      2022-05-03 [2] CRAN (R 4.2.0) #>  ggridges          0.5.3      2021-01-08 [2] CRAN (R 4.2.0) #>  ggstance          0.3.5      2020-12-17 [2] CRAN (R 4.2.0) #>  ggstream          0.1.0      2021-05-06 [2] CRAN (R 4.2.0) #>  glue              1.6.2      2022-02-24 [2] CRAN (R 4.2.0) #>  gridExtra         2.3        2017-09-09 [2] CRAN (R 4.2.0) #>  gtable            0.3.1      2022-09-01 [2] CRAN (R 4.2.0) #>  haven             2.5.1      2022-08-22 [2] CRAN (R 4.2.0) #>  highr             0.9        2021-04-16 [2] CRAN (R 4.2.0) #>  hms               1.1.2      2022-08-19 [2] CRAN (R 4.2.0) #>  htmltools         0.5.3      2022-07-18 [2] CRAN (R 4.2.0) #>  httr              1.4.4      2022-08-17 [2] CRAN (R 4.2.0) #>  incidence         1.7.3      2020-11-04 [2] CRAN (R 4.2.0) #>  jquerylib         0.1.4      2021-04-26 [2] CRAN (R 4.2.0) #>  jsonlite          1.8.0      2022-02-22 [2] CRAN (R 4.2.0) #>  knitr             1.40       2022-08-24 [2] CRAN (R 4.2.0) #>  labeling          0.4.2      2020-10-20 [2] CRAN (R 4.2.0) #>  labelled          2.9.1      2022-05-05 [2] CRAN (R 4.2.0) #>  lattice           0.20-45    2021-09-22 [2] CRAN (R 4.2.0) #>  lifecycle         1.0.1      2021-09-24 [2] CRAN (R 4.2.0) #>  lubridate         1.8.0      2021-10-07 [2] CRAN (R 4.2.0) #>  magrittr          2.0.3      2022-03-30 [2] CRAN (R 4.2.0) #>  MASS              7.3-58.1   2022-08-03 [2] CRAN (R 4.2.0) #>  Matrix            1.4-1      2022-03-23 [2] CRAN (R 4.2.0) #>  MatrixModels      0.5-0      2021-03-02 [2] CRAN (R 4.2.0) #>  mcmc              0.9-7      2020-03-21 [2] CRAN (R 4.2.0) #>  MCMCpack          1.6-3      2022-04-13 [2] CRAN (R 4.2.0) #>  memoise           2.0.1      2021-11-26 [2] CRAN (R 4.2.0) #>  MetBrewer         0.2.0      2022-03-21 [2] CRAN (R 4.2.0) #>  mosaicCore        0.9.2      2022-08-26 [2] CRAN (R 4.2.0) #>  munsell           0.5.0      2018-06-12 [2] CRAN (R 4.2.0) #>  pillar            1.8.1      2022-08-19 [2] CRAN (R 4.2.0) #>  pins              1.0.2      2022-08-23 [2] CRAN (R 4.2.0) #>  pkgconfig         2.0.3      2019-09-22 [2] CRAN (R 4.2.0) #>  pkgdown           2.0.6      2022-07-16 [2] CRAN (R 4.2.0) #>  plyr              1.8.7      2022-03-24 [2] CRAN (R 4.2.0) #>  polyclip          1.10-0     2019-03-14 [2] CRAN (R 4.2.0) #>  purrr             0.3.4      2020-04-17 [2] CRAN (R 4.2.0) #>  quantreg          5.94       2022-07-20 [2] CRAN (R 4.2.0) #>  R6                2.5.1      2021-08-19 [2] CRAN (R 4.2.0) #>  ragg              1.2.2      2022-02-21 [2] CRAN (R 4.2.0) #>  rappdirs          0.3.3      2021-01-31 [2] CRAN (R 4.2.0) #>  Rcpp              1.0.9      2022-07-08 [2] CRAN (R 4.2.0) #>  RCurl             1.98-1.8   2022-07-30 [2] CRAN (R 4.2.0) #>  readr             2.1.2      2022-01-30 [2] CRAN (R 4.2.0) #>  readxl            1.4.1      2022-08-17 [2] CRAN (R 4.2.0) #>  reshape2          1.4.4      2020-04-09 [2] CRAN (R 4.2.0) #>  rlang             1.0.5      2022-08-31 [2] CRAN (R 4.2.0) #>  rmarkdown         2.16       2022-08-24 [2] CRAN (R 4.2.0) #>  rprojroot         2.0.3      2022-04-02 [2] CRAN (R 4.2.0) #>  rstudioapi        0.14       2022-08-22 [2] CRAN (R 4.2.0) #>  sass              0.4.2      2022-07-16 [2] CRAN (R 4.2.0) #>  scales            1.2.1      2022-08-20 [2] CRAN (R 4.2.0) #>  sessioninfo       1.2.2      2021-12-06 [2] CRAN (R 4.2.0) #>  SparseM           1.81       2021-02-18 [2] CRAN (R 4.2.0) #>  stringi           1.7.8      2022-07-11 [2] CRAN (R 4.2.0) #>  stringr           1.4.1      2022-08-20 [2] CRAN (R 4.2.0) #>  survival          3.4-0      2022-08-09 [2] CRAN (R 4.2.0) #>  systemfonts       1.0.4      2022-02-11 [2] CRAN (R 4.2.0) #>  textshaping       0.3.6      2021-10-13 [2] CRAN (R 4.2.0) #>  tibble            3.1.8      2022-07-22 [2] CRAN (R 4.2.0) #>  tidyr             1.2.0      2022-02-01 [2] CRAN (R 4.2.0) #>  tidyselect        1.1.2      2022-02-21 [2] CRAN (R 4.2.0) #>  tweenr            2.0.2      2022-09-06 [2] CRAN (R 4.2.0) #>  tzdb              0.3.0      2022-03-28 [2] CRAN (R 4.2.0) #>  utf8              1.2.2      2021-07-24 [2] CRAN (R 4.2.0) #>  vctrs             0.4.1      2022-04-13 [2] CRAN (R 4.2.0) #>  vroom             1.5.7      2021-11-30 [2] CRAN (R 4.2.0) #>  withr             2.5.0      2022-03-03 [2] CRAN (R 4.2.0) #>  xfun              0.32       2022-08-10 [2] CRAN (R 4.2.0) #>  yaml              2.3.5      2022-02-21 [2] CRAN (R 4.2.0) #>  #>  [1] /private/var/folders/42/2kdf45dd1qz5n7kf9lm8ld9r0000gn/T/RtmpsH30hS/temp_libpath6c6c2718544a #>  [2] /Library/Frameworks/R.framework/Versions/4.2/Resources/library #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://rodrigozepeda.github.io/covidmx/authors.html","id":null,"dir":"","previous_headings":"","what":"Autores","title":"Autores y Citas","text":"Rodrigo Zepeda-Tello. Autor-, mantenedor-. Mauricio Hernandez-Avila. Autor-. Alberto Almuiña. Colaborador-.            Author included zzz fragment Jonah Gabry. Colaborador-.            Author included cmdstanr fragment Rok Češnovar. Colaborador-.            Author included cmdstanr fragment Ben Bales. Colaborador-.            Author included cmdstanr fragment Mitzi Morris. Colaborador-.            Author included cmdstanr fragment Mikhail Popov. Colaborador-.            Author included cmdstanr fragment Mike Lawrence. Colaborador-.            Author included cmdstanr fragment William Michael Landau. Colaborador-.            Author included cmdstanr fragment Jacob Socolar. Colaborador-.            Author included cmdstanr fragment Andrew Johnson. Colaborador-.            Author included cmdstanr fragment Instituto Mexicano del Seguro Social. Titular de los derechos de autor, patrocinador-.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/authors.html","id":"citation","dir":"","previous_headings":"","what":"Cita","title":"Autores y Citas","text":"Zepeda-Tello R, Hernandez-Avila M (2022). covidmx: Herramientas para el analisis de datos de COVID-19 en Mexico. https://github.com/RodrigoZepeda/covidmx, https://rodrigozepeda.github.io/covidmx/.","code":"@Manual{,   title = {covidmx: Herramientas para el analisis de datos de COVID-19 en Mexico},   author = {Rodrigo Zepeda-Tello and Mauricio Hernandez-Avila},   year = {2022},   note = {https://github.com/RodrigoZepeda/covidmx, https://rodrigozepeda.github.io/covidmx/}, }"},{"path":"https://rodrigozepeda.github.io/covidmx/index.html","id":"covidmx-","dir":"","previous_headings":"","what":"Análisis de COVID-19 para México","title":"Análisis de COVID-19 para México","text":"💻 Sitio web: https://rodrigozepeda.github.io/covidmx/ Descarga, etiqueta y analiza los datos abiertos de COVID-19 en México. El propósito de este paquete es hacer la descarga, análisis y graficación de manera rápida para que tú tengas que preocuparte por bajar el archivo tiempo, agrupar funciones o realizar visualizaciones sino en lo importante: analizar la información.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/index.html","id":"instalación","dir":"","previous_headings":"","what":"Instalación","title":"Análisis de COVID-19 para México","text":"","code":"remotes::install_github(\"RodrigoZepeda/covidmx\")"},{"path":"https://rodrigozepeda.github.io/covidmx/index.html","id":"uso","dir":"","previous_headings":"","what":"Uso","title":"Análisis de COVID-19 para México","text":"Puedes descargar la información de variantes de GISAID de la publicación de Github, ocupación hospitalaria de RED IRAG partir del Github y datos abiertos de la SSA todo con los siguientes comandos. El proceso está optimizado mediante duckdb para que puedas realizar queries sobre la base de > 15 millones de personas en segundos. Todas las descargas del paquete son inteligentes y si ha pasado poco tiempo desde tu última descarga te pregunta primero antes de comprometerse descargar de nuevo. Puedes volver leer tu base descargada haciendo: Las funciones principales del paquete son: Gráfica con los casos de SINAVE de los datos abiertos de las 32 entidades cada una de ellas variando por color. Nota olvides citar GISAID, RED IRAG o SSA y las publicaciones asociadas además del paquete.","code":"library(covidmx)  #Datos de variantes (cdmx o nacional) variantes   <- descarga_datos_variantes_GISAID(\"nacional\")  #Datos de ocupación hopsitalaria de Red IRAG ('Estatal' o 'Unidad Médica') ocupacion   <- descarga_datos_red_irag(\"Estatal\")  #Descarga datos abiertos de covid, guarda en duckdb (mi_archivo/de_datos.duckdb)  # y te da una conexión datos_covid <- descarga_datos_abiertos(dbdir = \"mi_archivo/de_datos.duckdb\") datos_covid <- read_datos_abiertos(dbdir = \"mi_archivo/de_datos.duckdb\") #Calcula los casos (totales) por entidad y devuelve un tibble datos_covid <- datos_covid %>% casos()  #Calcula la cantidad de pruebas realizadas datos_covid <- datos_covid %>% numero_pruebas()  #Calcula la positividad datos_covid <- datos_covid %>% positividad()  #Calcula el case fatality rate datos_covid <- datos_covid %>% cfr()  #Calcula el case hospitalization rate datos_covid <- datos_covid %>% chr()  #Estimación del número efectivo de reproducción datos_covid <- datos_covid %>% estima_rt()  #¡Grafica! datos_covid %>% plot_covid()"},{"path":"https://rodrigozepeda.github.io/covidmx/index.html","id":"casos-opciones-de-lectura-de-datos-abiertos","dir":"","previous_headings":"Uso","what":"Casos (opciones de lectura de datos abiertos)","title":"Análisis de COVID-19 para México","text":"Todas las opciones de casos:","code":"datos_covid %>%    casos(     #Lista de entidades que deseas     entidades = c(\"AGUASCALIENTES\", \"BAJA CALIFORNIA\",                    \"BAJA CALIFORNIA SUR\",\"CAMPECHE\", \"CHIAPAS\",                    \"CHIHUAHUA\",\"CIUDAD DE M\\u00c9XICO\",                   \"COAHUILA DE ZARAGOZA\" , \"COLIMA\", \"DURANGO\",                    \"GUANAJUATO\", \"GUERRERO\",\"HIDALGO\", \"JALISCO\",                    \"M\\u00c9XICO\", \"MICHOAC\\u00c1N DE OCAMPO\",                    \"MORELOS\",\"NAYARIT\", \"NUEVO LE\\u00d3N\", \"OAXACA\",                    \"PUEBLA\", \"QUER\\u00c9TARO\", \"QUINTANA ROO\",                    \"SAN LUIS POTOS\\u00cd\", \"SINALOA\", \"SONORA\",                   \"TABASCO\", \"TAMAULIPAS\", \"TLAXCALA\",                    \"VERACRUZ DE IGNACIO DE LA LLAVE\",                    \"YUCAT\\u00c1N\", \"ZACATECAS\"),          #Si quieres que los resultados salgan por entidad = TRUE o ya agregados = FALSE     group_by_entidad    = TRUE,          #Selecciona esas entidades a qué tipo de entidad refieren: Unidad Médica,      #Residencia o Nacimiento     entidad_tipo        = \"Residencia\",           #Selecciona la fecha para la base de datos: Síntomas, Ingreso, Defunción     fecha_tipo          = \"Ingreso\",           #Selecciona todas las variables de clasificación que deseas agregar:     tipo_clasificacion  = c(\"Sospechosos\",\"Confirmados COVID\",                              \"Negativo a COVID\", \"Inválido\",                              \"No realizado\"),          #Selecciona si deseas agrupar por la variable tipo_clasificacion     group_by_tipo_clasificacion = TRUE,          #Selecciona todos los pacientes quieres incluir:     tipo_paciente      = c(\"AMBULATORIO\", \"HOSPITALIZADO\",                             \"NO ESPECIFICADO\"),          #Selecciona si agrupar por tipo de paciente     group_by_tipo_paciente = TRUE,          #Selecciona todas las opciones de Unidad de Cuidado Intensivo     #del paciente:     tipo_uci           = c(\"SI\",\"NO\",\"NO APLICA\",\"SE IGNORA\",                            \"NO ESPECIFICADO\"),          #Selecciona si agrupar por tipo de unidad     group_by_tipo_uci  = TRUE,          #Selecciona los sectores del sistema de salud a incluir     tipo_sector   = c(\"CRUZ ROJA\", \"DIF\", \"ESTATAL\", \"IMSS\",                        \"IMSS-BIENESTAR\", \"ISSSTE\",                        \"MUNICIPAL\", \"PEMEX\", \"PRIVADA\",                        \"SEDENA\", \"SEMAR\", \"SSA\",                        \"UNIVERSITARIO\",\"NO ESPECIFICADO\"),          #Selecciona si deseas agrupar por tipo de sector     group_by_tipo_sector = FALSE,          #Selecciona si deseas sólo los que tuvieron defunción     defunciones   = TRUE,          #Selecciona los grupos de edad que deseas incluir en rango     edad_cut      = c(20, 40, 60), #Edades 20-40 y 40-60          #Selecciona si devolver el objeto como tibble     as_tibble     = TRUE,          #Selecciona si rellenar los conteos (n) con ceros      #cuando no haya observaciones.     fill_zeros    = TRUE,          #Nombre para llamarle en el objeto lista que regresa     list_name     = \"Ejemplo defunciones\",          #Otras variables para agrupar no incluidas     .grouping_vars = c(\"DIABETES\", \"SEXO\"))      #> # A tibble:  #>    FECHA_INGRESO DIABETES  SEXO EDAD_CAT ENTIDAD_RES CLASIFICACION_FINAL #>    <date>           <dbl> <dbl> <chr>    <chr>                     <dbl> #>  1 2020-01-01           2     1 (40,60]  30                            7 #>  2 2020-01-02           2     1 (40,60]  30                            7 #>  3 2020-01-02           2     2 (20,40]  11                            7 #>  4 2020-01-02           2     2 (20,40]  26                            7 #>  5 2020-01-02           2     2 (40,60]  22                            5 #>  6 2020-01-03           1     1 (40,60]  05                            7 #>  7 2020-01-03           1     2 (40,60]  26                            7 #>  8 2020-01-03           1     2 (40,60]  28                            7 #>  9 2020-01-03           2     1 (40,60]  15                            6 #> 10 2020-01-03           2     2 (40,60]  13                            7 #> 11 2020-01-04           2     1 (20,40]  05                            7 #> 12 2020-01-04           2     2 (40,60]  21                            7 #> 13 2020-01-05           1     1 (40,60]  30                            7 #> 14 2020-01-05           1     2 (40,60]  09                            5 #> 15 2020-01-05           2     2 (20,40]  26                            6 #> 16 2020-01-05           2     2 (40,60]  28                            7 #> 17 2020-01-06           1     1 (40,60]  02                            7 #> 18 2020-01-06           1     2 (40,60]  15                            7 #> 19 2020-01-06           2     1 (40,60]  08                            6 #> 20 2020-01-06           2     1 (40,60]  09                            7 #> # … with 8 more variables: TIPO_PACIENTE <dbl>, UCI <dbl>, n <int64>, #> #   ENTIDAD_FEDERATIVA <chr>, ABREVIATURA <chr>, CLASIFICACIÓN <chr>, #> #   DESCRIPCION_TIPO_PACIENTE <chr>, DESCRIPCION_TIPO_UCI <chr>"},{"path":"https://rodrigozepeda.github.io/covidmx/index.html","id":"más-información","dir":"","previous_headings":"","what":"Más información","title":"Análisis de COVID-19 para México","text":"Para ver todas las funciones del paquete ve Primeros Pasos Puedes ver un estudio de caso del paquete para Ciudad de México en este link Puedes ver las preguntas frecuentes acá o bien levantar un issue en Github con el label de question.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/casos.html","id":null,"dir":"Reference","previous_headings":"","what":"Casos de COVID-19 en Mexico — casos","title":"Casos de COVID-19 en Mexico — casos","text":"casos Calcula el numero de casos registrados por fecha agrupando (o sin hacerlo) por diferentes covariables. Por default calcula el total de casos (con y sin prueba positiva)","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/casos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Casos de COVID-19 en Mexico — casos","text":"","code":"casos(   datos_covid,   entidades = c(\"AGUASCALIENTES\", \"BAJA CALIFORNIA\", \"BAJA CALIFORNIA SUR\", \"CAMPECHE\",     \"CHIAPAS\", \"CHIHUAHUA\", \"CIUDAD DE MÉXICO\", \"COAHUILA DE ZARAGOZA\", \"COLIMA\",     \"DURANGO\", \"GUANAJUATO\", \"GUERRERO\", \"HIDALGO\", \"JALISCO\", \"MÉXICO\",     \"MICHOACÁN DE OCAMPO\", \"MORELOS\", \"NAYARIT\", \"NUEVO LEÓN\", \"OAXACA\", \"PUEBLA\",     \"QUERÉTARO\", \"QUINTANA ROO\", \"SAN LUIS POTOSÍ\", \"SINALOA\", \"SONORA\", \"TABASCO\",     \"TAMAULIPAS\", \"TLAXCALA\", \"VERACRUZ DE IGNACIO DE LA LLAVE\", \"YUCATÁN\", \"ZACATECAS\"),   group_by_entidad = TRUE,   entidad_tipo = c(\"Unidad Medica\", \"Residencia\", \"Nacimiento\"),   fecha_tipo = c(\"Sintomas\", \"Ingreso\", \"Defuncion\"),   tipo_clasificacion = c(\"Sospechosos\", \"Confirmados COVID\", \"Negativo a COVID\",     \"Inválido\", \"No realizado\"),   group_by_tipo_clasificacion = FALSE,   tipo_paciente = c(\"AMBULATORIO\", \"HOSPITALIZADO\", \"NO ESPECIFICADO\"),   group_by_tipo_paciente = FALSE,   tipo_uci = c(\"SI\", \"NO\", \"NO APLICA\", \"SE IGNORA\", \"NO ESPECIFICADO\"),   group_by_tipo_uci = FALSE,   tipo_sector = c(\"CRUZ ROJA\", \"DIF\", \"ESTATAL\", \"IMSS\", \"IMSS-BIENESTAR\", \"ISSSTE\",     \"MUNICIPAL\", \"PEMEX\", \"PRIVADA\", \"SEDENA\", \"SEMAR\", \"SSA\", \"UNIVERSITARIO\",     \"NO ESPECIFICADO\"),   group_by_tipo_sector = FALSE,   defunciones = FALSE,   edad_cut = NULL,   as_tibble = TRUE,   fill_zeros = as_tibble,   list_name = \"casos\",   .grouping_vars = c() )"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/casos.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"Casos de COVID-19 en Mexico — casos","text":"datos_covid (obligatorio) Lista de tibbles o duckdbs resultante de descarga_datos_abiertos() o read_datos_abiertos() entidades (opcional)  Vector con las entidades de las unidades medicas analizar. Opciones: AGUASCALIENTES, BAJA CALIFORNIA, BAJA CALIFORNIA SUR, CAMPECHE, CHIAPAS, CHIHUAHUA, CIUDAD DE MEXICO, COAHUILA DE ZARAGOZA , COLIMA, DURANGO, GUANAJUATO, GUERRERO, HIDALGO, JALISCO, MEXICO, MICHOACAN DE OCAMPO, MORELOS,NAYARIT NUEVO LEON, OAXACA ,PUEBLA, QUERETARO,QUINTANA ROO, SAN LUIS POTOSI, SINALOA, SONORA, TABASCO, TAMAULIPAS,TLAXCALA, VERACRUZ DE IGNACIO DE LA LLAVE, YUCATAN, ZACATECAS. group_by_entidad (opcional) TRUE obtiene los casos para cada entidad reportando en cada fecha la entidad y los casos en dicha entidad. FALSE  junta las entidades sumando sus casos en una sola observacion por cada fecha. entidad_tipo (opcional) Indica que se refiere las entidades seleccionadas. Elige una de las opciones: Unidad Medica (entidad de la unidad medica), Nacimiento (entidad de origen del individuo) o Residencia (entidad donde reside el individuo). fecha_tipo (opcional) Selecciona si la fecha que se utiliza es la fecha de Ingreso (si aplica), la fecha de Sintomas o la de Defuncion (si aplica). El default es fecha de Sintomas. tipo_clasificacion (opcional)  Vector con el tipo de clasificaciones (por la prueba) incluir:Sospechosos,Confirmados COVID, Negativo COVID, Inv\\u00e1lido, realizado group_by_tipo_clasificacion (opcional)  Booleana determinando si regresa la base con cada entrada agrupada por tipo_clasificacion (es decir cada fecha se generan tantos observaciones como grupos de tipo de clasificación) en caso TRUE. Si FALSE suma todos los casos del tipo de clasificacion por fecha dando un solo numero por fecha. El defalt es FALSE. tipo_paciente (opcional) Vector con el tipo de pacientes incluir. Opciones: AMBULATORIO, HOSPITALIZADO, ESPECIFICADO. Por default se incluyen todos. group_by_tipo_paciente (opcional) Booleana determinando (caso TRUE) si regresa la base con cada entrada agrupada por tipo_paciente (es decir cada fecha se genera un renglon para AMBULATORIO, un renglon para HOSPITALIZADO, etc) o bien si se suman todos los grupos y cada fecha reporta solo la suma de estos (estilo AMBULATORIO + HOSPITALIZADO segun las categorias de tipo_paciente) El default es FALSE. tipo_uci (opcional)  Vector con el tipo de valores para Unidad de Cuidado Intensivo (UCI) incluir:  SI,,APLICA,SE IGNORA,ESPECIFICADO. Por default se incluyen todos. group_by_tipo_uci (opcional) Booleana. El caso TRUE determina si regresa la base con cada fecha teniendo diferentes renglones uno para cada tipo_uci (es decir cada fecha se generan tantos observaciones como grupos de tipo de UCI) o bien en una sola fecha se suman todos los tipos de UCI (FALSE). El default es FALSE. tipo_sector (opcional) Vector con los sectores del sistema de salud incluir: CRUZ ROJA,DIF,ESTATAL,IMSS,IMSS-BIENESTAR,ISSSTE, MUNICIPAL,PEMEX, PRIVADA,SEDENA,SEMAR,SSA, UNIVERSITARIO,ESPECIFICADO. Por default se incluyen todos. group_by_tipo_sector (opcional) Booleana determina en el caso de TRUE si regresa la base con cada entrada agrupada por tipo_sector (es decir cada fecha tiene una entrada con los del IMSS, una entrada distinta con los de ISSSTE, etc) o bien en caso de FALSE se devuelve una sola entrada por fecha con la suma IMSS + ISSSTE + etc segun los  sectores seleccionados. El default es FALSE. defunciones (opcional)  Booleana si incluir sólo defunciones TRUE o todos FALSE. El default es FALSE. edad_cut (opcional) Vector con secuencia de edades para hacer grupos. Por ejemplo edad_cut = c(0, 10, Inf) arma dos grupos de edad de 0 10 y de 10 infinito o bien edad_cut = c(15, 20) deja sólo los registros entre 15 y 20 años. Por default es NULL y arma grupos etarios. as_tibble (opcional) Regresar como tibble el resultado. En caso de que as_tibble sea FALSE se devuelve como conexion en duckdb. Se recomienda el default (tibble). fill_zeros (opcional) En caso de que el resultado sea un tibble regresa observaciones para todas las combinaciones de variables incluyendo como 0 aquellas fechas cuando se observaron casos. En caso contrario se incluyen las filas donde se observaron casos. list_name (opcional) Asigna un nombre en la lista de datos la base generada .grouping_vars (opcional) Vector de variables adicionales de agrupacion de los conteos. Por ejemplo si se agrega .grouping_vars = 'DIABETES' entonces para cada fecha habra dos conteos de casos uno de los que tienen diabetes y uno de los que .","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/casos.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"Casos de COVID-19 en Mexico — casos","text":"Une la lista de datos_covid una nueva entrada de nombre list_name (default: casos) con una base de datos (tibble o dbConnection) con los resultados agregados. casos - Base de datos generara con los datos agregados (el nombre cambia si se usa list_name). dict - Diccionario de datos dats - Datos originales (conexion duckdb o tibble) disconnect  - Función para desconectarte de duckdb ... - Cualquier otro elemento que ya existiera en datos_covid","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/casos.html","id":"detalles","dir":"Reference","previous_headings":"","what":"Detalles","title":"Casos de COVID-19 en Mexico — casos","text":"La función es un grupo de funciones de dplyr optimizadas para velocidad. Por ejemplo calcular los casos por entidad se hace lo siguiente   es lo mismo que:   Elaboraciones mas complicadas en casos tienen su equivalente en dplyr por ejemplo:   es equivalente ","code":"datos_covid |> casos() library(dplyr) datos_covid$casos <- datos_covid$dats |>     group_by(ENTIDAD_UM, FECHA_SINTOMAS) |>     tally() |>     left_join(datos_covid$dict$ENTIDAD_UM, by = c(\"ENTIDAD_UM\" = \"CLAVE_ENTIDAD\")) datos_covid <- datos_covid |>   casos(     entidad_tipo = \"Residencia\",     entidades = c(\"BAJA CALIFORNIA\", \"BAJA CALIFORNIA SUR\"),     group_by_tipo_clasificacion = FALSE,     tipo_paciente = c(\"AMBULATORIO\", \"HOSPITALIZADO\"),     group_by_tipo_paciente = TRUE,     list_name = \"bajas\"   ) datos_covid$bajas <- datos_covid$dats |>    filter(ENTIDAD_RES == \"02\" | ENTIDAD_RES == \"03\") |> #BC/BCS    filter(TIPO_PACIENTE == 1 | TIPO_PACIENTE == 2) |> #Ambulatorio/Hospitalizado    group_by(FECHA_SINTOMAS, ENTIDAD_RES, TIPO_PACIENTE) |>    tally() |>    left_join(datos_covid$dict$ENTIDAD_RES, by = c(\"ENTIDAD_RES\" = \"CLAVE_ENTIDAD\")) |>    left_join(datos_covid$dict$PACIENTE, by = c(\"TIPO_PACIENTE\" = \"CLAVE\"))"},{"path":[]},{"path":"https://rodrigozepeda.github.io/covidmx/reference/casos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"Casos de COVID-19 en Mexico — casos","text":"","code":"# Para el ejemplo usaremos los datos precargados pero tu puedes # correr el ejemplo descargando informacion mas reciente: # datos_covid <- descarga_datos_abiertos() #Sugerido  datos_covid <- datosabiertos # Datos precargados para el ejemplo  # Casos por entidad datos_covid <- datos_covid |> casos() head(datos_covid$casos) #> # A tibble: 6 × 5 #>   FECHA_SINTOMAS      ENTIDAD_UM     n ENTIDAD_FEDERATIVA  ABREVIATURA #>   <dttm>              <chr>      <int> <chr>               <chr>       #> 1 2021-07-01 00:00:00 02           139 BAJA CALIFORNIA     BC          #> 2 2021-07-01 00:00:00 03           519 BAJA CALIFORNIA SUR BS          #> 3 2021-07-02 00:00:00 02           164 BAJA CALIFORNIA     BC          #> 4 2021-07-02 00:00:00 03           357 BAJA CALIFORNIA SUR BS          #> 5 2021-07-03 00:00:00 02           170 BAJA CALIFORNIA     BC          #> 6 2021-07-03 00:00:00 03           421 BAJA CALIFORNIA SUR BS           # Defunciones por entidad datos_covid <- datos_covid |> casos(defunciones = TRUE, list_name = \"defunciones\") head(datos_covid$defunciones) #> # A tibble: 6 × 5 #>   FECHA_SINTOMAS      ENTIDAD_UM     n ENTIDAD_FEDERATIVA  ABREVIATURA #>   <dttm>              <chr>      <int> <chr>               <chr>       #> 1 2021-07-01 00:00:00 02             3 BAJA CALIFORNIA     BC          #> 2 2021-07-01 00:00:00 03            24 BAJA CALIFORNIA SUR BS          #> 3 2021-07-02 00:00:00 02             4 BAJA CALIFORNIA     BC          #> 4 2021-07-02 00:00:00 03             5 BAJA CALIFORNIA SUR BS          #> 5 2021-07-03 00:00:00 02             4 BAJA CALIFORNIA     BC          #> 6 2021-07-03 00:00:00 03            18 BAJA CALIFORNIA SUR BS           # Hospitalizados por entidad datos_covid <- datos_covid |>   casos(tipo_paciente = \"HOSPITALIZADO\", list_name = \"hospitalizados\") head(datos_covid$hospitalizados) #> # A tibble: 6 × 5 #>   FECHA_SINTOMAS      ENTIDAD_UM     n ENTIDAD_FEDERATIVA  ABREVIATURA #>   <dttm>              <chr>      <int> <chr>               <chr>       #> 1 2021-07-01 00:00:00 02            12 BAJA CALIFORNIA     BC          #> 2 2021-07-01 00:00:00 03            55 BAJA CALIFORNIA SUR BS          #> 3 2021-07-02 00:00:00 02            19 BAJA CALIFORNIA     BC          #> 4 2021-07-02 00:00:00 03            19 BAJA CALIFORNIA SUR BS          #> 5 2021-07-03 00:00:00 02             8 BAJA CALIFORNIA     BC          #> 6 2021-07-03 00:00:00 03            35 BAJA CALIFORNIA SUR BS           # UCI por entidad datos_covid <- datos_covid |> casos(tipo_uci = \"SI\", list_name = \"uci\") head(datos_covid$uci) #> # A tibble: 6 × 5 #>   FECHA_SINTOMAS      ENTIDAD_UM     n ENTIDAD_FEDERATIVA  ABREVIATURA #>   <dttm>              <chr>      <int> <chr>               <chr>       #> 1 2021-07-01 00:00:00 03             6 BAJA CALIFORNIA SUR BS          #> 2 2021-07-02 00:00:00 03             2 BAJA CALIFORNIA SUR BS          #> 3 2021-07-03 00:00:00 02             1 BAJA CALIFORNIA     BC          #> 4 2021-07-03 00:00:00 03             7 BAJA CALIFORNIA SUR BS          #> 5 2021-07-04 00:00:00 02             1 BAJA CALIFORNIA     BC          #> 6 2021-07-05 00:00:00 02             1 BAJA CALIFORNIA     BC           # Solo pacientes IMSS datos_covid <- datos_covid |> casos(tipo_sector = \"IMSS\", list_name = \"imss\") head(datos_covid$imss) #> # A tibble: 6 × 5 #>   FECHA_SINTOMAS      ENTIDAD_UM     n ENTIDAD_FEDERATIVA  ABREVIATURA #>   <dttm>              <chr>      <int> <chr>               <chr>       #> 1 2021-07-01 00:00:00 02           121 BAJA CALIFORNIA     BC          #> 2 2021-07-01 00:00:00 03           360 BAJA CALIFORNIA SUR BS          #> 3 2021-07-02 00:00:00 02           134 BAJA CALIFORNIA     BC          #> 4 2021-07-02 00:00:00 03           258 BAJA CALIFORNIA SUR BS          #> 5 2021-07-03 00:00:00 02           145 BAJA CALIFORNIA     BC          #> 6 2021-07-03 00:00:00 03           252 BAJA CALIFORNIA SUR BS           # Pacientes IMSS y PEMEX separados datos_covid <- datos_covid |> casos(tipo_sector = c(\"IMSS\", \"PEMEX\"), list_name = \"imss_y_pemex\") head(datos_covid$imss_y_pemex) #> # A tibble: 6 × 5 #>   FECHA_SINTOMAS      ENTIDAD_UM     n ENTIDAD_FEDERATIVA  ABREVIATURA #>   <dttm>              <chr>      <int> <chr>               <chr>       #> 1 2021-07-01 00:00:00 02           121 BAJA CALIFORNIA     BC          #> 2 2021-07-01 00:00:00 03           360 BAJA CALIFORNIA SUR BS          #> 3 2021-07-02 00:00:00 02           134 BAJA CALIFORNIA     BC          #> 4 2021-07-02 00:00:00 03           258 BAJA CALIFORNIA SUR BS          #> 5 2021-07-03 00:00:00 02           145 BAJA CALIFORNIA     BC          #> 6 2021-07-03 00:00:00 03           252 BAJA CALIFORNIA SUR BS           # Pacientes IMSS y PEMEX sumados datos_covid <- datos_covid |>   casos(     tipo_sector = c(\"IMSS\", \"PEMEX\"), list_name = \"imss_+_pemex\",     group_by_tipo_sector = TRUE   ) head(datos_covid$`imss_+_pemex`) #> # A tibble: 6 × 7 #>   FECHA_SINTOMAS      ENTIDAD_UM SECTOR     n ENTIDAD_FEDERATIVA ABREV…¹ DESCR…² #>   <dttm>              <chr>       <dbl> <int> <chr>              <chr>   <chr>   #> 1 2021-07-01 00:00:00 02              4   121 BAJA CALIFORNIA    BC      IMSS    #> 2 2021-07-01 00:00:00 03              4   360 BAJA CALIFORNIA S… BS      IMSS    #> 3 2021-07-02 00:00:00 02              4   134 BAJA CALIFORNIA    BC      IMSS    #> 4 2021-07-02 00:00:00 03              4   258 BAJA CALIFORNIA S… BS      IMSS    #> 5 2021-07-03 00:00:00 02              4   145 BAJA CALIFORNIA    BC      IMSS    #> 6 2021-07-03 00:00:00 03              4   252 BAJA CALIFORNIA S… BS      IMSS    #> # … with abbreviated variable names ¹​ABREVIATURA, ²​DESCRIPCION_TIPO_SECTOR  # Solo los de BAJA CALIFORNIA datos_covid <- datos_covid |>   casos(entidades = c(\"BAJA CALIFORNIA\"), list_name = \"BC\") head(datos_covid$BC) #> # A tibble: 6 × 5 #>   FECHA_SINTOMAS      ENTIDAD_UM     n ENTIDAD_FEDERATIVA ABREVIATURA #>   <dttm>              <chr>      <int> <chr>              <chr>       #> 1 2021-07-01 00:00:00 02           139 BAJA CALIFORNIA    BC          #> 2 2021-07-02 00:00:00 02           164 BAJA CALIFORNIA    BC          #> 3 2021-07-03 00:00:00 02           170 BAJA CALIFORNIA    BC          #> 4 2021-07-04 00:00:00 02           213 BAJA CALIFORNIA    BC          #> 5 2021-07-05 00:00:00 02           215 BAJA CALIFORNIA    BC          #> 6 2021-07-06 00:00:00 02           215 BAJA CALIFORNIA    BC           # Solo los de BAJA CALIFORNIA por residencia datos_covid <- datos_covid |>   casos(entidades = c(\"BAJA CALIFORNIA\"), entidad_tipo = \"Residencia\", list_name = \"residencia\") head(datos_covid$residencia) #> # A tibble: 6 × 5 #>   FECHA_SINTOMAS      ENTIDAD_RES     n ENTIDAD_FEDERATIVA ABREVIATURA #>   <dttm>              <chr>       <int> <chr>              <chr>       #> 1 2021-07-01 00:00:00 02            140 BAJA CALIFORNIA    BC          #> 2 2021-07-02 00:00:00 02            164 BAJA CALIFORNIA    BC          #> 3 2021-07-03 00:00:00 02            167 BAJA CALIFORNIA    BC          #> 4 2021-07-04 00:00:00 02            212 BAJA CALIFORNIA    BC          #> 5 2021-07-05 00:00:00 02            214 BAJA CALIFORNIA    BC          #> 6 2021-07-06 00:00:00 02            215 BAJA CALIFORNIA    BC           # Agrupando casos por tipo de clasificacion datos_covid <- datos_covid |>   casos(     entidades = c(\"BAJA CALIFORNIA\", \"BAJA CALIFORNIA SUR\"),     group_by_tipo_clasificacion = TRUE,     list_name = \"BC_BCS\"   ) head(datos_covid$BC_BCS) #> # A tibble: 6 × 7 #>   FECHA_SINTOMAS      ENTIDAD_UM CLASIFICACION_F…¹     n ENTID…² ABREV…³ CLASI…⁴ #>   <dttm>              <chr>                  <dbl> <int> <chr>   <chr>   <chr>   #> 1 2021-07-01 00:00:00 02                         3    24 BAJA C… BC      \"CASO … #> 2 2021-07-01 00:00:00 02                         6     5 BAJA C… BC      \"CASO … #> 3 2021-07-01 00:00:00 02                         7   110 BAJA C… BC      \"NEGAT… #> 4 2021-07-01 00:00:00 03                         1     1 BAJA C… BS      \"CASO … #> 5 2021-07-01 00:00:00 03                         3   245 BAJA C… BS      \"CASO … #> 6 2021-07-01 00:00:00 03                         5     3 BAJA C… BS      \"NO RE… #> # … with abbreviated variable names ¹​CLASIFICACION_FINAL, ²​ENTIDAD_FEDERATIVA, #> #   ³​ABREVIATURA, ⁴​`CLASIFICACI\\032N`  # Regresa la suma de los de BC + BCS por tipo de paciente datos_covid <- datos_covid |>   casos(     entidades = c(\"BAJA CALIFORNIA\", \"BAJA CALIFORNIA SUR\"),     group_by_tipo_clasificacion = FALSE,     tipo_paciente = c(\"AMBULATORIO\", \"HOSPITALIZADO\"),     group_by_tipo_paciente = TRUE,     list_name = \"BC_+_BCS\"   ) head(datos_covid$`BC_+_BCS`) #> # A tibble: 6 × 7 #>   FECHA_SINTOMAS      ENTIDAD_UM TIPO_PACIENTE     n ENTIDAD_F…¹ ABREV…² DESCR…³ #>   <dttm>              <chr>              <dbl> <int> <chr>       <chr>   <chr>   #> 1 2021-07-01 00:00:00 02                     1   127 BAJA CALIF… BC      AMBULA… #> 2 2021-07-01 00:00:00 02                     2    12 BAJA CALIF… BC      HOSPIT… #> 3 2021-07-01 00:00:00 03                     1   464 BAJA CALIF… BS      AMBULA… #> 4 2021-07-01 00:00:00 03                     2    55 BAJA CALIF… BS      HOSPIT… #> 5 2021-07-02 00:00:00 02                     1   145 BAJA CALIF… BC      AMBULA… #> 6 2021-07-02 00:00:00 02                     2    19 BAJA CALIF… BC      HOSPIT… #> # … with abbreviated variable names ¹​ENTIDAD_FEDERATIVA, ²​ABREVIATURA, #> #   ³​DESCRIPCION_TIPO_PACIENTE  # Si deseas agrupar por una variable que no este en las opciones datos_covid <- datos_covid |>   casos(     group_by_entidad = FALSE,     tipo_paciente = c(\"AMBULATORIO\", \"HOSPITALIZADO\"),     group_by_tipo_paciente = TRUE,     list_name = \"sexo\",     .grouping_vars = c(\"SEXO\")   ) head(datos_covid$sexo) #> # A tibble: 6 × 5 #>   FECHA_SINTOMAS       SEXO TIPO_PACIENTE     n DESCRIPCION_TIPO_PACIENTE #>   <dttm>              <int>         <dbl> <int> <chr>                     #> 1 2021-07-01 00:00:00     1             1   308 AMBULATORIO               #> 2 2021-07-01 00:00:00     1             2    28 HOSPITALIZADO             #> 3 2021-07-01 00:00:00     2             1   283 AMBULATORIO               #> 4 2021-07-01 00:00:00     2             2    39 HOSPITALIZADO             #> 5 2021-07-02 00:00:00     1             1   258 AMBULATORIO               #> 6 2021-07-02 00:00:00     1             2    13 HOSPITALIZADO              # Si no recuerdas la codificacion de los sexos puedes usar el diccionario: datos_covid$sexo <- datos_covid$sexo |>   dplyr::left_join(datos_covid$dict$SEXO, by = c(\"SEXO\" = \"CLAVE\")) head(datos_covid$sexo) #> # A tibble: 6 × 6 #>   FECHA_SINTOMAS       SEXO TIPO_PACIENTE     n DESCRIPCION_TIPO_PACIE…¹ DESCR…² #>   <dttm>              <dbl>         <dbl> <int> <chr>                    <chr>   #> 1 2021-07-01 00:00:00     1             1   308 AMBULATORIO              MUJER   #> 2 2021-07-01 00:00:00     1             2    28 HOSPITALIZADO            MUJER   #> 3 2021-07-01 00:00:00     2             1   283 AMBULATORIO              HOMBRE  #> 4 2021-07-01 00:00:00     2             2    39 HOSPITALIZADO            HOMBRE  #> 5 2021-07-02 00:00:00     1             1   258 AMBULATORIO              MUJER   #> 6 2021-07-02 00:00:00     1             2    13 HOSPITALIZADO            MUJER   #> # … with abbreviated variable names ¹​DESCRIPCION_TIPO_PACIENTE, #> #   ²​`DESCRIPCI\\032N`  # Si no recuerdas todas las variables de la base puedes usar glimpse para ver por # que otras variables puedes clasificar datos_covid$dats |> dplyr::glimpse() #> Rows: 20,000 #> Columns: 18 #> $ SECTOR                <int> 4, 4, 4, 12, 5, 4, 4, 12, 4, 4, 4, 4, 12, 12, 12… #> $ ENTIDAD_UM            <chr> \"03\", \"03\", \"03\", \"03\", \"02\", \"03\", \"02\", \"03\", … #> $ SEXO                  <int> 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, … #> $ ENTIDAD_NAC           <chr> \"12\", \"03\", \"03\", \"03\", \"20\", \"03\", \"20\", \"12\", … #> $ ENTIDAD_RES           <chr> \"03\", \"03\", \"03\", \"03\", \"02\", \"03\", \"02\", \"03\", … #> $ TIPO_PACIENTE         <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ FECHA_INGRESO         <dttm> 2021-07-05, 2021-07-12, 2021-07-22, 2021-07-15,… #> $ FECHA_SINTOMAS        <dttm> 2021-07-04, 2021-07-11, 2021-07-19, 2021-07-13,… #> $ FECHA_DEF             <dttm> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ EDAD                  <int> 22, 52, 19, 10, 29, 54, 25, 22, 32, 38, 11, 27, … #> $ HABLA_LENGUA_INDIG    <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 99, 2, 2, 2,… #> $ DIABETES              <int> 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … #> $ TOMA_MUESTRA_LAB      <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, … #> $ RESULTADO_LAB         <int> 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, … #> $ TOMA_MUESTRA_ANTIGENO <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, … #> $ RESULTADO_ANTIGENO    <int> 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 97, 1, 2, 97… #> $ CLASIFICACION_FINAL   <int> 3, 7, 7, 3, 7, 7, 7, 3, 7, 7, 7, 7, 7, 3, 7, 3, … #> $ UCI                   <int> 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, …  # Una vez hayas concluido tu trabajo no olvides desconectar datos_covid$disconnect() #> ✔ Desconectado"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/cfr.html","id":null,"dir":"Reference","previous_headings":"","what":"Case Fatality Rate (CFR) — cfr","title":"Case Fatality Rate (CFR) — cfr","text":"Calcula la proporcion de enfermos que fallecen sobre todos los enfermos confirmados en distintas categorias (residencia / edad / etc)","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/cfr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Case Fatality Rate (CFR) — cfr","text":"","code":"cfr(   datos_covid,   entidades = c(\"AGUASCALIENTES\", \"BAJA CALIFORNIA\", \"BAJA CALIFORNIA SUR\", \"CAMPECHE\",     \"CHIAPAS\", \"CHIHUAHUA\", \"CIUDAD DE MÉXICO\", \"COAHUILA DE ZARAGOZA\", \"COLIMA\",     \"DURANGO\", \"GUANAJUATO\", \"GUERRERO\", \"HIDALGO\", \"JALISCO\", \"MÉXICO\",     \"MICHOACÁN DE OCAMPO\", \"MORELOS\", \"NAYARIT\", \"NUEVO LEÓN\", \"OAXACA\", \"PUEBLA\",     \"QUERÉTARO\", \"QUINTANA ROO\", \"SAN LUIS POTOSÍ\", \"SINALOA\", \"SONORA\", \"TABASCO\",     \"TAMAULIPAS\", \"TLAXCALA\", \"VERACRUZ DE IGNACIO DE LA LLAVE\", \"YUCATÁN\", \"ZACATECAS\"),   group_by_entidad = TRUE,   entidad_tipo = c(\"Unidad Medica\", \"Residencia\", \"Nacimiento\"),   fecha_tipo = c(\"Sintomas\", \"Ingreso\", \"Defuncion\"),   tipo_uci = c(\"SI\", \"NO\", \"NO APLICA\", \"SE IGNORA\", \"NO ESPECIFICADO\"),   group_by_tipo_uci = FALSE,   tipo_clasificacion = c(\"Confirmados COVID\"),   group_by_tipo_clasificacion = FALSE,   tipo_paciente = c(\"AMBULATORIO\", \"HOSPITALIZADO\", \"NO ESPECIFICADO\"),   group_by_tipo_paciente = FALSE,   tipo_sector = c(\"CRUZ ROJA\", \"DIF\", \"ESTATAL\", \"IMSS\", \"IMSS-BIENESTAR\", \"ISSSTE\",     \"MUNICIPAL\", \"PEMEX\", \"PRIVADA\", \"SEDENA\", \"SEMAR\", \"SSA\", \"UNIVERSITARIO\",     \"NO ESPECIFICADO\"),   group_by_tipo_sector = FALSE,   edad_cut = NULL,   fill_NA = TRUE,   list_name = \"case fatality rate\",   .grouping_vars = c() )"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/cfr.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"Case Fatality Rate (CFR) — cfr","text":"datos_covid (obligatorio) Lista de tibbles o duckdbs resultante de descarga_datos_abiertos() o read_datos_abiertos() entidades (opcional)  Vector con las entidades de las unidades medicas analizar. Opciones: AGUASCALIENTES, BAJA CALIFORNIA, BAJA CALIFORNIA SUR, CAMPECHE, CHIAPAS, CHIHUAHUA, CIUDAD DE MEXICO, COAHUILA DE ZARAGOZA , COLIMA, DURANGO, GUANAJUATO, GUERRERO, HIDALGO, JALISCO, MEXICO, MICHOACAN DE OCAMPO, MORELOS,NAYARIT NUEVO LEON, OAXACA ,PUEBLA, QUERETARO,QUINTANA ROO, SAN LUIS POTOSI, SINALOA, SONORA, TABASCO, TAMAULIPAS,TLAXCALA, VERACRUZ DE IGNACIO DE LA LLAVE, YUCATAN, ZACATECAS. group_by_entidad (opcional) TRUE obtiene los casos para cada entidad reportando en cada fecha la entidad y los casos en dicha entidad. FALSE  junta las entidades sumando sus casos en una sola observacion por cada fecha. entidad_tipo (opcional) Indica que se refiere las entidades seleccionadas. Elige una de las opciones: Unidad Medica (entidad de la unidad medica), Nacimiento (entidad de origen del individuo) o Residencia (entidad donde reside el individuo). fecha_tipo (opcional) Selecciona si la fecha que se utiliza es la fecha de Ingreso (si aplica), la fecha de Sintomas o la de Defuncion (si aplica). El default es fecha de Sintomas. tipo_uci (opcional)  Vector con el tipo de valores para Unidad de Cuidado Intensivo (UCI) incluir:  SI,,APLICA,SE IGNORA,ESPECIFICADO. Por default se incluyen todos. group_by_tipo_uci (opcional) Booleana. El caso TRUE determina si regresa la base con cada fecha teniendo diferentes renglones uno para cada tipo_uci (es decir cada fecha se generan tantos observaciones como grupos de tipo de UCI) o bien en una sola fecha se suman todos los tipos de UCI (FALSE). El default es FALSE. tipo_clasificacion (opcional)  Vector con el tipo de clasificaciones (por la prueba) incluir:Sospechosos,Confirmados COVID, Negativo COVID, Inv\\u00e1lido, realizado group_by_tipo_clasificacion (opcional)  Booleana determinando si regresa la base con cada entrada agrupada por tipo_clasificacion (es decir cada fecha se generan tantos observaciones como grupos de tipo de clasificación) en caso TRUE. Si FALSE suma todos los casos del tipo de clasificacion por fecha dando un solo numero por fecha. El defalt es FALSE. tipo_paciente (opcional) Vector con el tipo de pacientes incluir. Opciones: AMBULATORIO, HOSPITALIZADO, ESPECIFICADO. Por default se incluyen todos. group_by_tipo_paciente (opcional) Booleana determinando (caso TRUE) si regresa la base con cada entrada agrupada por tipo_paciente (es decir cada fecha se genera un renglon para AMBULATORIO, un renglon para HOSPITALIZADO, etc) o bien si se suman todos los grupos y cada fecha reporta solo la suma de estos (estilo AMBULATORIO + HOSPITALIZADO segun las categorias de tipo_paciente) El default es FALSE. tipo_sector (opcional) Vector con los sectores del sistema de salud incluir: CRUZ ROJA,DIF,ESTATAL,IMSS,IMSS-BIENESTAR,ISSSTE, MUNICIPAL,PEMEX, PRIVADA,SEDENA,SEMAR,SSA, UNIVERSITARIO,ESPECIFICADO. Por default se incluyen todos. group_by_tipo_sector (opcional) Booleana determina en el caso de TRUE si regresa la base con cada entrada agrupada por tipo_sector (es decir cada fecha tiene una entrada con los del IMSS, una entrada distinta con los de ISSSTE, etc) o bien en caso de FALSE se devuelve una sola entrada por fecha con la suma IMSS + ISSSTE + etc segun los  sectores seleccionados. El default es FALSE. edad_cut (opcional) Vector con secuencia de edades para hacer grupos. Por ejemplo edad_cut = c(0, 10, Inf) arma dos grupos de edad de 0 10 y de 10 infinito o bien edad_cut = c(15, 20) deja sólo los registros entre 15 y 20 años. Por default es NULL y arma grupos etarios. fill_NA (opcional)  Regresa observaciones para todas las combinaciones de variables incluyendo como NA donde se observaron casos en el denominador.  En caso contrario se incluyen las filas donde se observaron casos. list_name (opcional) Asigna un nombre en la lista de datos la base generada .grouping_vars (opcional) Vector de variables adicionales de agrupacion de los conteos. Por ejemplo si se agrega .grouping_vars = 'DIABETES' entonces para cada fecha habra dos conteos de casos uno de los que tienen diabetes y uno de los que .","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/cfr.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"Case Fatality Rate (CFR) — cfr","text":"Une la lista de datos_covid una nueva entrada de nombre list_name (default: case fatality rate) con una base de datos (tibble o duckdb) con los resultados agregados. case fatality rate - Base de datos generara con los datos agregados (el nombre cambia si se usa list_name). dict - Diccionario de datos dats - Datos originales (conexion duckdb o tibble) disconnect  - Función para desconectarte de duckdb ... - Cualquier otro elemento que ya existiera en datos_covid","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/cfr.html","id":"detalles","dir":"Reference","previous_headings":"","what":"Detalles","title":"Case Fatality Rate (CFR) — cfr","text":"El case fatality rate se define como $$\\frac{\\# Defunciones}{Total de enfermos}$$ Si se utiliza la opción tipo_clasificacion se puede cambiar la definicion de enfermo (por default se incluyen solamente \"Confirmados COVID\").","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/covidmx/reference/cfr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"Case Fatality Rate (CFR) — cfr","text":"","code":"# Para el ejemplo usaremos los datos precargados pero tu puedes # correr el ejemplo descargando informacion mas reciente: # datos_covid <- descarga_datos_abiertos() #Sugerido  datos_covid <- datosabiertos  # Casos a nivel nacional por entidad datos_covid <- datos_covid |> cfr() head(datos_covid$`case fatality rate`) #> # A tibble: 6 × 5 #>   FECHA_SINTOMAS      ENTIDAD_UM ENTIDAD_FEDERATIVA  ABREVIATURA CASE FATALITY…¹ #>   <dttm>              <chr>      <chr>               <chr>                 <dbl> #> 1 2021-07-01 00:00:00 02         BAJA CALIFORNIA     BC                   0.125  #> 2 2021-07-01 00:00:00 03         BAJA CALIFORNIA SUR BS                   0.0935 #> 3 2021-07-02 00:00:00 02         BAJA CALIFORNIA     BC                   0.0645 #> 4 2021-07-02 00:00:00 03         BAJA CALIFORNIA SUR BS                   0.0281 #> 5 2021-07-03 00:00:00 02         BAJA CALIFORNIA     BC                   0.0588 #> 6 2021-07-03 00:00:00 03         BAJA CALIFORNIA SUR BS                   0.0699 #> # … with abbreviated variable name ¹​`CASE FATALITY RATE`  # Agregando todos los estados datos_covid <- datos_covid |>   cfr(list_name = \"cfr_nacional\", group_by_entidad = FALSE) head(datos_covid$`cfr_nacional`) #> # A tibble: 6 × 2 #>   FECHA_SINTOMAS      `CASE FATALITY RATE` #>   <dttm>                             <dbl> #> 1 2021-07-01 00:00:00               0.0963 #> 2 2021-07-02 00:00:00               0.0335 #> 3 2021-07-03 00:00:00               0.0684 #> 4 2021-07-04 00:00:00               0.0117 #> 5 2021-07-05 00:00:00               0.0377 #> 6 2021-07-06 00:00:00               0.0731  # CFR en Baja California datos_covid <- datos_covid |>   cfr(entidades = c(\"BAJA CALIFORNIA\"), list_name = \"cfr_bc\") head(datos_covid$`cfr_bc`) #> # A tibble: 6 × 5 #>   FECHA_SINTOMAS      ENTIDAD_UM ENTIDAD_FEDERATIVA ABREVIATURA CASE FATALITY …¹ #>   <dttm>              <chr>      <chr>              <chr>                  <dbl> #> 1 2021-07-01 00:00:00 02         BAJA CALIFORNIA    BC                    0.125  #> 2 2021-07-02 00:00:00 02         BAJA CALIFORNIA    BC                    0.0645 #> 3 2021-07-03 00:00:00 02         BAJA CALIFORNIA    BC                    0.0588 #> 4 2021-07-04 00:00:00 02         BAJA CALIFORNIA    BC                    0.0303 #> 5 2021-07-05 00:00:00 02         BAJA CALIFORNIA    BC                    0.0909 #> 6 2021-07-06 00:00:00 02         BAJA CALIFORNIA    BC                    0.0968 #> # … with abbreviated variable name ¹​`CASE FATALITY RATE`  # Calcula el CFR suponiendo toda la base son confirmados datos_covid <- datos_covid |>   cfr(     entidades = c(\"BAJA CALIFORNIA\", \"BAJA CALIFORNIA SUR\"),     tipo_clasificacion = c(       \"Sospechosos\", \"Confirmados COVID\",       \"Negativo a COVID\", \"Inv\\u00e1lido\", \"No realizado\"     ),     group_by_tipo_clasificacion = TRUE, list_name = \"bc_bcs_cfr\"   ) head(datos_covid$`bc_bcs_cfr`) # Los NA es porque no habia observaciones en el denominador #> # A tibble: 6 × 7 #>   FECHA_SINTOMAS      ENTIDAD_UM CLASIFICACION…¹ ENTID…² ABREV…³ CLASI…⁴ CASE …⁵ #>   <dttm>              <chr>                <dbl> <chr>   <chr>   <chr>     <dbl> #> 1 2021-07-01 00:00:00 02                       3 BAJA C… BC      \"CASO …  0.125  #> 2 2021-07-01 00:00:00 02                       6 BAJA C… BC      \"CASO …  0      #> 3 2021-07-01 00:00:00 02                       7 BAJA C… BC      \"NEGAT…  0      #> 4 2021-07-01 00:00:00 03                       1 BAJA C… BS      \"CASO …  0      #> 5 2021-07-01 00:00:00 03                       3 BAJA C… BS      \"CASO …  0.0939 #> 6 2021-07-01 00:00:00 03                       5 BAJA C… BS      \"NO RE…  0      #> # … with abbreviated variable names ¹​CLASIFICACION_FINAL, ²​ENTIDAD_FEDERATIVA, #> #   ³​ABREVIATURA, ⁴​`CLASIFICACI\\032N`, ⁵​`CASE FATALITY RATE`  # Distinguiendo entre ambulatorio y hospitalizado datos_covid <- datos_covid |>   cfr(     tipo_paciente = c(\"AMBULATORIO\", \"HOSPITALIZADO\"),     group_by_tipo_paciente = TRUE,     list_name = \"cfr_paciente\"   ) head(datos_covid$cfr_paciente) #> # A tibble: 6 × 7 #>   FECHA_SINTOMAS      ENTIDAD_UM TIPO_PACIENTE ENTIDAD…¹ ABREV…² DESCR…³ CASE …⁴ #>   <dttm>              <chr>              <dbl> <chr>     <chr>   <chr>     <dbl> #> 1 2021-07-01 00:00:00 02                     1 BAJA CAL… BC      AMBULA…   0     #> 2 2021-07-01 00:00:00 02                     2 BAJA CAL… BC      HOSPIT…   0.5   #> 3 2021-07-01 00:00:00 03                     1 BAJA CAL… BS      AMBULA…   0     #> 4 2021-07-01 00:00:00 03                     2 BAJA CAL… BS      HOSPIT…   0.511 #> 5 2021-07-02 00:00:00 02                     1 BAJA CAL… BC      AMBULA…   0     #> 6 2021-07-02 00:00:00 02                     2 BAJA CAL… BC      HOSPIT…   0.182 #> # … with abbreviated variable names ¹​ENTIDAD_FEDERATIVA, ²​ABREVIATURA, #> #   ³​DESCRIPCION_TIPO_PACIENTE, ⁴​`CASE FATALITY RATE`  # CFR en distintos grupos de edad (0 a 20, 20 a 60 y 60+) datos_covid <- datos_covid |>   cfr(edad_cut = c(0, 20, 60, Inf), list_name = \"cfr_edad\") head(datos_covid$cfr_edad) #> # A tibble: 6 × 6 #>   FECHA_SINTOMAS      EDAD_CAT ENTIDAD_UM ENTIDAD_FEDERATIVA  ABREVIAT…¹ CASE …² #>   <dttm>              <fct>    <chr>      <chr>               <chr>        <dbl> #> 1 2021-07-01 00:00:00 (0,20]   02         BAJA CALIFORNIA     BC          0      #> 2 2021-07-01 00:00:00 (0,20]   03         BAJA CALIFORNIA SUR BS          0      #> 3 2021-07-01 00:00:00 (20,60]  02         BAJA CALIFORNIA     BC          0.1    #> 4 2021-07-01 00:00:00 (20,60]  03         BAJA CALIFORNIA SUR BS          0.0918 #> 5 2021-07-01 00:00:00 (60,Inf] 02         BAJA CALIFORNIA     BC          0.5    #> 6 2021-07-01 00:00:00 (60,Inf] 03         BAJA CALIFORNIA SUR BS          0.357  #> # … with abbreviated variable names ¹​ABREVIATURA, ²​`CASE FATALITY RATE`  # Si deseas agrupar por una variable que no este en las opciones datos_covid <- datos_covid |>   cfr(.grouping_vars = c(\"DIABETES\"), list_name = \"cfr_diab\") head(datos_covid$cfr_diab) #> # A tibble: 6 × 6 #>   FECHA_SINTOMAS      DIABETES ENTIDAD_UM ENTIDAD_FEDERATIVA  ABREVIAT…¹ CASE …² #>   <dttm>                 <int> <chr>      <chr>               <chr>        <dbl> #> 1 2021-07-01 00:00:00        1 02         BAJA CALIFORNIA     BC          0      #> 2 2021-07-01 00:00:00        1 03         BAJA CALIFORNIA SUR BS          0.227  #> 3 2021-07-01 00:00:00        2 02         BAJA CALIFORNIA     BC          0.143  #> 4 2021-07-01 00:00:00        2 03         BAJA CALIFORNIA SUR BS          0.0804 #> 5 2021-07-02 00:00:00        1 02         BAJA CALIFORNIA     BC          0      #> 6 2021-07-02 00:00:00        1 03         BAJA CALIFORNIA SUR BS          0.154  #> # … with abbreviated variable names ¹​ABREVIATURA, ²​`CASE FATALITY RATE`  # Finalmente desconectamos datos_covid$disconnect() #> ✔ Desconectado"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Case Hospitalization Rate (CHR) — chr","title":"Case Hospitalization Rate (CHR) — chr","text":"chr Calcula la proporción de enfermos que resultan hospitalizados sobre todos los enfermos confirmados en distintas categorías (residencia / edad / etc)","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Case Hospitalization Rate (CHR) — chr","text":"","code":"chr(   datos_covid,   entidades = c(\"AGUASCALIENTES\", \"BAJA CALIFORNIA\", \"BAJA CALIFORNIA SUR\", \"CAMPECHE\",     \"CHIAPAS\", \"CHIHUAHUA\", \"CIUDAD DE MÉXICO\", \"COAHUILA DE ZARAGOZA\", \"COLIMA\",     \"DURANGO\", \"GUANAJUATO\", \"GUERRERO\", \"HIDALGO\", \"JALISCO\", \"MÉXICO\",     \"MICHOACÁN DE OCAMPO\", \"MORELOS\", \"NAYARIT\", \"NUEVO LEÓN\", \"OAXACA\", \"PUEBLA\",     \"QUERÉTARO\", \"QUINTANA ROO\", \"SAN LUIS POTOSÍ\", \"SINALOA\", \"SONORA\", \"TABASCO\",     \"TAMAULIPAS\", \"TLAXCALA\", \"VERACRUZ DE IGNACIO DE LA LLAVE\", \"YUCATÁN\", \"ZACATECAS\"),   group_by_entidad = TRUE,   entidad_tipo = c(\"Unidad Medica\", \"Residencia\", \"Nacimiento\"),   fecha_tipo = c(\"Sintomas\", \"Ingreso\", \"Defuncion\"),   tipo_clasificacion = c(\"Confirmados COVID\"),   group_by_tipo_clasificacion = FALSE,   incluir_paciente_no_especificado = FALSE,   tipo_sector = c(\"CRUZ ROJA\", \"DIF\", \"ESTATAL\", \"IMSS\", \"IMSS-BIENESTAR\", \"ISSSTE\",     \"MUNICIPAL\", \"PEMEX\", \"PRIVADA\", \"SEDENA\", \"SEMAR\", \"SSA\", \"UNIVERSITARIO\",     \"NO ESPECIFICADO\"),   group_by_tipo_sector = FALSE,   defunciones = FALSE,   edad_cut = NULL,   fill_NA = TRUE,   list_name = \"case hospitalization rate\",   .grouping_vars = c() )"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/chr.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"Case Hospitalization Rate (CHR) — chr","text":"datos_covid (obligatorio) Lista de tibbles o duckdbs resultante de descarga_datos_abiertos() o read_datos_abiertos() entidades (opcional)  Vector con las entidades de las unidades medicas analizar. Opciones: AGUASCALIENTES, BAJA CALIFORNIA, BAJA CALIFORNIA SUR, CAMPECHE, CHIAPAS, CHIHUAHUA, CIUDAD DE MEXICO, COAHUILA DE ZARAGOZA , COLIMA, DURANGO, GUANAJUATO, GUERRERO, HIDALGO, JALISCO, MEXICO, MICHOACAN DE OCAMPO, MORELOS,NAYARIT NUEVO LEON, OAXACA ,PUEBLA, QUERETARO,QUINTANA ROO, SAN LUIS POTOSI, SINALOA, SONORA, TABASCO, TAMAULIPAS,TLAXCALA, VERACRUZ DE IGNACIO DE LA LLAVE, YUCATAN, ZACATECAS. group_by_entidad (opcional) TRUE obtiene los casos para cada entidad reportando en cada fecha la entidad y los casos en dicha entidad. FALSE  junta las entidades sumando sus casos en una sola observacion por cada fecha. entidad_tipo (opcional) Indica que se refiere las entidades seleccionadas. Elige una de las opciones: Unidad Medica (entidad de la unidad medica), Nacimiento (entidad de origen del individuo) o Residencia (entidad donde reside el individuo). fecha_tipo (opcional) Selecciona si la fecha que se utiliza es la fecha de Ingreso (si aplica), la fecha de Sintomas o la de Defuncion (si aplica). El default es fecha de Sintomas. tipo_clasificacion (opcional)  Vector con el tipo de clasificaciones (por la prueba) incluir:Sospechosos,Confirmados COVID, Negativo COVID, Inv\\u00e1lido, realizado group_by_tipo_clasificacion (opcional)  Booleana determinando si regresa la base con cada entrada agrupada por tipo_clasificacion (es decir cada fecha se generan tantos observaciones como grupos de tipo de clasificación) en caso TRUE. Si FALSE suma todos los casos del tipo de clasificacion por fecha dando un solo numero por fecha. El defalt es FALSE. incluir_paciente_no_especificado (opcional)  Si en el denominador se incluyen los pacientescuyo tipo es  ESPECIFICADO. Por default es FALSE por lo que sólo se incluyen AMBULATORIO, HOSPITALIZADO. tipo_sector (opcional) Vector con los sectores del sistema de salud incluir: CRUZ ROJA,DIF,ESTATAL,IMSS,IMSS-BIENESTAR,ISSSTE, MUNICIPAL,PEMEX, PRIVADA,SEDENA,SEMAR,SSA, UNIVERSITARIO,ESPECIFICADO. Por default se incluyen todos. group_by_tipo_sector (opcional) Booleana determina en el caso de TRUE si regresa la base con cada entrada agrupada por tipo_sector (es decir cada fecha tiene una entrada con los del IMSS, una entrada distinta con los de ISSSTE, etc) o bien en caso de FALSE se devuelve una sola entrada por fecha con la suma IMSS + ISSSTE + etc segun los  sectores seleccionados. El default es FALSE. defunciones (opcional)  Booleana si incluir sólo defunciones TRUE o todos FALSE. El default es FALSE. edad_cut (opcional) Vector con secuencia de edades para hacer grupos. Por ejemplo edad_cut = c(0, 10, Inf) arma dos grupos de edad de 0 10 y de 10 infinito o bien edad_cut = c(15, 20) deja sólo los registros entre 15 y 20 años. Por default es NULL y arma grupos etarios. fill_NA (opcional)  Regresa observaciones para todas las combinaciones de variables incluyendo como NA donde se observaron casos en el denominador.  En caso contrario se incluyen las filas donde se observaron casos. list_name (opcional) Asigna un nombre en la lista de datos la base generada .grouping_vars (opcional) Vector de variables adicionales de agrupacion de los conteos. Por ejemplo si se agrega .grouping_vars = 'DIABETES' entonces para cada fecha habra dos conteos de casos uno de los que tienen diabetes y uno de los que .","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/chr.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"Case Hospitalization Rate (CHR) — chr","text":"Une la lista de datos_covid una nueva entrada de nombre list_name (default: case hospitalization rate) con una base de datos (tibble o duckdb) con los resultados agregados. case hospitalization rate - Base de datos generara con los datos agregados (el nombre cambia si se usa list_name). dict - Diccionario de datos dats - Datos originales (conexion duckdb o tibble) disconnect  - Función para desconectarte de duckdb ... - Cualquier otro elemento que ya existiera en datos_covid","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/chr.html","id":"detalles","dir":"Reference","previous_headings":"","what":"Detalles","title":"Case Hospitalization Rate (CHR) — chr","text":"El case hospitalization rate se define como $$\\frac{\\# Hospitalizados}{Total de enfermos}$$ Si se utiliza la opción incluir_paciente_no_especificado se puede cambiar la definicion de Total de enfermos para incluir los pacientes que dicen ESPECIFICADO. Estos por default se excluyen justo por su naturaleza desconocida.","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/covidmx/reference/chr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"Case Hospitalization Rate (CHR) — chr","text":"","code":"# Para el ejemplo usaremos los datos precargados pero tu puedes # correr el ejemplo descargando informacion mas reciente: # datos_covid <- descarga_datos_abiertos() #Sugerido  datos_covid <- datosabiertos  # Casos a nivel nacional datos_covid <- datos_covid |> chr() head(datos_covid$`case hospitalization rate`) #> # A tibble: 6 × 5 #>   FECHA_SINTOMAS      ENTIDAD_UM ENTIDAD_FEDERATIVA  ABREVIATURA CASE HOSPITAL…¹ #>   <dttm>              <chr>      <chr>               <chr>                 <dbl> #> 1 2021-07-01 00:00:00 02         BAJA CALIFORNIA     BC                   0.25   #> 2 2021-07-01 00:00:00 03         BAJA CALIFORNIA SUR BS                   0.183  #> 3 2021-07-02 00:00:00 02         BAJA CALIFORNIA     BC                   0.355  #> 4 2021-07-02 00:00:00 03         BAJA CALIFORNIA SUR BS                   0.0787 #> 5 2021-07-03 00:00:00 02         BAJA CALIFORNIA     BC                   0.0882 #> 6 2021-07-03 00:00:00 03         BAJA CALIFORNIA SUR BS                   0.122  #> # … with abbreviated variable name ¹​`CASE HOSPITALIZATION RATE`  # Nacional datos_covid <- datos_covid |> chr(list_name = \"chr_nacional\", group_by_entidad = FALSE) head(datos_covid$`chr_nacional`) #> # A tibble: 6 × 2 #>   FECHA_SINTOMAS      `CASE HOSPITALIZATION RATE` #>   <dttm>                                    <dbl> #> 1 2021-07-01 00:00:00                      0.189  #> 2 2021-07-02 00:00:00                      0.120  #> 3 2021-07-03 00:00:00                      0.118  #> 4 2021-07-04 00:00:00                      0.0700 #> 5 2021-07-05 00:00:00                      0.0830 #> 6 2021-07-06 00:00:00                      0.138   # CHR en IMSS e ISSSTE datos_covid <- datos_covid |>   chr(tipo_sector = c(\"IMSS\", \"ISSSTE\"), list_name = \"chimss\", group_by_tipo_sector = TRUE) head(datos_covid$`chimss`) #> # A tibble: 6 × 7 #>   FECHA_SINTOMAS      ENTIDAD_UM SECTOR ENTIDAD_FEDERA…¹ ABREV…² DESCR…³ CASE …⁴ #>   <dttm>              <chr>       <dbl> <chr>            <chr>   <chr>     <dbl> #> 1 2021-07-01 00:00:00 02              4 BAJA CALIFORNIA  BC      IMSS     0.111  #> 2 2021-07-01 00:00:00 03              4 BAJA CALIFORNIA… BS      IMSS     0.159  #> 3 2021-07-01 00:00:00 03              6 BAJA CALIFORNIA… BS      ISSSTE   0.571  #> 4 2021-07-02 00:00:00 02              4 BAJA CALIFORNIA  BC      IMSS     0.235  #> 5 2021-07-02 00:00:00 03              4 BAJA CALIFORNIA… BS      IMSS     0.0458 #> 6 2021-07-02 00:00:00 03              6 BAJA CALIFORNIA… BS      ISSSTE   0.333  #> # … with abbreviated variable names ¹​ENTIDAD_FEDERATIVA, ²​ABREVIATURA, #> #   ³​DESCRIPCION_TIPO_SECTOR, ⁴​`CASE HOSPITALIZATION RATE`  # Calcula el CHR sobre toda la base datos_covid <- datos_covid |>   chr(     tipo_clasificacion = c(       \"Sospechosos\", \"Confirmados COVID\",       \"Negativo a COVID\", \"Inv\\u00e1lido\", \"No realizado\"     ),     group_by_tipo_clasificacion = TRUE, list_name = \"chr_todos\"   ) head(datos_covid$`chr_todos`) #> # A tibble: 6 × 7 #>   FECHA_SINTOMAS      ENTIDAD_UM CLASIFICACION…¹ ENTID…² ABREV…³ CLASI…⁴ CASE …⁵ #>   <dttm>              <chr>                <dbl> <chr>   <chr>   <chr>     <dbl> #> 1 2021-07-01 00:00:00 02                       3 BAJA C… BC      \"CASO …  0.25   #> 2 2021-07-01 00:00:00 02                       6 BAJA C… BC      \"CASO …  0.2    #> 3 2021-07-01 00:00:00 02                       7 BAJA C… BC      \"NEGAT…  0.0455 #> 4 2021-07-01 00:00:00 03                       1 BAJA C… BS      \"CASO …  0      #> 5 2021-07-01 00:00:00 03                       3 BAJA C… BS      \"CASO …  0.184  #> 6 2021-07-01 00:00:00 03                       5 BAJA C… BS      \"NO RE…  1      #> # … with abbreviated variable names ¹​CLASIFICACION_FINAL, ²​ENTIDAD_FEDERATIVA, #> #   ³​ABREVIATURA, ⁴​`CLASIFICACI\\032N`, ⁵​`CASE HOSPITALIZATION RATE`  # Distinguiendo sólo entre defunciones datos_covid <- datos_covid |>   chr(defunciones = TRUE, list_name = \"chr_defun\") head(datos_covid$`chr_defun`) #> # A tibble: 6 × 5 #>   FECHA_SINTOMAS      ENTIDAD_UM ENTIDAD_FEDERATIVA  ABREVIATURA CASE HOSPITAL…¹ #>   <dttm>              <chr>      <chr>               <chr>                 <dbl> #> 1 2021-07-01 00:00:00 02         BAJA CALIFORNIA     BC                        1 #> 2 2021-07-01 00:00:00 03         BAJA CALIFORNIA SUR BS                        1 #> 3 2021-07-02 00:00:00 02         BAJA CALIFORNIA     BC                        1 #> 4 2021-07-02 00:00:00 03         BAJA CALIFORNIA SUR BS                        1 #> 5 2021-07-03 00:00:00 02         BAJA CALIFORNIA     BC                        1 #> 6 2021-07-03 00:00:00 03         BAJA CALIFORNIA SUR BS                        1 #> # … with abbreviated variable name ¹​`CASE HOSPITALIZATION RATE`  # Si deseas agrupar por una variable que no este en las opciones datos_covid <- datos_covid |>   chr(.grouping_vars = c(\"DIABETES\"), list_name = \"chr_diab\") head(datos_covid$chr_diab) #> # A tibble: 6 × 6 #>   FECHA_SINTOMAS      DIABETES ENTIDAD_UM ENTIDAD_FEDERATIVA  ABREVIAT…¹ CASE …² #>   <dttm>                 <int> <chr>      <chr>               <chr>        <dbl> #> 1 2021-07-01 00:00:00        1 02         BAJA CALIFORNIA     BC           0.333 #> 2 2021-07-01 00:00:00        1 03         BAJA CALIFORNIA SUR BS           0.409 #> 3 2021-07-01 00:00:00        2 02         BAJA CALIFORNIA     BC           0.238 #> 4 2021-07-01 00:00:00        2 03         BAJA CALIFORNIA SUR BS           0.161 #> 5 2021-07-02 00:00:00        1 02         BAJA CALIFORNIA     BC           0.5   #> 6 2021-07-02 00:00:00        1 03         BAJA CALIFORNIA SUR BS           0.231 #> # … with abbreviated variable names ¹​ABREVIATURA, ²​`CASE HOSPITALIZATION RATE`  # Finalmente desconectamos datos_covid$disconnect() #> ✔ Desconectado"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/covidmx-package.html","id":null,"dir":"Reference","previous_headings":"","what":"covidmx: Herramientas para el analisis de datos de COVID-19 en Mexico — covidmx-package","title":"covidmx: Herramientas para el analisis de datos de COVID-19 en Mexico — covidmx-package","text":"Conjunto de herramientas para analisis de datos de COVID-19 en Mexico. Descarga y analiza los datos para COVID-19 de la Direccion General de Epidemiologia de Mexico, la Red de Infecciones Respiratorias Agudas Graves (Red IRAG) y la Global Initiative Sharing Influenza Data (GISAID). EN: Downloads analyzes data COVID-19 Mexican General Directorate Epidemiology, IRAG network GISAID.","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/covidmx/reference/covidmx-package.html","id":"autor-a","dir":"Reference","previous_headings":"","what":"Autor-a","title":"covidmx: Herramientas para el analisis de datos de COVID-19 en Mexico — covidmx-package","text":"Maintainer: Rodrigo Zepeda-Tello rzepeda17@gmail.com (ORCID) Authors: Mauricio Hernandez-Avila contributors: Alberto Almuiña (Author included zzz fragment) [contributor] Jonah Gabry (Author included cmdstanr fragment) [contributor] Rok Češnovar (Author included cmdstanr fragment) [contributor] Ben Bales (Author included cmdstanr fragment) [contributor] Mitzi Morris (Author included cmdstanr fragment) [contributor] Mikhail Popov (Author included cmdstanr fragment) [contributor] Mike Lawrence (Author included cmdstanr fragment) [contributor] William Michael Landau (Author included cmdstanr fragment) [contributor] Jacob Socolar (Author included cmdstanr fragment) [contributor] Andrew Johnson (Author included cmdstanr fragment) [contributor] Instituto Mexicano del Seguro Social [copyright holder, funder]","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/datosabiertos.html","id":null,"dir":"Reference","previous_headings":"","what":"Datos abiertos de COVID-19 — datosabiertos","title":"Datos abiertos de COVID-19 — datosabiertos","text":"Base de datos que contiene una extraccion pequenia de la base de datos abiertos que se obtiene mediante descarga_datos_abiertos.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/datosabiertos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Datos abiertos de COVID-19 — datosabiertos","text":"","code":"datosabiertos"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/datosabiertos.html","id":"formato","dir":"Reference","previous_headings":"","what":"Formato","title":"Datos abiertos de COVID-19 — datosabiertos","text":"Una lista con tres objetos dats Base de datos de la DGE actualizada el 8 septiembre 2022 filtrada BC, BCS en julio y agosto del 2022 dict Diccionario de datos disconnect Funcion que simula desconexion de duckdb","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/datosabiertos.html","id":"fuente","dir":"Reference","previous_headings":"","what":"Fuente","title":"Datos abiertos de COVID-19 — datosabiertos","text":"https://www.gob.mx/salud/documentos/datos-abiertos-152127","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/datosabiertos.html","id":"detalles","dir":"Reference","previous_headings":"","what":"Detalles","title":"Datos abiertos de COVID-19 — datosabiertos","text":"El proposito de esta base es poder probar las funciones que se aplican sobre datos_covid. La base contiene solo las entidades de BAJA CALIFORNIA y BAJA CALIFORNIA SUR durante julio y agosto del 2021.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_abiertos.html","id":null,"dir":"Reference","previous_headings":"","what":"Descarga de datos abiertos — descarga_datos_abiertos","title":"Descarga de datos abiertos — descarga_datos_abiertos","text":"Funcion para la descarga de datos abiertos de la Direccion General de Epidemiologia (DGE)","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_abiertos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Descarga de datos abiertos — descarga_datos_abiertos","text":"","code":"descarga_datos_abiertos(   dbdir = tempfile(fileext = \".duckdb\"),   sites.covid = get_sites_covid(),   site.covid.dic = get_site_dic(),   read_format = c(\"duckdb\", \"tibble\"),   drv = duckdb::duckdb(),   pragma_memory_limit = Sys.getenv(\"pragma_memory_limit\"),   tblname = \"covidmx\",   colClasses = get_col_class(),   download_process = c(\"pins\", \"download.file\"),   unzip_command = Sys.getenv(\"unzip_command\"),   unzip_args = Sys.getenv(\"unzip_args\"),   unzip_args_dict = list(exdir = \".\", overwrite = TRUE),   check_unzip_install = TRUE,   clear_zip = (download_process[1] != \"pins\"),   clear_csv = TRUE,   use_dict = TRUE,   datos_abiertos_zip_paths = NULL,   datos_abiertos_unzipped_path = NULL,   datos_abiertos_tbl = NULL,   diccionario_zip_path = NULL,   diccionario_unzipped_path = NULL,   diccionario = NULL,   quiet = FALSE,   cache_datos = NULL,   use_cache_on_failure = TRUE,   cache_diccionario = NULL,   force_download = FALSE,   show_warnings = TRUE,   board_url_name = \"datos_abiertos\",   board_url_name_dict = \"diccionario_covid\",   download_file_args = list(method = \"curl\", destfile = tempfile(), quiet = quiet),   download_file_args_dict = download_file_args,   descarga_db_datos_abiertos_tbl_args = list(),   descarga_db_diccionario_ssa_args = list(),   ... )"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_abiertos.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"Descarga de datos abiertos — descarga_datos_abiertos","text":"dbdir (opcional) Direccion donde guardar la base de datos con terminacion .duckdb. Corresponde al argumento de duckdb::dbConnect__duckdb_driver() sites.covid (opcional)  Sitios web con el vinculo los archivos .zip de los datos abiertos. Puedes cambiarlo por uno de los historicos, por ejemplo. La estructura es c(\"nombre\" = \"url\", \"nombre2\" = \"url2\"). La ultima verificacion del sitio web default fue el 6 de septiembre del 2022. site.covid.dic (opcional)  Sitio desde el cual descarga del diccionario de datos. La ultima verificacion del sitio fue el 6 de septiembre 2022. read_format (opcional) \"duckdb\" o \"tibble\" establece el formato de lectura de la base de datos. En la mayoria de los casos \"tibble\" va resultar en un error de memoria. La opcion de \"duckdb\" siempre es mas rapida por lo cual es el default. drv (opcional) Un  driver para dbConnect (default duckdb::duckdb()) pragma_memory_limit (opcional) Limite de memoria para el programa (ver PRAGMAS). Cambialo que sea mas o menos la mitad de tu RAM. La forma mas sencilla es como una variable ambiental con Sys.setenv('pragma_memory_limit' = '1GB') por ejemplo para un limite de 1 gigabyte. tblname (opcional)  Nombre de la tabla de duckdb donde guardar los datos por default se llama covidmx. Solo es relevante si estas usando el mismo dbdir para otro proyecto distinto. colClasses (opcional) Clases de la columna para leer en duckdb::read_csv_duckdb(). download_process (opcional)  Metodo para descargar ya sea pins o download.file. Se recomienda pins pues guarda en memoria la fecha de la ultima descarga y analiza si ha pasado mas de un dia desde la descarga. En caso afirmativo verifica si el archivo ha cambiado y si hubo cambios entonces lo descarga. unzip_command (opcional) Forma de extraer la base de datos de datos abiertos si unzip falla. La forma de llamarla es con system2(unzip_command, args = c(unzip_args, file_download_data)). unzip_args (opcional) Argumentos de extraccion de la base de datos de datos abiertos si unzip falla. La forma de llamarla es con system2(unzip_command, args = c(unzip_args, file_download_data)). unzip_args_dict (opcional) Lista de argumentos para usar utils::unzip en el diccionario de datos. check_unzip_install (opcional) Bandera de verificacion para checar si tienes lo necesario para unzippear los datos en el caso de que unzip sirva. clear_zip (opcional) Si borrar los archivos .zip descargados para el diccionario y los datos abiertos. se recomienda si estas usando pins. Ve la nota para mas informacion. clear_csv (opcional) Si borrar los archivos .csv que se generan despues de abrir el zip. El default es que si pues en general solo requieres el duckdb. use_dict (opcional) Si descargar el diccionario de site.covid.dic. datos_abiertos_zip_paths (opcional)  Camino los datos abiertos si ya los descargaste en zip datos_abiertos_unzipped_path (opcional)  Camino los datos abiertos csv si ya los descargaste y descomprimiste el archivo zip en un csv datos_abiertos_tbl (opcional) Camino un archivo .duckdb con los datos formateados diccionario_zip_path (opcional)  Camino al diccionario si ya losdescargaste en zip diccionario_unzipped_path (opcional)  Camino al diccionario csv si ya lo descargaste y descomprimiste el archivo zip en un csv diccionario (opcional)  Lo que resulta de realizar una descarga del diccionario usando descarga_diccionario quiet (opcional) Variable para mostrar mensajes cache_datos (opcional) Direccion donde guardar los datos en memoria usando pins para tener que volver descargarlos si nada ha cambiado use_cache_on_failure (opcional) Booleana. Establece que si se pueden descargar datos nuevos utilice los que tenga en memoria. Por default es TRUE. cache_diccionario (opcional) Direccion donde guardar el diccionario en memoria usando pins para tener que volver descargarlo si nada ha cambiado force_download (opcional) Analiza si cambio el pin y descarga datos nuevos en caso afirmativo aunque haya pasado menos de un dia. show_warnings (opcional) si arrojar warnings board_url_name (opcional) Establece el nombre del pins::board_url para los datos abiertos (si ya usas pins para que se empalme). Por default se llama datos_abiertos board_url_name_dict (opcional) Establece el nombre del pins::board_url para los datos abiertos. Por default se llama diccionario_covid download_file_args (opcional) Lista de argumentos adicionales para download.file de los datos si se elige este metodo para descargar. download_file_args_dict (opcional) Lista de argumentos adicionales para download.file del diccionario si se elige este metodo de descarga. descarga_db_datos_abiertos_tbl_args (opcional) Lista con argumentos adicionales para el pins::pin_download de datos abiertos descarga_db_diccionario_ssa_args (opcional) Lista con argumentos adicionales para el pins::pin_download de datos abiertos ... (opcional) Parametros adicionales para DBI::dbConnect.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_abiertos.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"Descarga de datos abiertos — descarga_datos_abiertos","text":"Lista de valores: dats        - Tabla conectada mediante duckdb::dbConnect__duckdb_driver() (si duckdb) o tibble (si tibble) disconnect  - Funcion para cerrar la conexion la base de datos. dict        - Lista de tibbles con el diccionario de datos para cada variable","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_abiertos.html","id":"detalles","dir":"Reference","previous_headings":"","what":"Detalles","title":"Descarga de datos abiertos — descarga_datos_abiertos","text":"La funcion de descarga principal es descarga_datos_abiertos() llama las siguientes funciones en orden: descarga_diccionario() Se encarga de descargar y formatear el diccionario de datos descarga_db() Se encarga de descargar y formatear la base de datos pega_db_datos_abiertos_tbl_y_diccionario() Pega ambos en el formato lista de covidmx su vez descarga_diccionario() ejecuta las siguientes para obtener el diccionario de datos: descarga_db_diccionario_ssa() Descarga el diccionario de la DGE unzip_db_diccionario_ssa() Libera el archivo zip descargado parse_db_diccionario_ssa() Genera una lista de tiblles con el diccionario por variable Por otro lado,descarga_db() ejecuta las siguientes para obtener los datos abiertos: descarga_db_datos_abiertos_tbl() Descarga las bases de datos de covid de la DGE unzip_db_datos_abiertos_tbl() Libera el archivo zip descargado parse_db_datos_abiertos_tbl() Genera una base de datos en duckdb (o tibble) con la informacion Si en algun momento se interrumpio la descarga o hubo problemas de conexion o detuviste el proceso de generacion de la base de datos abiertos puedes llamar las funciones de read_datos_abiertos().","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_abiertos.html","id":"nota","dir":"Reference","previous_headings":"","what":"Nota","title":"Descarga de datos abiertos — descarga_datos_abiertos","text":"te recomiendo borrar el cache con clear_zip o editarlo por cualquier otro medio si estas usando pins pues puede romperse la dependencia. Si accidentalmente lo borraste usa pins::board_cache_path() para ir al path y borrar manualmente toda la carpeta.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_abiertos.html","id":"memoria-ram","dir":"Reference","previous_headings":"","what":"Memoria RAM","title":"Descarga de datos abiertos — descarga_datos_abiertos","text":"Si tienes RAM que te sobre puedes crear una base de datos en duckdb sino leer directo el archivo csv. Esto se logra con read_format = tibble. lo recomiendo pues puedes terminar con tu sesion de R si se te acaba la memoria. Windows Para abrir el archivo .zip quiza requieras tambien descargar e instalar 7Zip por default el sistema lo busca en C:\\\\Program Files\\\\7-Zip\\\\7z.exe pero si esta ese directorio es necesario que en unzip_command especifiques el camino donde se instalo 7z.exe.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_abiertos.html","id":"uso-de-pins","dir":"Reference","previous_headings":"","what":"Uso de pins","title":"Descarga de datos abiertos — descarga_datos_abiertos","text":"Para almacenar los datos se utiliza un pequenio cambio sobre la libreria pins. Los datos se descargan y se almacenan en cache junto con informacion sobre cuando fue la descarga. Si ha pasado un dia desde la ultima descarga se descarga nada nuevo. Si los datos que se tienen han cambiado respecto lo que esta en linea tampoco se vuelven descargar aunque haya pasado mas de un dia. Si se te fue el Internet te preocupes, pins lee tu descarga mas reciente. Para ver donde estan descargados tus datos usa pins::board_cache_path(). Para borrarlos usa pins::cache_prune().","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_abiertos.html","id":"metodos-de-unzip","dir":"Reference","previous_headings":"","what":"Metodos de unzip","title":"Descarga de datos abiertos — descarga_datos_abiertos","text":"Por default el programa intenta abrir la base de datos con utils::unzip(). Sin embargo historicamente la base de datos ha estado codificada de tal forma que utils::unzip() pueda abrirla. Para ello se utilizaban diferentes comandos en particular el default que hemos visto funcionaba son los comandos de terminal unzip (en Linux/OSX) y 7zip (en Windows). En caso de ser requeridos el sistema te lo hara saber junto con las instrucciones de instalacion","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_abiertos.html","id":"referencias","dir":"Reference","previous_headings":"","what":"Referencias","title":"Descarga de datos abiertos — descarga_datos_abiertos","text":"Secretaría de Salud (2022). Datos Abiertos de COVID-19 URL: https://www.gob.mx/salud/documentos/datos-abiertos-152127","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_abiertos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"Descarga de datos abiertos — descarga_datos_abiertos","text":"","code":"if (FALSE) { # Descarga de la base de datos junto con diccionario en duckdb y la guarda en # un archivo llamado covidmx.duckdb file_duck <- \"covidmx.duckdb\" # descomenta esta linea datos_covid <- descarga_datos_abiertos(dbdir = file_duck, show_warnings = FALSE)  # Luego haces algo con esos datos...  # Cuando terminas cierras la sesion: datos_covid$disconnect()  # Despues podras leerlos con read_datos_abiertos cuando quieras: datos_covid <- read_datos_abiertos(dbdir = file_duck) datos_covid$disconnect()  # Si no pones `dbdir` nota que los datos se guardan en un archivo temporal que se elimina # al cerrar tu sesion datos_covid <- descarga_datos_abiertos()  # Desconectamos datos_covid$disconnect()  # Tambien puedes descargar de otra direccion con sites.covid url <- c(   \"link_de_ejemplo\" =     \"https://github.com/RodrigoZepeda/covidmx/raw/main/datos_abiertos_covid19.zip\" ) datos_covid <- descarga_datos_abiertos(sites.covid = url)  # Desconectamos datos_covid$disconnect() }"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_ocupacion_hospitalaria.html","id":null,"dir":"Reference","previous_headings":"","what":"LEE LA BASE DE DATOS DE OCUPACIoN HOSPITALARIA — descarga_datos_ocupacion_hospitalaria","title":"LEE LA BASE DE DATOS DE OCUPACIoN HOSPITALARIA — descarga_datos_ocupacion_hospitalaria","text":"descarga_datos_ocupacion_hospitalaria Lee los datos de ocupacion hospitalaria de la RED IRAG disponibles en https://www.gits.igg.unam.mx/red-irag-dashboard/reviewHome#","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_ocupacion_hospitalaria.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"LEE LA BASE DE DATOS DE OCUPACIoN HOSPITALARIA — descarga_datos_ocupacion_hospitalaria","text":"","code":"descarga_datos_ocupacion_hospitalaria(nivel = c(\"Estatal\", \"Unidad Médica\"))"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_ocupacion_hospitalaria.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"LEE LA BASE DE DATOS DE OCUPACIoN HOSPITALARIA — descarga_datos_ocupacion_hospitalaria","text":"nivel \"Estatal\" o \"Unidad Médica\"","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_ocupacion_hospitalaria.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"LEE LA BASE DE DATOS DE OCUPACIoN HOSPITALARIA — descarga_datos_ocupacion_hospitalaria","text":"data.frame con los datos de ocupacion hospitalaria","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_ocupacion_hospitalaria.html","id":"detalles","dir":"Reference","previous_headings":"","what":"Detalles","title":"LEE LA BASE DE DATOS DE OCUPACIoN HOSPITALARIA — descarga_datos_ocupacion_hospitalaria","text":"official product / este es un producto oficial Spanish Los datos son descargados de manera automatica en mi Github: RodrigoZepeda/CapacidadHospitalariaMX y esta funcion los lee de ahí","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_ocupacion_hospitalaria.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"LEE LA BASE DE DATOS DE OCUPACIoN HOSPITALARIA — descarga_datos_ocupacion_hospitalaria","text":"","code":"if (FALSE) { ocupacion_hospitalaria <- descarga_datos_ocupacion_hospitalaria() }"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_red_irag.html","id":null,"dir":"Reference","previous_headings":"","what":"Descarga la base de datos de ocupacion hospitalaria de la red IRAG — descarga_datos_red_irag","title":"Descarga la base de datos de ocupacion hospitalaria de la red IRAG — descarga_datos_red_irag","text":"descarga_datos_red_irag Lee los datos de ocupacion hospitalaria de la RED IRAG disponibles en https://www.gits.igg.unam.mx/red-irag-dashboard/reviewHome# y analizados traves de RodrigoZepeda/CapacidadHospitalariaMX","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_red_irag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Descarga la base de datos de ocupacion hospitalaria de la red IRAG — descarga_datos_red_irag","text":"","code":"descarga_datos_red_irag(   nivel = c(\"Estatal\", \"Unidad Médica\"),   cache = NULL,   use_cache_on_failure = TRUE,   quiet = TRUE,   force_download = FALSE,   show_warnings = TRUE,   ... )"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_red_irag.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"Descarga la base de datos de ocupacion hospitalaria de la red IRAG — descarga_datos_red_irag","text":"nivel (opcional) Regresa la ocupacion \"Estatal\"(default) o por \"Unidad Medica\" cache (opcional) cache para pins::board_url(). Representa el directorio donde se almacenaran los datos descargados en formato de pins. use_cache_on_failure (opcional)  parametro para pins::board_url(). En caso de TRUE (default) si puede descargar nueva informacion utiliza la que ya tiene en memoria aunque sea vieja. quiet (opcional) booleana para imprimir mensajes en la consola. force_download (opcional)  analiza si cambio el pin y descarga datos nuevos en caso afirmativo. show_warnings (opcional) si arrojar warnings o callar ... parametros adicionales para pins::pin_download().","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_red_irag.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"Descarga la base de datos de ocupacion hospitalaria de la red IRAG — descarga_datos_red_irag","text":"tibble con los datos de ocupacion hospitalaria Unidad médica - En caso nivel = \"Unidad Medica\" la unidad la que pertenecen los datos Institución   - Institucion la que pertenece la unidad medica Estado        - Entidad federativa de la informacion o de la unidad CLUES         - La Clave Unica de Establecimientos de Salud para la unidad (si nivel = \"Unidad Medica\") Fecha         - La fecha la cual corresponde dicha ocupacion Actualizacion - La fecha de actualizacion ultima de los datos. Hospitalizados (%)    - Porcentaje de ocupacion en camas de hospitalizacion. Ventilación (%)       - Porcentaje de ocupacion en ventiladores. UCI y Ventilación (%) - Porcentaje de ocupacion en unidades de cuidado intensivo con ventilacion.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_red_irag.html","id":"detalles","dir":"Reference","previous_headings":"","what":"Detalles","title":"Descarga la base de datos de ocupacion hospitalaria de la red IRAG — descarga_datos_red_irag","text":"Los datos de Red IRAG son descargados diariamente de manera automatica en Github: RodrigoZepeda/CapacidadHospitalariaMX y esta funcion los lee de ahi. Puede que esten un poco rezagados respecto la pagina de la RED IRAG (https://www.gits.igg.unam.mx/red-irag-dashboard/reviewHome#) pero el rezago nunca es mayor un dia.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_red_irag.html","id":"referencias","dir":"Reference","previous_headings":"","what":"Referencias","title":"Descarga la base de datos de ocupacion hospitalaria de la red IRAG — descarga_datos_red_irag","text":"Secretaría de Salud (2022). Sistema de Información de la Red IRAG URL: https://www.gits.igg.unam.mx/red-irag-dashboard/reviewHome Zepeda-Tello, R. (2022). Descarga Automática de Datos de la Red IRAG URL: https://github.com/RodrigoZepeda/CapacidadHospitalariaMX","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_red_irag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"Descarga la base de datos de ocupacion hospitalaria de la red IRAG — descarga_datos_red_irag","text":"","code":"if (FALSE) { # Descarga de datos estatales ocupacion_hospitalaria <- descarga_datos_red_irag(\"Estatal\")  # Descarga de datos por unidad medica ocupacion_hospitalaria <- descarga_datos_red_irag(\"Unidad Medica\")  # Si ya descargaste hace menos de un día el programa solito se da cuenta y lee de memoria # sin verificar que el contenido en Internet haya cambiado ocupacion_unidad <- descarga_datos_red_irag(\"Unidad Medica\")  # Puedes forzarlo a checar el contenido en Internet usando ocupacion_unidad <- descarga_datos_red_irag(\"Unidad Medica\", force_download = TRUE)  # Así se ven los datos ocupacion_hospitalaria |>   plot_covid(df_variable = \"Hospitalizados (%)\", df_covariates = \"Estado\", type = \"area\") }"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_variantes_GISAID.html","id":null,"dir":"Reference","previous_headings":"","what":"Lee la base de datos de variantes de COVID-19 en Mexico generada por GISAID — descarga_datos_variantes_GISAID","title":"Lee la base de datos de variantes de COVID-19 en Mexico generada por GISAID — descarga_datos_variantes_GISAID","text":"descarga_datos_variantes_GISAID Lee los datos de variantes del reporte nacional diario en RodrigoZepeda/VariantesCovid creado partir de la informacion de la Global Initiative Sharing Avian Influenza Data (GISAID)","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_variantes_GISAID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Lee la base de datos de variantes de COVID-19 en Mexico generada por GISAID — descarga_datos_variantes_GISAID","text":"","code":"descarga_datos_variantes_GISAID(   nivel = c(\"nacional\", \"cdmx\"),   cache = NULL,   use_cache_on_failure = TRUE,   quiet = FALSE,   force_download = FALSE,   show_warnings = TRUE,   ... )"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_variantes_GISAID.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"Lee la base de datos de variantes de COVID-19 en Mexico generada por GISAID — descarga_datos_variantes_GISAID","text":"nivel (opcional) si se desea descargar informacion \"nacional\" (default) o de la Ciudad de Mexico: \"cdmx\". cache (opcional) cache para pins::board_url(). Representa el directorio donde se almacenaran los datos descargados en formato de pins. use_cache_on_failure (opcional)  parametro para pins::board_url(). En caso de TRUE (default) si puede descargar nueva informacion utiliza la que ya tiene en memoria aunque sea vieja. quiet (opcional) booleana para imprimir mensajes en la consola. force_download (opcional)  analiza si cambio el pin y descarga datos nuevos en caso afirmativo. show_warnings (opcional) si arrojar warnings o callar ... parametros adicionales para pins::pin_download().","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_variantes_GISAID.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"Lee la base de datos de variantes de COVID-19 en Mexico generada por GISAID — descarga_datos_variantes_GISAID","text":"tibble con los datos de porcentuales de variantes variant       - La variante clasificada mediante Pangolin semana        - Semana epidemiologica lubridate::epiweek() la que corresponde la variante ano           - Anio al que corresponde la toma de muestra n             - El total de muestras de dicha semana registradas para esa variante freq          - La proporcion de las variantes de dicha semana ocupada por dicha variante. Se obtiene dividiendo n/sum(n) para cada semana. Actualizacion - La fecha de actualizacion ultima de los datos. Fuente        - La fuente desde la cual se obtuvo la informacion de dicha variante.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_variantes_GISAID.html","id":"detalles","dir":"Reference","previous_headings":"","what":"Detalles","title":"Lee la base de datos de variantes de COVID-19 en Mexico generada por GISAID — descarga_datos_variantes_GISAID","text":"Cada vez que uses estos datos necesitas citar GISAID (ver referencias) asi como el reporte en RodrigoZepeda/VariantesCovid Los datos son descargados de manera automatica en mi Github: RodrigoZepeda/VariantesCovid el programa descarga_datos_variantes_GISAID se conecta dicho repositorio, busca si la informacion esta actualizada y si si la descarga, si , utiliza informacion almacenada en el cache local. La descarga usa el paquete pins","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_variantes_GISAID.html","id":"referencias","dir":"Reference","previous_headings":"","what":"Referencias","title":"Lee la base de datos de variantes de COVID-19 en Mexico generada por GISAID — descarga_datos_variantes_GISAID","text":"Khare, S., et al (2021) GISAID's Role Pandemic Response. China CDC Weekly, 3(49): 1049-1051. doi:10.46234/ccdcw2021.255 PMCID: 8668406 Elbe, S. Buckland-Merrett, G. (2017) Data, disease diplomacy: GISAID’s innovative contribution global health. Global Challenges, 1:33-46. doi:10.1002/gch2.1018 PMCID: 31565258 Shu, Y. McCauley, J. (2017) GISAID: vision reality. EuroSurveillance, 22(13) doi:10.2807/1560-7917.ES.2017.22.13.30494 PMCID: PMC5388101 Zepeda-Tello, R. (2022). Reporte Nacional de Variantes de COVID-19. URL: https://github.com/RodrigoZepeda/VariantesCovid","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_datos_variantes_GISAID.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"Lee la base de datos de variantes de COVID-19 en Mexico generada por GISAID — descarga_datos_variantes_GISAID","text":"","code":"if (FALSE) { # Descarga de variantes a nivel nacional variantes_covid <- descarga_datos_variantes_GISAID(\"nacional\")  # Descarga de variantes para CDMX variantes_covid <- descarga_datos_variantes_GISAID(\"cdmx\")  # Si ya descargaste hace menos de un día el programa solito se da cuenta y lee de memoria # sin verificar que el contenido en Internet haya cambiado variantes_covid <- descarga_datos_variantes_GISAID(\"nacional\")  # Puedes forzarlo a checar el contenido en Internet usando variantes_covid <- descarga_datos_variantes_GISAID(\"nacional\", force_download = TRUE)  # Para visualizar if (requireNamespace(\"ggstream\") & requireNamespace(\"lubridate\")) {   library(ggplot2)   library(lubridate)   ggplot(variantes_covid) +     ggstream::geom_stream(aes(       x = ymd(\"2019/12/27\") + years(ano - 2020) + weeks(semana),       y = n, fill = variant,     )) +     theme_minimal() } }"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Auxiliares para la descarga de datos abiertos — descarga_db","title":"Auxiliares para la descarga de datos abiertos — descarga_db","text":"Conjunto de funciones para apoyar la descarga de datos abiertos de la Direccion General de Epidemiologia (DGE) La funcion de descarga principal es descarga_datos_abiertos() llama las siguientes funciones en orden: descarga_diccionario() Se encarga de descargar y formatear el diccionario de datos descarga_db() Se encarga de descargar y formatear la base de datos pega_db_datos_abiertos_tbl_y_diccionario() Pega ambos en el formato lista de covidmx su vez descarga_diccionario() ejecuta las siguientes para obtener el diccionario de datos: descarga_db_diccionario_ssa() Descarga el diccionario de la DGE unzip_db_diccionario_ssa() Libera el archivo zip descargado parse_db_diccionario_ssa() Genera una lista de tiblles con el diccionario por variable Por otro lado,descarga_db() ejecuta las siguientes para obtener los datos abiertos: descarga_db_datos_abiertos_tbl() Descarga las bases de datos de covid de la DGE unzip_db_datos_abiertos_tbl() Libera el archivo zip descargado parse_db_datos_abiertos_tbl() Genera una base de datos en duckdb (o tibble) con la informacion Si en algun momento se interrumpio la descarga o hubo problemas de conexion o detuviste el proceso de generacion de la base de datos abiertos puedes llamar las funciones de read_datos_abiertos().","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Auxiliares para la descarga de datos abiertos — descarga_db","text":"","code":"descarga_db(   read_format = c(\"duckdb\", \"tibble\"),   tblname = \"covidmx\",   pragma_memory_limit = Sys.getenv(\"pragma_memory_limit\"),   drv = duckdb::duckdb(),   dbdir = tempfile(fileext = \".duckdb\"),   colClasses = get_col_class(),   sites.covid = get_sites_covid(),   download_process = c(\"pins\", \"download.file\"),   unzip_command = Sys.getenv(\"unzip_command\"),   unzip_args = Sys.getenv(\"unzip_args\"),   check_unzip_install = TRUE,   clear_zip = (download_process[1] != \"pins\"),   clear_csv = TRUE,   force_download = FALSE,   show_warnings = TRUE,   datos_abiertos_zip_paths = NULL,   datos_abiertos_unzipped_path = NULL,   datos_abiertos_tbl = NULL,   quiet = FALSE,   board_url_name = \"datos_abiertos\",   cache = NULL,   use_cache_on_failure = TRUE,   download_file_args = list(method = \"curl\", destfile = tempfile(), quiet = quiet),   descarga_db_datos_abiertos_tbl_args = list(),   ... )  descarga_diccionario(   download_process = c(\"pins\", \"download.file\"),   site.covid.dic = get_site_dic(),   quiet = FALSE,   clear_zip = download_process[1] != \"pins\",   clear_csv = TRUE,   diccionario_zip_path = NULL,   diccionario_unzipped_path = NULL,   diccionario = NULL,   board_url_name_dict = \"diccionario_covid\",   cache_diccionario = NULL,   use_cache_on_failure = TRUE,   force_download = FALSE,   show_warnings = TRUE,   download_file_args_dict = list(method = \"curl\", destfile = tempfile(), quiet = quiet),   unzip_args_dict = list(exdir = \".\", overwrite = TRUE),   descarga_db_diccionario_ssa_args = list() )  descarga_db_datos_abiertos_tbl(   download_process = c(\"pins\", \"download.file\"),   sites.covid = get_sites_covid(),   quiet = FALSE,   board_url_name = \"datos_abiertos\",   cache = NULL,   use_cache_on_failure = TRUE,   force_download = FALSE,   show_warnings = TRUE,   download_file_args = list(method = \"curl\", destfile = tempfile(), quiet = quiet),   ... )  descarga_db_diccionario_ssa(   download_process = c(\"pins\", \"download.file\"),   site.covid.dic = get_site_dic(),   quiet = FALSE,   board_url_name_dict = \"diccionario_covid\",   cache_diccionario = NULL,   use_cache_on_failure = TRUE,   force_download = FALSE,   show_warnings = TRUE,   download_file_args_dict = list(method = \"curl\", destfile = tempfile(), quiet = quiet),   ... )  unzip_db_datos_abiertos_tbl(   datos_abiertos_zip_paths,   unzip_command = Sys.getenv(\"unzip_command\"),   unzip_args = Sys.getenv(\"unzip_args\"),   check_unzip_install = TRUE,   quiet = FALSE,   clear_zip = FALSE )  unzip_db_diccionario_ssa(   diccionario_zip_path,   unzip_args_dict = list(exdir = \".\", overwrite = TRUE),   clear_zip = FALSE )  parse_db_diccionario_ssa(diccionario_unzipped_path, clear_csv = FALSE)  parse_db_datos_abiertos_tbl(   datos_abiertos_unzipped_path,   read_format = c(\"duckdb\", \"tibble\"),   pragma_memory_limit = Sys.getenv(\"pragma_memory_limit\"),   dbdir = tempfile(fileext = \".duckdb\"),   drv = duckdb::duckdb(),   colClasses = get_col_class(),   tblname = \"covidmx\",   quiet = TRUE,   clear_csv = FALSE,   ... )  pega_db_datos_abiertos_tbl_y_diccionario(datos_abiertos_tbl, diccionario)"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_db.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"Auxiliares para la descarga de datos abiertos — descarga_db","text":"read_format (opcional) \"duckdb\" o \"tibble\" establece el formato de lectura de la base de datos. En la mayoria de los casos \"tibble\" va resultar en un error de memoria. La opcion de \"duckdb\" siempre es mas rapida por lo cual es el default. tblname (opcional)  Nombre de la tabla de duckdb donde guardar los datos por default se llama covidmx. Solo es relevante si estas usando el mismo dbdir para otro proyecto distinto. pragma_memory_limit (opcional) Limite de memoria para el programa (ver PRAGMAS). Cambialo que sea mas o menos la mitad de tu RAM. La forma mas sencilla es como una variable ambiental con Sys.setenv('pragma_memory_limit' = '1GB') por ejemplo para un limite de 1 gigabyte. drv (opcional) Un  driver para dbConnect (default duckdb::duckdb()) dbdir (opcional) Direccion donde guardar la base de datos con terminacion .duckdb. Corresponde al argumento de duckdb::dbConnect__duckdb_driver() colClasses (opcional) Clases de la columna para leer en duckdb::read_csv_duckdb(). sites.covid (opcional)  Sitios web con el vinculo los archivos .zip de los datos abiertos. Puedes cambiarlo por uno de los historicos, por ejemplo. La estructura es c(\"nombre\" = \"url\", \"nombre2\" = \"url2\"). La ultima verificacion del sitio web default fue el 6 de septiembre del 2022. download_process (opcional)  Metodo para descargar ya sea pins o download.file. Se recomienda pins pues guarda en memoria la fecha de la ultima descarga y analiza si ha pasado mas de un dia desde la descarga. En caso afirmativo verifica si el archivo ha cambiado y si hubo cambios entonces lo descarga. unzip_command (opcional) Forma de extraer la base de datos de datos abiertos si unzip falla. La forma de llamarla es con system2(unzip_command, args = c(unzip_args, file_download_data)). unzip_args (opcional) Argumentos de extraccion de la base de datos de datos abiertos si unzip falla. La forma de llamarla es con system2(unzip_command, args = c(unzip_args, file_download_data)). check_unzip_install (opcional) Bandera de verificacion para checar si tienes lo necesario para unzippear los datos en el caso de que unzip sirva. clear_zip (opcional) Si borrar los archivos .zip descargados para el diccionario y los datos abiertos. se recomienda si estas usando pins. Ve la nota para mas informacion. clear_csv (opcional) Si borrar los archivos .csv que se generan despues de abrir el zip. El default es que si pues en general solo requieres el duckdb. force_download (opcional) Analiza si cambio el pin y descarga datos nuevos en caso afirmativo aunque haya pasado menos de un dia. show_warnings (opcional) si arrojar warnings datos_abiertos_zip_paths (opcional)  Camino los datos abiertos si ya los descargaste en zip datos_abiertos_unzipped_path (opcional)  Camino los datos abiertos csv si ya los descargaste y descomprimiste el archivo zip en un csv datos_abiertos_tbl (opcional) Camino un archivo .duckdb con los datos formateados quiet (opcional) Variable para mostrar mensajes board_url_name (opcional) Establece el nombre del pins::board_url para los datos abiertos (si ya usas pins para que se empalme). Por default se llama datos_abiertos cache parametro para el cache de pins::board_url use_cache_on_failure (opcional) Booleana. Establece que si se pueden descargar datos nuevos utilice los que tenga en memoria. Por default es TRUE. download_file_args (opcional) Lista de argumentos adicionales para download.file de los datos si se elige este metodo para descargar. descarga_db_datos_abiertos_tbl_args (opcional) Lista con argumentos adicionales para el pins::pin_download de datos abiertos ... Parametros adicionales para pins::pin_download site.covid.dic (opcional)  Sitio desde el cual descarga del diccionario de datos. La ultima verificacion del sitio fue el 6 de septiembre 2022. diccionario_zip_path (opcional)  Camino al diccionario si ya losdescargaste en zip diccionario_unzipped_path (opcional)  Camino al diccionario csv si ya lo descargaste y descomprimiste el archivo zip en un csv diccionario (opcional)  Lo que resulta de realizar una descarga del diccionario usando descarga_diccionario board_url_name_dict (opcional) Establece el nombre del pins::board_url para los datos abiertos. Por default se llama diccionario_covid cache_diccionario (opcional) Direccion donde guardar el diccionario en memoria usando pins para tener que volver descargarlo si nada ha cambiado download_file_args_dict (opcional) Lista de argumentos adicionales para download.file del diccionario si se elige este metodo de descarga. unzip_args_dict (opcional) Lista de argumentos para usar utils::unzip en el diccionario de datos. descarga_db_diccionario_ssa_args (opcional) Lista con argumentos adicionales para el pins::pin_download de datos abiertos","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_db.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"Auxiliares para la descarga de datos abiertos — descarga_db","text":"Lista de valores: dats        - Tabla conectada mediante duckdb::dbConnect__duckdb_driver() (si duckdb) o tibble (si tibble) disconnect  - Funcion para cerrar la conexion la base de datos. dict        - Lista de tibbles con el diccionario de datos para cada variable","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/covidmx/reference/descarga_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"Auxiliares para la descarga de datos abiertos — descarga_db","text":"","code":"if (FALSE) { # Descarga solo el diccionario # diccionario    <- descarga_diccionario()  # O bien descarga solo los datos abiertos datos_abiertos <- descarga_db()  # Pegalos en el formato que se necesita para el resto de funciones datos_covid <- pega_db_datos_abiertos(datos_abiertos, diccionario)  # Desconectamos datos_covid$disconnect()  # Tambien puedes descargar paso por paso datos_abiertos <- descarga_db_datos_abiertos_tbl() |> # Descarga   unzip_db_datos_abiertos_tbl() |> # Unzippea   parse_db_datos_abiertos_tbl() # Duckdb  # O bien el diccionario diccionario <- descarga_db_diccionario_ssa() |> # Descarga   unzip_db_diccionario_ssa() |> # Unzippea   parse_db_diccionario_ssa() # Tibble  # Si descargaste cada uno por separado necesitas la funcion pega para # juntarlos en un unico objeto datos_covid <- pega_db_datos_abiertos_tbl_y_diccionario(datos_abiertos, diccionario) }"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/estima_rt.html","id":null,"dir":"Reference","previous_headings":"","what":"RT: Número efectivo de reproducción — estima_rt","title":"RT: Número efectivo de reproducción — estima_rt","text":"estima_rt Calcula el número efectivo de reproducción por fecha y entidad usando los metodos de EpiEstim::estimate_R(). Por default calcula el número efectivo de reproducción para cada estado.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/estima_rt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"RT: Número efectivo de reproducción — estima_rt","text":"","code":"estima_rt(   datos_covid,   entidades = c(\"AGUASCALIENTES\", \"BAJA CALIFORNIA\", \"BAJA CALIFORNIA SUR\", \"CAMPECHE\",     \"CHIAPAS\", \"CHIHUAHUA\", \"CIUDAD DE MÉXICO\", \"COAHUILA DE ZARAGOZA\", \"COLIMA\",     \"DURANGO\", \"GUANAJUATO\", \"GUERRERO\", \"HIDALGO\", \"JALISCO\", \"MÉXICO\",     \"MICHOACÁN DE OCAMPO\", \"MORELOS\", \"NAYARIT\", \"NUEVO LEÓN\", \"OAXACA\", \"PUEBLA\",     \"QUERÉTARO\", \"QUINTANA ROO\", \"SAN LUIS POTOSÍ\", \"SINALOA\", \"SONORA\", \"TABASCO\",     \"TAMAULIPAS\", \"TLAXCALA\", \"VERACRUZ DE IGNACIO DE LA LLAVE\", \"YUCATÁN\", \"ZACATECAS\"),   group_by_entidad = TRUE,   entidad_tipo = c(\"Unidad Medica\", \"Residencia\", \"Nacimiento\"),   fecha_tipo = c(\"Sintomas\", \"Ingreso\", \"Defuncion\"),   tipo_clasificacion = c(\"Sospechosos\", \"Confirmados COVID\", \"Negativo a COVID\",     \"Inválido\", \"No realizado\"),   tipo_paciente = c(\"AMBULATORIO\", \"HOSPITALIZADO\", \"NO ESPECIFICADO\"),   list_name = \"estima_rt\",   min_date = as.POSIXct(\"2020-01-01\", tz = Sys.timezone(), format = \"%Y-%m-%d\"),   max_date = as.POSIXct(Sys.time()),   method = \"parametric_si\",   config = if (requireNamespace(\"EpiEstim\", quietly = TRUE)) {          EpiEstim::make_config(list(mean_si = 2.5, std_si = 1.6))  } else {      NULL  },   ... )"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/estima_rt.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"RT: Número efectivo de reproducción — estima_rt","text":"datos_covid (obligatorio) Lista de tibbles o duckdbs resultante de descarga_datos_abiertos() o read_datos_abiertos() entidades (opcional)  Vector con las entidades de las unidades medicas analizar. Opciones: AGUASCALIENTES, BAJA CALIFORNIA, BAJA CALIFORNIA SUR, CAMPECHE, CHIAPAS, CHIHUAHUA, CIUDAD DE MEXICO, COAHUILA DE ZARAGOZA , COLIMA, DURANGO, GUANAJUATO, GUERRERO, HIDALGO, JALISCO, MEXICO, MICHOACAN DE OCAMPO, MORELOS,NAYARIT NUEVO LEON, OAXACA ,PUEBLA, QUERETARO,QUINTANA ROO, SAN LUIS POTOSI, SINALOA, SONORA, TABASCO, TAMAULIPAS,TLAXCALA, VERACRUZ DE IGNACIO DE LA LLAVE, YUCATAN, ZACATECAS. group_by_entidad (opcional) TRUE obtiene los casos para cada entidad reportando en cada fecha la entidad y los casos en dicha entidad. FALSE  junta las entidades sumando sus casos en una sola observacion por cada fecha. entidad_tipo (opcional) Indica que se refiere las entidades seleccionadas. Elige una de las opciones: Unidad Medica (entidad de la unidad medica), Nacimiento (entidad de origen del individuo) o Residencia (entidad donde reside el individuo). fecha_tipo (opcional) Selecciona si la fecha que se utiliza es la fecha de Ingreso (si aplica), la fecha de Sintomas o la de Defuncion (si aplica). El default es fecha de Sintomas. tipo_clasificacion (opcional)  Vector con el tipo de clasificaciones (por la prueba) incluir:Sospechosos,Confirmados COVID, Negativo COVID, Inv\\u00e1lido, realizado tipo_paciente (opcional) Vector con el tipo de pacientes incluir. Opciones: AMBULATORIO, HOSPITALIZADO, ESPECIFICADO. Por default se incluyen todos. list_name (opcional) Asigna un nombre en la lista de datos la base generada min_date (opcional) Mínima fecha partir de la cual estimar el RT. max_date (opcional) Máxima fecha partir de la cual estimar el RT. method (opcional) Metodo para estimar el RT con EpiEstim::estimate_R(). Por default se recomienda el método paramétrico de intervalo serial parametric_si. config (opcional) Configuracion para la estimacion del RT usando EpiEstim::make_config(). Por default se utiliza una media del intervalo serial de mean_si = 2.5 y una desviación estandar de std_si = 1.6. Sin embargo, como el intervalo serial depende mucho de la variante se recomienda cambiarlo. ... (opcional) Parámetros adicionales para EpiEstim::estimate_R().","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/estima_rt.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"RT: Número efectivo de reproducción — estima_rt","text":"Appends la lista de datos_covid una nueva entrada de nombre list_name (default: estima_rt) con una base de datos (tibble) con los resultados agregados. estima_rt - Base de datos generara con los datos agregados (el nombre cambia si se usa list_name). dict - Diccionario de datos dats - Datos originales (conexion duckdb o tibble) disconnect  - Función para desconectarte de duckdb ... - Cualquier otro elemento que ya existiera en datos_covid","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/estima_rt.html","id":"detalles","dir":"Reference","previous_headings":"","what":"Detalles","title":"RT: Número efectivo de reproducción — estima_rt","text":"Se sugiere establecer una mínima fecha y una máxima fecha con min_date y max_date para la estimación pues los intervalos seriales de omicron son distintos los de la variante delta.","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/covidmx/reference/estima_rt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"RT: Número efectivo de reproducción — estima_rt","text":"","code":"# Para el ejemplo usaremos los datos precargados pero tu puedes # correr el ejemplo descargando informacion mas reciente: # datos_covid <- descarga_datos_abiertos() #Sugerido  datos_covid <- datosabiertos  # Casos a nivel nacional por estado en todos suppressWarnings(   datos_covid <- datos_covid |> estima_rt() ) #> Default config will estimate R on weekly sliding windows. #>     To change this change the t_start and t_end arguments.  #> Default config will estimate R on weekly sliding windows. #>     To change this change the t_start and t_end arguments.  #> Default config will estimate R on weekly sliding windows. #>     To change this change the t_start and t_end arguments.  #> Default config will estimate R on weekly sliding windows. #>     To change this change the t_start and t_end arguments.  #> Default config will estimate R on weekly sliding windows. #>     To change this change the t_start and t_end arguments.  #> Default config will estimate R on weekly sliding windows. #>     To change this change the t_start and t_end arguments.  #> Default config will estimate R on weekly sliding windows. #>     To change this change the t_start and t_end arguments.  #> Default config will estimate R on weekly sliding windows. #>     To change this change the t_start and t_end arguments.  #> Default config will estimate R on weekly sliding windows. #>     To change this change the t_start and t_end arguments.  #> Default config will estimate R on weekly sliding windows. #>     To change this change the t_start and t_end arguments.  #> Default config will estimate R on weekly sliding windows. #>     To change this change the t_start and t_end arguments.  #> Default config will estimate R on weekly sliding windows. #>     To change this change the t_start and t_end arguments.  #> Default config will estimate R on weekly sliding windows. #>     To change this change the t_start and t_end arguments.  #> Default config will estimate R on weekly sliding windows. #>     To change this change the t_start and t_end arguments.  #> Default config will estimate R on weekly sliding windows. #>     To change this change the t_start and t_end arguments.  #> Default config will estimate R on weekly sliding windows. #>     To change this change the t_start and t_end arguments.  #> Default config will estimate R on weekly sliding windows. #>     To change this change the t_start and t_end arguments.  #> Default config will estimate R on weekly sliding windows. #>     To change this change the t_start and t_end arguments.  #> Default config will estimate R on weekly sliding windows. #>     To change this change the t_start and t_end arguments.  #> Default config will estimate R on weekly sliding windows. #>     To change this change the t_start and t_end arguments.  #> Default config will estimate R on weekly sliding windows. #>     To change this change the t_start and t_end arguments.  #> Default config will estimate R on weekly sliding windows. #>     To change this change the t_start and t_end arguments.  #> Default config will estimate R on weekly sliding windows. #>     To change this change the t_start and t_end arguments.  #> Default config will estimate R on weekly sliding windows. #>     To change this change the t_start and t_end arguments.  #> Default config will estimate R on weekly sliding windows. #>     To change this change the t_start and t_end arguments.  head(datos_covid$estima_rt) #> # A tibble: 6 × 17 #>   ENTIDA…¹ ENTID…² ABREV…³ t_start t_end Mean(…⁴ Std(R…⁵ Quant…⁶ Quant…⁷ Quant…⁸ #>   <chr>    <chr>   <chr>     <dbl> <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #> 1 01       AGUASC… AS            2     8       5       5   0.127   0.256    1.44 #> 2 01       AGUASC… AS            3     9       5       5   0.127   0.256    1.44 #> 3 01       AGUASC… AS            4    10       5       5   0.127   0.256    1.44 #> 4 01       AGUASC… AS            5    11       5       5   0.127   0.256    1.44 #> 5 01       AGUASC… AS            6    12       5       5   0.127   0.256    1.44 #> 6 01       AGUASC… AS            7    13       5       5   0.127   0.256    1.44 #> # … with 7 more variables: `Median(R)` <dbl>, `Quantile.0.75(R)` <dbl>, #> #   `Quantile.0.95(R)` <dbl>, `Quantile.0.975(R)` <dbl>, #> #   FECHA_SINTOMAS_start <dttm>, FECHA_SINTOMAS_end <dttm>, #> #   FECHA_SINTOMAS <dttm>, and abbreviated variable names ¹​ENTIDAD_UM, #> #   ²​ENTIDAD_FEDERATIVA, ³​ABREVIATURA, ⁴​`Mean(R)`, ⁵​`Std(R)`, #> #   ⁶​`Quantile.0.025(R)`, ⁷​`Quantile.0.05(R)`, ⁸​`Quantile.0.25(R)`  # Cambios en la fecha de estimacion siguiendo la recomendacion # y obtenemos todo a nivel nacional datos_covid <- datos_covid |> estima_rt(   min_date = as.POSIXct(\"2021-07-01\"),   max_date = as.POSIXct(\"2021-09-01\"),   list_name = \"rt_min_max\",   group_by_entidad = FALSE ) #> Default config will estimate R on weekly sliding windows. #>     To change this change the t_start and t_end arguments.  head(datos_covid$rt_min_max) #> # A tibble: 6 × 14 #>   t_start t_end Mean(R…¹ Std(R…² Quant…³ Quant…⁴ Quant…⁵ Media…⁶ Quant…⁷ Quant…⁸ #>     <dbl> <dbl>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #> 1       2     8    1.27   0.0192   1.23    1.24    1.26    1.27    1.28     1.30 #> 2       3     9    1.15   0.0172   1.11    1.12    1.13    1.15    1.16     1.17 #> 3       4    10    1.06   0.0160   1.03    1.03    1.05    1.06    1.07     1.09 #> 4       5    11    1.02   0.0154   0.985   0.990   1.00    1.02    1.03     1.04 #> 5       6    12    0.980  0.0151   0.951   0.956   0.970   0.980   0.991    1.01 #> 6       7    13    0.988  0.0152   0.958   0.963   0.977   0.988   0.998    1.01 #> # … with 4 more variables: `Quantile.0.975(R)` <dbl>, #> #   FECHA_SINTOMAS_start <dttm>, FECHA_SINTOMAS_end <dttm>, #> #   FECHA_SINTOMAS <dttm>, and abbreviated variable names ¹​`Mean(R)`, #> #   ²​`Std(R)`, ³​`Quantile.0.025(R)`, ⁴​`Quantile.0.05(R)`, ⁵​`Quantile.0.25(R)`, #> #   ⁶​`Median(R)`, ⁷​`Quantile.0.75(R)`, ⁸​`Quantile.0.95(R)`  # Casos a nivel nacional en los confirmados datos_covid <- datos_covid |>   estima_rt(     tipo_clasificacion = \"Confirmados COVID\",     group_by_entidad = FALSE,     list_name = \"rt_confirmados\"   ) #> Default config will estimate R on weekly sliding windows. #>     To change this change the t_start and t_end arguments.  head(datos_covid$rt_confirmados) #> # A tibble: 6 × 14 #>   t_start t_end Mean(R…¹ Std(R…² Quant…³ Quant…⁴ Quant…⁵ Media…⁶ Quant…⁷ Quant…⁸ #>     <dbl> <dbl>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #> 1       2     8    1.21   0.0295   1.15    1.16    1.19    1.21    1.23    1.26  #> 2       3     9    1.11   0.0269   1.06    1.07    1.10    1.11    1.13    1.16  #> 3       4    10    1.05   0.0256   1.00    1.01    1.04    1.05    1.07    1.09  #> 4       5    11    0.996  0.0246   0.949   0.956   0.980   0.996   1.01    1.04  #> 5       6    12    0.974  0.0243   0.927   0.935   0.958   0.974   0.991   1.01  #> 6       7    13    0.959  0.0242   0.912   0.919   0.942   0.958   0.975   0.999 #> # … with 4 more variables: `Quantile.0.975(R)` <dbl>, #> #   FECHA_SINTOMAS_start <dttm>, FECHA_SINTOMAS_end <dttm>, #> #   FECHA_SINTOMAS <dttm>, and abbreviated variable names ¹​`Mean(R)`, #> #   ²​`Std(R)`, ³​`Quantile.0.025(R)`, ⁴​`Quantile.0.05(R)`, ⁵​`Quantile.0.25(R)`, #> #   ⁶​`Median(R)`, ⁷​`Quantile.0.75(R)`, ⁸​`Quantile.0.95(R)`  #' # Cambios en los parametros de epiestim # estos parametros no tienen razon de ser mas alla de mostrar como se cambian if (FALSE) { datos_covid <- datos_covid |>   estima_rt(     group_by_entidad = FALSE,     list_name = \"config_rt\",     method = \"uncertain_si\", # Metodo de estimacion     config = EpiEstim::make_config(       mean_si = 2.4,       std_si = 0.3,       std_mean_si = 0.2,       min_mean_si = 2,       max_mean_si = 4,       std_std_si = 0.1,       min_std_si = 0.1,       max_std_si = 1.0     )   )  head(datos_covid$config_rt)  # Casos en BC, BCS en los confirmados datos_covid |>   estima_rt(     entidades = c(\"BAJA CALIFORNIA\", \"BAJA CALIFORNIA SUR\"),     tipo_clasificacion = \"Confirmados COVID\",     group_by_entidad = TRUE,     list_name = \"rt_bc_bcs\"   ) |>   plot_covid(     df_name = \"rt_bc_bcs\", df_date_index = \"FECHA_SINTOMAS\",     df_variable = \"Mean(R)\", df_covariates = \"ENTIDAD_FEDERATIVA\"   ) }  # Finalmente desconectamos datos_covid$disconnect() #> ✔ Desconectado"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/numero_pruebas.html","id":null,"dir":"Reference","previous_headings":"","what":"Numero de Pruebas — numero_pruebas","title":"Numero de Pruebas — numero_pruebas","text":"numero_pruebas Calcula el numero total de pruebas por fecha agrupando (o sin hacerlo) por covariables. Por default calcula la el numero de pruebas de antigeno y PCR por separado para cada estado.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/numero_pruebas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Numero de Pruebas — numero_pruebas","text":"","code":"numero_pruebas(   datos_covid,   entidades = c(\"AGUASCALIENTES\", \"BAJA CALIFORNIA\", \"BAJA CALIFORNIA SUR\", \"CAMPECHE\",     \"CHIAPAS\", \"CHIHUAHUA\", \"CIUDAD DE MÉXICO\", \"COAHUILA DE ZARAGOZA\", \"COLIMA\",     \"DURANGO\", \"GUANAJUATO\", \"GUERRERO\", \"HIDALGO\", \"JALISCO\", \"MÉXICO\",     \"MICHOACÁN DE OCAMPO\", \"MORELOS\", \"NAYARIT\", \"NUEVO LEÓN\", \"OAXACA\", \"PUEBLA\",     \"QUERÉTARO\", \"QUINTANA ROO\", \"SAN LUIS POTOSÍ\", \"SINALOA\", \"SONORA\", \"TABASCO\",     \"TAMAULIPAS\", \"TLAXCALA\", \"VERACRUZ DE IGNACIO DE LA LLAVE\", \"YUCATÁN\", \"ZACATECAS\"),   group_by_entidad = TRUE,   entidad_tipo = c(\"Unidad Medica\", \"Residencia\", \"Nacimiento\"),   fecha_tipo = c(\"Sintomas\", \"Ingreso\", \"Defuncion\"),   tipo_prueba = c(\"Antigeno\", \"PCR\"),   group_by_tipo_prueba = TRUE,   tipo_paciente = c(\"AMBULATORIO\", \"HOSPITALIZADO\", \"NO ESPECIFICADO\"),   group_by_tipo_paciente = FALSE,   tipo_uci = c(\"SI\", \"NO\", \"NO APLICA\", \"SE IGNORA\", \"NO ESPECIFICADO\"),   group_by_tipo_uci = FALSE,   tipo_sector = c(\"CRUZ ROJA\", \"DIF\", \"ESTATAL\", \"IMSS\", \"IMSS-BIENESTAR\", \"ISSSTE\",     \"MUNICIPAL\", \"PEMEX\", \"PRIVADA\", \"SEDENA\", \"SEMAR\", \"SSA\", \"UNIVERSITARIO\",     \"NO ESPECIFICADO\"),   group_by_tipo_sector = FALSE,   defunciones = FALSE,   edad_cut = NULL,   as_tibble = TRUE,   fill_zeros = as_tibble,   list_name = \"numero_pruebas\",   .grouping_vars = c() )"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/numero_pruebas.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"Numero de Pruebas — numero_pruebas","text":"datos_covid (obligatorio) Lista de tibbles o duckdbs resultante de descarga_datos_abiertos() o read_datos_abiertos() entidades (opcional)  Vector con las entidades de las unidades medicas analizar. Opciones: AGUASCALIENTES, BAJA CALIFORNIA, BAJA CALIFORNIA SUR, CAMPECHE, CHIAPAS, CHIHUAHUA, CIUDAD DE MEXICO, COAHUILA DE ZARAGOZA , COLIMA, DURANGO, GUANAJUATO, GUERRERO, HIDALGO, JALISCO, MEXICO, MICHOACAN DE OCAMPO, MORELOS,NAYARIT NUEVO LEON, OAXACA ,PUEBLA, QUERETARO,QUINTANA ROO, SAN LUIS POTOSI, SINALOA, SONORA, TABASCO, TAMAULIPAS,TLAXCALA, VERACRUZ DE IGNACIO DE LA LLAVE, YUCATAN, ZACATECAS. group_by_entidad (opcional) TRUE obtiene los casos para cada entidad reportando en cada fecha la entidad y los casos en dicha entidad. FALSE  junta las entidades sumando sus casos en una sola observacion por cada fecha. entidad_tipo (opcional) Indica que se refiere las entidades seleccionadas. Elige una de las opciones: Unidad Medica (entidad de la unidad medica), Nacimiento (entidad de origen del individuo) o Residencia (entidad donde reside el individuo). fecha_tipo (opcional) Selecciona si la fecha que se utiliza es la fecha de Ingreso (si aplica), la fecha de Sintomas o la de Defuncion (si aplica). El default es fecha de Sintomas. tipo_prueba (opcional) Vector con el tipo de pruebas incluir Antigeno, PCR. Por default se incluyen ambas. group_by_tipo_prueba (opcional) Booleana determinando si regresa la base con cada entrada agrupada por tipo_prueba. En caso TRUE (cada fecha y entidad reporta separado el los casos de PCR y Antigeno). En caso FALSE se juntan los casos de PCR y Antigeno para devolver un unico numero por fecha. tipo_paciente (opcional) Vector con el tipo de pacientes incluir. Opciones: AMBULATORIO, HOSPITALIZADO, ESPECIFICADO. Por default se incluyen todos. group_by_tipo_paciente (opcional) Booleana determinando (caso TRUE) si regresa la base con cada entrada agrupada por tipo_paciente (es decir cada fecha se genera un renglon para AMBULATORIO, un renglon para HOSPITALIZADO, etc) o bien si se suman todos los grupos y cada fecha reporta solo la suma de estos (estilo AMBULATORIO + HOSPITALIZADO segun las categorias de tipo_paciente) El default es FALSE. tipo_uci (opcional)  Vector con el tipo de valores para Unidad de Cuidado Intensivo (UCI) incluir:  SI,,APLICA,SE IGNORA,ESPECIFICADO. Por default se incluyen todos. group_by_tipo_uci (opcional) Booleana. El caso TRUE determina si regresa la base con cada fecha teniendo diferentes renglones uno para cada tipo_uci (es decir cada fecha se generan tantos observaciones como grupos de tipo de UCI) o bien en una sola fecha se suman todos los tipos de UCI (FALSE). El default es FALSE. tipo_sector (opcional) Vector con los sectores del sistema de salud incluir: CRUZ ROJA,DIF,ESTATAL,IMSS,IMSS-BIENESTAR,ISSSTE, MUNICIPAL,PEMEX, PRIVADA,SEDENA,SEMAR,SSA, UNIVERSITARIO,ESPECIFICADO. Por default se incluyen todos. group_by_tipo_sector (opcional) Booleana determina en el caso de TRUE si regresa la base con cada entrada agrupada por tipo_sector (es decir cada fecha tiene una entrada con los del IMSS, una entrada distinta con los de ISSSTE, etc) o bien en caso de FALSE se devuelve una sola entrada por fecha con la suma IMSS + ISSSTE + etc segun los  sectores seleccionados. El default es FALSE. defunciones (opcional)  Booleana si incluir sólo defunciones TRUE o todos FALSE. El default es FALSE. edad_cut (opcional) Vector con secuencia de edades para hacer grupos. Por ejemplo edad_cut = c(0, 10, Inf) arma dos grupos de edad de 0 10 y de 10 infinito o bien edad_cut = c(15, 20) deja sólo los registros entre 15 y 20 años. Por default es NULL y arma grupos etarios. as_tibble (opcional) Regresar como tibble el resultado. En caso de que as_tibble sea FALSE se devuelve como conexion en duckdb. Se recomienda el default (tibble). fill_zeros (opcional) En caso de que el resultado sea un tibble regresa observaciones para todas las combinaciones de variables incluyendo como 0 aquellas fechas cuando se observaron casos. En caso contrario se incluyen las filas donde se observaron casos. list_name (opcional) Asigna un nombre en la lista de datos la base generada .grouping_vars (opcional) Vector de variables adicionales de agrupacion de los conteos. Por ejemplo si se agrega .grouping_vars = 'DIABETES' entonces para cada fecha habra dos conteos de casos uno de los que tienen diabetes y uno de los que .","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/numero_pruebas.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"Numero de Pruebas — numero_pruebas","text":"Adiciona la lista de datos_covid una nueva entrada de nombre list_name (default: numero_pruebas) con una base de datos (tibble o duckdb) con los resultados agregados. numero_pruebas - Base de datos generara con los datos agregados (el nombre cambia si se usa list_name). dict - Diccionario de datos dats - Datos originales (conexion duckdb o tibble) disconnect  - Función para desconectarte de duckdb ... - Cualquier otro elemento que ya existiera en datos_covid","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/numero_pruebas.html","id":"detalles","dir":"Reference","previous_headings":"","what":"Detalles","title":"Numero de Pruebas — numero_pruebas","text":"Las pruebas de PCR (polymerase chain reaction) identifican material genetico de un organismo (por ejemplo un virus como el COVID-19 o la influenza). Las pruebas de antigeno (o pruebas rapidas) detectan algunas proteinas que conforman el virus. Para mas informacion sobre las pruebas y su interpretacion puedes consultar las guias del CDC","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/numero_pruebas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"Numero de Pruebas — numero_pruebas","text":"","code":"# Para el ejemplo usaremos los datos precargados pero tu puedes # correr el ejemplo descargando informacion mas reciente: # datos_covid <- descarga_datos_abiertos() #Sugerido  datos_covid <- datosabiertos  # Número de pruebas PCR/Antigeno a nivel nacional por estado datos_covid <- datos_covid |> numero_pruebas() head(datos_covid$numero_pruebas) #> # A tibble: 6 × 6 #>   FECHA_SINTOMAS      ENTIDAD_UM TIPO_PRUEBA     n ENTIDAD_FEDERATIVA  ABREVIA…¹ #>   <dttm>              <chr>      <chr>       <int> <chr>               <chr>     #> 1 2021-07-01 00:00:00 02         ANTIGENO      125 BAJA CALIFORNIA     BC        #> 2 2021-07-01 00:00:00 02         PCR            21 BAJA CALIFORNIA     BC        #> 3 2021-07-01 00:00:00 03         ANTIGENO      479 BAJA CALIFORNIA SUR BS        #> 4 2021-07-01 00:00:00 03         PCR            69 BAJA CALIFORNIA SUR BS        #> 5 2021-07-02 00:00:00 02         ANTIGENO      143 BAJA CALIFORNIA     BC        #> 6 2021-07-02 00:00:00 02         PCR            36 BAJA CALIFORNIA     BC        #> # … with abbreviated variable name ¹​ABREVIATURA  # Número de pruebas nacionales pero sin separar por tipo ni estado datos_covid <- datos_covid |>   numero_pruebas(     group_by_entidad = FALSE, group_by_tipo_prueba = FALSE,     list_name = \"Todas_las_pruebas\"   ) head(datos_covid$Todas_las_pruebas) #> # A tibble: 6 × 2 #>   FECHA_SINTOMAS          n #>   <dttm>              <int> #> 1 2021-07-01 00:00:00   694 #> 2 2021-07-02 00:00:00   564 #> 3 2021-07-03 00:00:00   629 #> 4 2021-07-04 00:00:00   703 #> 5 2021-07-05 00:00:00   782 #> 6 2021-07-06 00:00:00   766  # Positivos en Baja California Sur datos_covid <- datos_covid |>   numero_pruebas(     entidades = c(\"BAJA CALIFORNIA SUR\"),     list_name = \"BCS\"   ) head(datos_covid$BCS) #> # A tibble: 6 × 6 #>   FECHA_SINTOMAS      ENTIDAD_UM TIPO_PRUEBA     n ENTIDAD_FEDERATIVA  ABREVIA…¹ #>   <dttm>              <chr>      <chr>       <int> <chr>               <chr>     #> 1 2021-07-01 00:00:00 03         ANTIGENO      479 BAJA CALIFORNIA SUR BS        #> 2 2021-07-01 00:00:00 03         PCR            69 BAJA CALIFORNIA SUR BS        #> 3 2021-07-02 00:00:00 03         ANTIGENO      331 BAJA CALIFORNIA SUR BS        #> 4 2021-07-02 00:00:00 03         PCR            54 BAJA CALIFORNIA SUR BS        #> 5 2021-07-03 00:00:00 03         ANTIGENO      387 BAJA CALIFORNIA SUR BS        #> 6 2021-07-03 00:00:00 03         PCR            58 BAJA CALIFORNIA SUR BS        #> # … with abbreviated variable name ¹​ABREVIATURA  # Si deseas agrupar por una variable que no este en las opciones asi como tipo paciente datos_covid <- datos_covid |>   numero_pruebas(     tipo_paciente = c(\"AMBULATORIO\", \"HOSPITALIZADO\"),     group_by_tipo_paciente = TRUE,     .grouping_vars = c(\"DIABETES\"),     list_name = \"pruebas_diabetes\"   ) head(datos_covid$pruebas_diabetes) #> # A tibble: 6 × 9 #>   FECHA_SINTOMAS      DIABETES ENTIDAD_UM TIPO_P…¹ TIPO_…²     n ENTID…³ ABREV…⁴ #>   <dttm>                 <int> <chr>      <chr>      <dbl> <int> <chr>   <chr>   #> 1 2021-07-01 00:00:00        1 02         ANTIGENO       1     8 BAJA C… BC      #> 2 2021-07-01 00:00:00        1 02         ANTIGENO       2     5 BAJA C… BC      #> 3 2021-07-01 00:00:00        1 02         PCR            1     2 BAJA C… BC      #> 4 2021-07-01 00:00:00        1 02         PCR            2     3 BAJA C… BC      #> 5 2021-07-01 00:00:00        1 03         ANTIGENO       1    21 BAJA C… BS      #> 6 2021-07-01 00:00:00        1 03         ANTIGENO       2     7 BAJA C… BS      #> # … with 1 more variable: DESCRIPCION_TIPO_PACIENTE <chr>, and abbreviated #> #   variable names ¹​TIPO_PRUEBA, ²​TIPO_PACIENTE, ³​ENTIDAD_FEDERATIVA, #> #   ⁴​ABREVIATURA  # Una vez hayas concluido tu trabajo no olvides desconectar datos_covid$disconnect() #> ✔ Desconectado"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/pipe.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/pipe.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/plot_covid.html","id":null,"dir":"Reference","previous_headings":"","what":"PLOT DATOS DE COVID — plot_covid","title":"PLOT DATOS DE COVID — plot_covid","text":"plot_covid Grafica automaticamente la base de datos de covid","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/plot_covid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"PLOT DATOS DE COVID — plot_covid","text":"","code":"plot_covid(   datos_covid,   df_name = \"casos\",   df_date_index = stringr::str_subset(colnames(datos_covid[df_name][[1]]),     \"FECHA|fecha|Fecha\"),   df_variable = NULL,   df_covariates = c(),   facet_scale = \"free_y\",   facet_ncol = 4,   date_break_format = \"2 months\",   date_labels_format = \"%B-%y\",   type = c(\"point\", \"line\", \"spline\", \"area\"),   plot_theme = ggplot2::theme(panel.background = ggplot2::element_rect(fill = \"white\"),     plot.background = ggplot2::element_rect(fill = \"white\"), axis.text.x =     ggplot2::element_text(angle = 90, hjust = 1), axis.line.x =     ggplot2::element_line(color = \"black\"), legend.position = \"none\"),   ... )"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/plot_covid.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"PLOT DATOS DE COVID — plot_covid","text":"datos_covid (obligatorio) Lista de tibbles resultante de casos(), cfr(), chr(), positividad() o rt() df_name (opcional) Nombre de la base de datos dentro de la lista datos_covid df_date_index (opcional) Nombre de la variable que contiene la fecha df_variable (opcional) Nombre de la variable que se va graficar en el eje y df_covariates (opcional) Covariables para el facet_wrap (maximo 2) facet_scale (opcional) Escala para el ggplot2::facet_wrap() facet_ncol (opcional)  Numero de columnas para el ggplot2::facet_wrap() date_break_format (opcional) Breaks para el eje x ggplot2::scale_x_date() date_labels_format (opcional) Formato de fecha para el eje x ggplot2::scale_x_date() type (opcional) Tipo de grafica (line, area, spline o point) plot_theme (opcional) Tema para el ggplot2 (ejemplo ggplot2::theme_classic()). ... (opcional) Parametros adicionales para ggformula::geom_spline() en caso de elegir type=\"spline\"","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/plot_covid.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"PLOT DATOS DE COVID — plot_covid","text":"Un ggplot2 con la imagen graficada.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/plot_covid.html","id":"detalles","dir":"Reference","previous_headings":"","what":"Detalles","title":"PLOT DATOS DE COVID — plot_covid","text":"Por default calcula el total de casos. official product / este es un producto oficial","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/plot_covid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"PLOT DATOS DE COVID — plot_covid","text":"","code":"# Para el ejemplo usaremos los datos precargados pero tu puedes # correr el ejemplo descargando informacion mas reciente: # datos_covid <- descarga_datos_abiertos() #Sugerido  # Grafica de casos por entidad datos_covid <- datosabiertos  # Aqui muchos aparecen en cero si usas el default de datosabiertos # porque la base de datosabiertos tiene muy pocos casos datos_covid |>   casos(list_name = \"casos_for_plot\") |>   plot_covid(df_name = \"casos_for_plot\") #> ! `df_variable` no fue especificada. Usaremos la columna n #> ! `df_covariates` no fue especificada. Usaremos `ENTIDAD_FEDERATIVA`   # Grafica de casos nacional datos_covid |>   casos(group_by_entidad = FALSE, list_name = \"plot_nal\") |>   plot_covid(df_name = \"plot_nal\") #> ! `df_variable` no fue especificada. Usaremos la columna n #> ! `df_covariates` no fue especificada. Usaremos ``   if (FALSE) { # Ajuste mediante splines datos_covid |>   casos(group_by_entidad = FALSE, list_name = \"spline_nacional\") |>   plot_covid(df_name = \"spline_nacional\", type = \"spline\", spar = 0.5)  # Graficacion por covariables # el objeto devuelto es un objeto de ggplot2 al que se le puede dar formato datos_covid |>   chr(     group_by_entidad = TRUE, list_name = \"plot_nal\", .grouping_vars = c(\"SEXO\"),     entidades = c(\"BAJA CALIFORNIA\", \"BAJA CALIFORNIA SUR\")   ) |>   plot_covid(     df_name = \"plot_nal\",     date_break_format = \"1 week\",     date_labels_format = \"%d/%B/%Y\",     df_covariates = c(\"SEXO\", \"ENTIDAD_FEDERATIVA\"),     type = \"area\"   ) +   ggtitle(\"Plot nacional\")  # Puedes tambien primero editar el tibble que usaras por ejemplo poniendo # los nombres de los sexos datos_covid <- datos_covid |>   chr(     group_by_entidad = TRUE, list_name = \"plot_nal\", .grouping_vars = c(\"SEXO\"),     entidades = c(\"BAJA CALIFORNIA\", \"BAJA CALIFORNIA SUR\")   )  datos_covid$plot_nal |>   left_join(datos_covid$dict$SEXO, by = c(\"SEXO\" = \"CLAVE\")) |>   plot_covid(     date_break_format = \"1 week\",     date_labels_format = \"%d/%B/%Y\",     df_variable = \"CASE HOSPITALIZATION RATE\",     df_covariates = c(\"DESCRIPCI\\032N\", \"ENTIDAD_FEDERATIVA\"),     type = \"area\"   ) +   ggtitle(\"Plot nacional\") }  # Finalmente desconectamos datos_covid$disconnect() #> ✔ Desconectado"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/positividad.html","id":null,"dir":"Reference","previous_headings":"","what":"Positividad — positividad","title":"Positividad — positividad","text":"positividad Calcula la positividad  por fecha agrupando (o sin hacerlo) por covariables. Por default calcula la positividad de las pruebas haciendo Antigeno y PCR por separado, cada una por fecha y entidad.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/positividad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Positividad — positividad","text":"","code":"positividad(   datos_covid,   entidades = c(\"AGUASCALIENTES\", \"BAJA CALIFORNIA\", \"BAJA CALIFORNIA SUR\", \"CAMPECHE\",     \"CHIAPAS\", \"CHIHUAHUA\", \"CIUDAD DE MÉXICO\", \"COAHUILA DE ZARAGOZA\", \"COLIMA\",     \"DURANGO\", \"GUANAJUATO\", \"GUERRERO\", \"HIDALGO\", \"JALISCO\", \"MÉXICO\",     \"MICHOACÁN DE OCAMPO\", \"MORELOS\", \"NAYARIT\", \"NUEVO LEÓN\", \"OAXACA\", \"PUEBLA\",     \"QUERÉTARO\", \"QUINTANA ROO\", \"SAN LUIS POTOSÍ\", \"SINALOA\", \"SONORA\", \"TABASCO\",     \"TAMAULIPAS\", \"TLAXCALA\", \"VERACRUZ DE IGNACIO DE LA LLAVE\", \"YUCATÁN\", \"ZACATECAS\"),   group_by_entidad = TRUE,   entidad_tipo = c(\"Unidad Medica\", \"Residencia\", \"Nacimiento\"),   fecha_tipo = c(\"Sintomas\", \"Ingreso\", \"Defuncion\"),   tipo_prueba = c(\"Antigeno\", \"PCR\"),   group_by_tipo_prueba = TRUE,   tipo_paciente = c(\"AMBULATORIO\", \"HOSPITALIZADO\", \"NO ESPECIFICADO\"),   group_by_tipo_paciente = FALSE,   tipo_uci = c(\"SI\", \"NO\", \"NO APLICA\", \"SE IGNORA\", \"NO ESPECIFICADO\"),   group_by_tipo_uci = FALSE,   tipo_sector = c(\"CRUZ ROJA\", \"DIF\", \"ESTATAL\", \"IMSS\", \"IMSS-BIENESTAR\", \"ISSSTE\",     \"MUNICIPAL\", \"PEMEX\", \"PRIVADA\", \"SEDENA\", \"SEMAR\", \"SSA\", \"UNIVERSITARIO\",     \"NO ESPECIFICADO\"),   group_by_tipo_sector = FALSE,   defunciones = FALSE,   edad_cut = NULL,   fill_NA = TRUE,   list_name = \"positividad\",   remove_inconclusive = TRUE,   .grouping_vars = c() )"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/positividad.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"Positividad — positividad","text":"datos_covid (obligatorio) Lista de tibbles o duckdbs resultante de descarga_datos_abiertos() o read_datos_abiertos() entidades (opcional)  Vector con las entidades de las unidades medicas analizar. Opciones: AGUASCALIENTES, BAJA CALIFORNIA, BAJA CALIFORNIA SUR, CAMPECHE, CHIAPAS, CHIHUAHUA, CIUDAD DE MEXICO, COAHUILA DE ZARAGOZA , COLIMA, DURANGO, GUANAJUATO, GUERRERO, HIDALGO, JALISCO, MEXICO, MICHOACAN DE OCAMPO, MORELOS,NAYARIT NUEVO LEON, OAXACA ,PUEBLA, QUERETARO,QUINTANA ROO, SAN LUIS POTOSI, SINALOA, SONORA, TABASCO, TAMAULIPAS,TLAXCALA, VERACRUZ DE IGNACIO DE LA LLAVE, YUCATAN, ZACATECAS. group_by_entidad (opcional) TRUE obtiene los casos para cada entidad reportando en cada fecha la entidad y los casos en dicha entidad. FALSE  junta las entidades sumando sus casos en una sola observacion por cada fecha. entidad_tipo (opcional) Indica que se refiere las entidades seleccionadas. Elige una de las opciones: Unidad Medica (entidad de la unidad medica), Nacimiento (entidad de origen del individuo) o Residencia (entidad donde reside el individuo). fecha_tipo (opcional) Selecciona si la fecha que se utiliza es la fecha de Ingreso (si aplica), la fecha de Sintomas o la de Defuncion (si aplica). El default es fecha de Sintomas. tipo_prueba (opcional) Vector con el tipo de pruebas incluir Antigeno, PCR. Por default se incluyen ambas. group_by_tipo_prueba (opcional) Booleana determinando si regresa la base con cada entrada agrupada por tipo_prueba. En caso TRUE (cada fecha y entidad reporta separado el los casos de PCR y Antigeno). En caso FALSE se juntan los casos de PCR y Antigeno para devolver un unico numero por fecha. tipo_paciente (opcional) Vector con el tipo de pacientes incluir. Opciones: AMBULATORIO, HOSPITALIZADO, ESPECIFICADO. Por default se incluyen todos. group_by_tipo_paciente (opcional) Booleana determinando (caso TRUE) si regresa la base con cada entrada agrupada por tipo_paciente (es decir cada fecha se genera un renglon para AMBULATORIO, un renglon para HOSPITALIZADO, etc) o bien si se suman todos los grupos y cada fecha reporta solo la suma de estos (estilo AMBULATORIO + HOSPITALIZADO segun las categorias de tipo_paciente) El default es FALSE. tipo_uci (opcional)  Vector con el tipo de valores para Unidad de Cuidado Intensivo (UCI) incluir:  SI,,APLICA,SE IGNORA,ESPECIFICADO. Por default se incluyen todos. group_by_tipo_uci (opcional) Booleana. El caso TRUE determina si regresa la base con cada fecha teniendo diferentes renglones uno para cada tipo_uci (es decir cada fecha se generan tantos observaciones como grupos de tipo de UCI) o bien en una sola fecha se suman todos los tipos de UCI (FALSE). El default es FALSE. tipo_sector (opcional) Vector con los sectores del sistema de salud incluir: CRUZ ROJA,DIF,ESTATAL,IMSS,IMSS-BIENESTAR,ISSSTE, MUNICIPAL,PEMEX, PRIVADA,SEDENA,SEMAR,SSA, UNIVERSITARIO,ESPECIFICADO. Por default se incluyen todos. group_by_tipo_sector (opcional) Booleana determina en el caso de TRUE si regresa la base con cada entrada agrupada por tipo_sector (es decir cada fecha tiene una entrada con los del IMSS, una entrada distinta con los de ISSSTE, etc) o bien en caso de FALSE se devuelve una sola entrada por fecha con la suma IMSS + ISSSTE + etc segun los  sectores seleccionados. El default es FALSE. defunciones (opcional)  Booleana si incluir sólo defunciones TRUE o todos FALSE. El default es FALSE. edad_cut (opcional) Vector con secuencia de edades para hacer grupos. Por ejemplo edad_cut = c(0, 10, Inf) arma dos grupos de edad de 0 10 y de 10 infinito o bien edad_cut = c(15, 20) deja sólo los registros entre 15 y 20 años. Por default es NULL y arma grupos etarios. fill_NA (opcional)  Regresa observaciones para todas las combinaciones de variables incluyendo como NA donde se observaron casos en el denominador.  En caso contrario se incluyen las filas donde se observaron casos. list_name (opcional) Asigna un nombre en la lista de datos la base generada remove_inconclusive (opcional)  Si TRUE considera en el denominador de la positividad las pruebas cuyo resultado es inconcluso o aún ha sido otorgado. Si FALSE considera todos. Por default es TRUE. .grouping_vars (opcional) Vector de variables adicionales de agrupacion de los conteos. Por ejemplo si se agrega .grouping_vars = 'DIABETES' entonces para cada fecha habra dos conteos de casos uno de los que tienen diabetes y uno de los que .","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/positividad.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"Positividad — positividad","text":"Une la lista de datos_covid una nueva entrada de nombre list_name (default: positividad) con una base de datos (tibble) con los resultados agregados. positividad - Base de datos generara con los datos agregados (el nombre cambia si se usa list_name). dict - Diccionario de datos dats - Datos originales (conexion duckdb o tibble) disconnect  - Función para desconectarte de duckdb ... - Cualquier otro elemento que ya existiera en datos_covid","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/positividad.html","id":"detalles","dir":"Reference","previous_headings":"","what":"Detalles","title":"Positividad — positividad","text":"La positividad se define como $$\\frac{\\# Pruebas positivas}{Total de pruebas}$$ Si se utiliza la opción remove_inconclusive = TRUE el Total de pruebas se calcula utilizando solo POSITIVOS + NEGATIVOS. Si remove_inconclusive = FALSE se calcula utilizando todas las personas que tuvieron prueba: POSITIVOS + NEGATIVOS + INCONCLUSOS + SIN RESULTADO. Si se realizaron pruebas un dia la positividad esta definida pues el Total de pruebas es cero. En ese caso si fill_NA = TRUE se devuelven las entradas de esos dias pero con valor NA.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/positividad.html","id":"referencias","dir":"Reference","previous_headings":"","what":"Referencias","title":"Positividad — positividad","text":"Furuse, Y., Ko, Y. K., Ninomiya, K., Suzuki, M., & Oshitani, H. (2021). Relationship test positivity rates COVID-19 epidemic dynamics. International journal environmental research public health, 18(9), 4655. Al Dallal, ., AlDallal, U., & Al Dallal, J. (2021). Positivity rate: indicator spread COVID-19. Current Medical Research Opinion, 37(12), 2067-2076.","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/covidmx/reference/positividad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"Positividad — positividad","text":"","code":"# Para el ejemplo usaremos los datos precargados pero tu puedes # correr el ejemplo descargando informacion mas reciente: # datos_covid <- descarga_datos_abiertos() #Sugerido  datos_covid <- datosabiertos  # Casos a nivel nacional por estado por tipo de prueba datos_covid <- datos_covid |> positividad() head(datos_covid$positividad) #> # A tibble: 6 × 8 #> # Groups:   FECHA_SINTOMAS, ENTIDAD_UM, TIPO_PRUEBA, ENTIDAD_FEDERATIVA, #> #   ABREVIATURA [6] #>   Positivi…¹ FECHA_SINTOMAS      ENTID…² TIPO_…³ ENTID…⁴ ABREV…⁵ n_pru…⁶ n_pos…⁷ #>        <dbl> <dttm>              <chr>   <chr>   <chr>   <chr>     <int>   <int> #> 1      0.5   2021-07-01 00:00:00 02      PCR     BAJA C… BC           20      10 #> 2      0.594 2021-07-01 00:00:00 03      PCR     BAJA C… BS           64      38 #> 3      0.5   2021-07-02 00:00:00 02      PCR     BAJA C… BC           34      17 #> 4      0.519 2021-07-02 00:00:00 03      PCR     BAJA C… BS           52      27 #> 5      0.517 2021-07-03 00:00:00 02      PCR     BAJA C… BC           29      15 #> 6      0.755 2021-07-03 00:00:00 03      PCR     BAJA C… BS           53      40 #> # … with abbreviated variable names ¹​Positividad, ²​ENTIDAD_UM, ³​TIPO_PRUEBA, #> #   ⁴​ENTIDAD_FEDERATIVA, ⁵​ABREVIATURA, ⁶​n_pruebas, ⁷​n_positivos  # Total nacional sumando todas las pruebas del pais datos_covid <- datos_covid |>   positividad(group_by_entidad = FALSE, list_name = \"positividad_nacional\") head(datos_covid$positividad_nacional) #> # A tibble: 6 × 5 #> # Groups:   FECHA_SINTOMAS, TIPO_PRUEBA [6] #>   Positividad FECHA_SINTOMAS      TIPO_PRUEBA n_pruebas n_positivos #>         <dbl> <dttm>              <chr>           <int>       <int> #> 1       0.571 2021-07-01 00:00:00 PCR                84          48 #> 2       0.512 2021-07-02 00:00:00 PCR                86          44 #> 3       0.671 2021-07-03 00:00:00 PCR                82          55 #> 4       0.469 2021-07-04 00:00:00 PCR                98          46 #> 5       0.365 2021-07-05 00:00:00 PCR                96          35 #> 6       0.557 2021-07-06 00:00:00 PCR                97          54  # Positivos en Baja California y Baja California Sur datos_covid <- datos_covid |>   positividad(     entidades = c(\"BAJA CALIFORNIA\", \"BAJA CALIFORNIA SUR\"),     list_name = \"positividad_californiana\"   ) head(datos_covid$positividad_californiana) #> # A tibble: 6 × 8 #> # Groups:   FECHA_SINTOMAS, ENTIDAD_UM, TIPO_PRUEBA, ENTIDAD_FEDERATIVA, #> #   ABREVIATURA [6] #>   Positivi…¹ FECHA_SINTOMAS      ENTID…² TIPO_…³ ENTID…⁴ ABREV…⁵ n_pru…⁶ n_pos…⁷ #>        <dbl> <dttm>              <chr>   <chr>   <chr>   <chr>     <int>   <int> #> 1      0.5   2021-07-01 00:00:00 02      PCR     BAJA C… BC           20      10 #> 2      0.594 2021-07-01 00:00:00 03      PCR     BAJA C… BS           64      38 #> 3      0.5   2021-07-02 00:00:00 02      PCR     BAJA C… BC           34      17 #> 4      0.519 2021-07-02 00:00:00 03      PCR     BAJA C… BS           52      27 #> 5      0.517 2021-07-03 00:00:00 02      PCR     BAJA C… BC           29      15 #> 6      0.755 2021-07-03 00:00:00 03      PCR     BAJA C… BS           53      40 #> # … with abbreviated variable names ¹​Positividad, ²​ENTIDAD_UM, ³​TIPO_PRUEBA, #> #   ⁴​ENTIDAD_FEDERATIVA, ⁵​ABREVIATURA, ⁶​n_pruebas, ⁷​n_positivos  # Agrupando ambas pruebas en una sola positividad global datos_covid <- datos_covid |>   positividad(     entidades = c(\"BAJA CALIFORNIA\", \"BAJA CALIFORNIA SUR\"),     group_by_tipo_prueba = FALSE,     list_name = \"positividad_californiana_2\"   ) head(datos_covid$positividad_californiana_2) #> # A tibble: 6 × 7 #> # Groups:   FECHA_SINTOMAS, ENTIDAD_UM, ENTIDAD_FEDERATIVA, ABREVIATURA [6] #>   Positividad FECHA_SINTOMAS      ENTIDAD_UM ENTIDAD_F…¹ ABREV…² n_pru…³ n_pos…⁴ #>         <dbl> <dttm>              <chr>      <chr>       <chr>     <int>   <int> #> 1       0.205 2021-07-01 00:00:00 02         BAJA CALIF… BC          146      30 #> 2       0.485 2021-07-01 00:00:00 03         BAJA CALIF… BS          548     266 #> 3       0.207 2021-07-02 00:00:00 02         BAJA CALIF… BC          179      37 #> 4       0.496 2021-07-02 00:00:00 03         BAJA CALIF… BS          385     191 #> 5       0.223 2021-07-03 00:00:00 02         BAJA CALIF… BC          184      41 #> 6       0.555 2021-07-03 00:00:00 03         BAJA CALIF… BS          445     247 #> # … with abbreviated variable names ¹​ENTIDAD_FEDERATIVA, ²​ABREVIATURA, #> #   ³​n_pruebas, ⁴​n_positivos  # Regresa la suma de ambos estados pero dividiendo por tipo de paciente datos_covid <- datos_covid |>   positividad(     entidades = c(\"BAJA CALIFORNIA\", \"BAJA CALIFORNIA SUR\"),     group_by_entidad = FALSE,     tipo_paciente = c(\"AMBULATORIO\", \"HOSPITALIZADO\"),     group_by_tipo_paciente = TRUE,     list_name = \"positividad_paciente\"   ) head(datos_covid$positividad_paciente) #> # A tibble: 6 × 7 #> # Groups:   FECHA_SINTOMAS, TIPO_PRUEBA, TIPO_PACIENTE, #> #   DESCRIPCION_TIPO_PACIENTE [6] #>   Positividad FECHA_SINTOMAS      TIPO_PRUEBA TIPO_PAC…¹ DESCR…² n_pru…³ n_pos…⁴ #>         <dbl> <dttm>              <chr>            <dbl> <chr>     <int>   <int> #> 1       0.325 2021-07-01 00:00:00 PCR                  1 AMBULA…      40      13 #> 2       0.795 2021-07-01 00:00:00 PCR                  2 HOSPIT…      44      35 #> 3       0.404 2021-07-02 00:00:00 PCR                  1 AMBULA…      57      23 #> 4       0.724 2021-07-02 00:00:00 PCR                  2 HOSPIT…      29      21 #> 5       0.583 2021-07-03 00:00:00 PCR                  1 AMBULA…      48      28 #> 6       0.794 2021-07-03 00:00:00 PCR                  2 HOSPIT…      34      27 #> # … with abbreviated variable names ¹​TIPO_PACIENTE, ²​DESCRIPCION_TIPO_PACIENTE, #> #   ³​n_pruebas, ⁴​n_positivos  # Si deseas agrupar por una variable que no este en las opciones va en .grouping_vars datos_covid <- datos_covid |>   positividad(     tipo_sector = \"IMSS\",     .grouping_vars = c(\"SEXO\"),     list_name = \"positividad_imss_sexo\"   ) head(datos_covid$positividad_imss_sexo) #> # A tibble: 6 × 9 #> # Groups:   FECHA_SINTOMAS, SEXO, ENTIDAD_UM, TIPO_PRUEBA, ENTIDAD_FEDERATIVA, #> #   ABREVIATURA [6] #>   Positividad FECHA_SINTOMAS       SEXO ENTIDA…¹ TIPO_…² ENTID…³ ABREV…⁴ n_pru…⁵ #>         <dbl> <dttm>              <int> <chr>    <chr>   <chr>   <chr>     <int> #> 1       0.5   2021-07-01 00:00:00     1 02       PCR     BAJA C… BC            6 #> 2       0.875 2021-07-01 00:00:00     1 03       PCR     BAJA C… BS           16 #> 3       0.667 2021-07-01 00:00:00     2 02       PCR     BAJA C… BC            3 #> 4       0.591 2021-07-01 00:00:00     2 03       PCR     BAJA C… BS           22 #> 5       0.417 2021-07-02 00:00:00     1 02       PCR     BAJA C… BC           12 #> 6       0.385 2021-07-02 00:00:00     1 03       PCR     BAJA C… BS           13 #> # … with 1 more variable: n_positivos <int>, and abbreviated variable names #> #   ¹​ENTIDAD_UM, ²​TIPO_PRUEBA, ³​ENTIDAD_FEDERATIVA, ⁴​ABREVIATURA, ⁵​n_pruebas  # Una vez hayas concluido tu trabajo no olvides desconectar datos_covid$disconnect() #> ✔ Desconectado"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/read_datos_abiertos.html","id":null,"dir":"Reference","previous_headings":"","what":"Lee la base de datos de la direccion general de epidemiologia que ya descargaste — read_datos_abiertos","title":"Lee la base de datos de la direccion general de epidemiologia que ya descargaste — read_datos_abiertos","text":"read_datos_abiertos Lee los datos abiertos almacenados en tu base de duckdb que bajaste con descarga_datos_abiertos. Intenta de manera automática determinar si los lee de duckdb, csv ó zip","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/read_datos_abiertos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Lee la base de datos de la direccion general de epidemiologia que ya descargaste — read_datos_abiertos","text":"","code":"read_datos_abiertos(   datos_abiertos_path = NULL,   dbdir = tempfile(fileext = \".duckdb\"),   tblname = \"covidmx\",   pragma_memory_limit = Sys.getenv(\"pragma_memory_limit\"),   drv = duckdb::duckdb(),   colClasses = get_col_class(),   read_format = c(\"duckdb\", \"tibble\"),   ... )"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/read_datos_abiertos.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"Lee la base de datos de la direccion general de epidemiologia que ya descargaste — read_datos_abiertos","text":"datos_abiertos_path (obligatorio) Camino los datos abiertos si son un zip, un csv o un .duckdb dbdir (opcional) Direccion donde guardar la base de datos con terminacion .duckdb. Corresponde al argumento de duckdb::dbConnect__duckdb_driver() tblname (opcional)  Nombre de la tabla de duckdb donde guardar los datos por default se llama covidmx. Solo es relevante si estas usando el mismo dbdir para otro proyecto distinto. pragma_memory_limit (opcional) Limite de memoria para el programa (ver PRAGMAS). Cambialo que sea mas o menos la mitad de tu RAM. La forma mas sencilla es como una variable ambiental con Sys.setenv('pragma_memory_limit' = '1GB') por ejemplo para un limite de 1 gigabyte. drv (opcional) Un  driver para dbConnect (default duckdb::duckdb()) colClasses (opcional) Clases de la columna para leer en duckdb::read_csv_duckdb(). read_format (opcional) \"duckdb\" o \"tibble\" establece el formato de lectura de la base de datos. En la mayoria de los casos \"tibble\" va resultar en un error de memoria. La opcion de \"duckdb\" siempre es mas rapida por lo cual es el default. ... (opcional) parametros adicionales para descarga_datos_abiertos()","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/read_datos_abiertos.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"Lee la base de datos de la direccion general de epidemiologia que ya descargaste — read_datos_abiertos","text":"Lista de valores: dats        - Tabla conectada mediante DBI::dbConnect (si duckdb) o tibble (si tibble) disconnect  - Funcion para cerrar la conexion la base de datos. dict        - Lista de tibbles con el diccionario de datos para cada variable","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/read_datos_abiertos.html","id":"nota","dir":"Reference","previous_headings":"","what":"Nota","title":"Lee la base de datos de la direccion general de epidemiologia que ya descargaste — read_datos_abiertos","text":"Para guardar tu base con duckdb cambia el dbdir un archivo .duckdb. Como ejemplo dbdir = \"ejemplo.duckdb\".","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/covidmx/reference/read_datos_abiertos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"Lee la base de datos de la direccion general de epidemiologia que ya descargaste — read_datos_abiertos","text":"","code":"if (FALSE) { # EJEMPLO 1: Lee los datos de duckdb una vez descargados datos_covid <- descarga_datos_abiertos(dbdir = \"ejemplo.duckdb\") # Descarga y genera duckdb datos_covid$disconnect()  datos_covid <- read_datos_abiertos(\"ejemplo.duckdb\") # Lee duckdb datos_covid$disconnect()  # EJEMPLO 2: Lee los datos desde un zip descargado direccion_zip <- descarga_db_datos_abiertos_tbl() # Descarga archivos de la DGE y guarda el zip datos_covid <- read_datos_abiertos(direccion_zip, dbdir = \"ejemplo.duckdb\") # Lee zip datos_covid$disconnect()  # EJEMPLO 3: Lee los datos desde un zip descargado direccion_zip <- descarga_db_datos_abiertos_tbl() # Descarga archivos zip de la DGE direccion_csv <- unzip_db_datos_abiertos_tbl(direccion_zip) # Descomprime el zip para tener csv datos_covid <- read_datos_abiertos(direccion_csv, dbdir = \"ejemplo.duckdb\") # Lee los csv datos_covid$disconnect()  # EJEMPLO 4: Si ya tenias el diccionario lo puedes agregar diccionario <- descarga_diccionario() # Simula la idea de ya tener el diccionario datos_covid <- read_datos_abiertos(\"ejemplo.duckdb\", diccionario = diccionario) datos_covid$disconnect()  # EJEMPLO 5: Si ya tenias el diccionario como archivo zip diccionario_zip <- descarga_db_diccionario_ssa() # Descarga el diccionario para tenerlo como zip datos_covid <- read_datos_abiertos(\"ejemplo.duckdb\", diccionario_zip_path = diccionario_zip) datos_covid$disconnect()  # EJEMPLO 6: Si ya tenias el diccionario como archivo xlsx diccionario_zip <- descarga_db_diccionario_ssa() # Descarga el diccionario para tenerlo como zip diccionario_csv <- unzip_db_diccionario_ssa(diccionario_zip) # Abre el csv del diccionario datos_covid <- read_datos_abiertos(\"ejemplo.duckdb\",   diccionario_unzipped_path = diccionario_csv ) datos_covid$disconnect() }"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/read_datos_abiertos_zip.html","id":null,"dir":"Reference","previous_headings":"","what":"Auxiliares de lectura para la base de la Direccion General de Epidemiologia — read_datos_abiertos_zip","title":"Auxiliares de lectura para la base de la Direccion General de Epidemiologia — read_datos_abiertos_zip","text":"La funcion principal es read_datos_abiertos() la cual decide si los lee de zip, duckdb o csv Tambien puedes usar las auxiliares respectivas read_datos_abiertos_zip()     Si sólo descargaste los datos de la DGE en .zip read_datos_abiertos_csv()     Si descargaste los datos de la DGE en .zip y los descomprimiste. read_datos_abiertos_duckdb()  Si ya creaste tu table en duckdb","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/read_datos_abiertos_zip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Auxiliares de lectura para la base de la Direccion General de Epidemiologia — read_datos_abiertos_zip","text":"","code":"read_datos_abiertos_zip(   datos_abiertos_zip_paths,   diccionario_zip_path = NULL,   diccionario_unzipped_path = NULL,   diccionario = NULL,   read_format = c(\"duckdb\", \"tibble\"),   tblname = \"covidmx\",   drv = duckdb::duckdb(),   dbdir = tempfile(fileext = \".duckdb\"),   colClasses = get_col_class(),   download_process = c(\"pins\", \"download.file\"),   site.covid.dic = paste0(\"http://datosabiertos.salud.\", \"gob.mx/gobmx/salud/datos_a\",     \"biertos/diccionario_datos_\", \"covid19.zip\"),   unzip_command = Sys.getenv(\"unzip_command\"),   unzip_args = Sys.getenv(\"unzip_args\"),   unzip_args_dict = list(exdir = \".\", overwrite = TRUE),   check_unzip_install = TRUE,   clear_zip = (download_process[1] != \"pins\"),   clear_csv = TRUE,   use_dict = TRUE,   quiet = FALSE,   cache_datos = NULL,   use_cache_on_failure = TRUE,   cache_diccionario = NULL,   force_download = FALSE,   show_warnings = TRUE,   board_url_name = \"datos_abiertos\",   board_url_name_dict = \"diccionario_covid\",   download_file_args = list(method = \"curl\", destfile = tempfile(), quiet = quiet),   descarga_db_diccionario_ssa_args = list(),   ... )  read_datos_abiertos_csv(   datos_abiertos_unzipped_path,   diccionario_zip_path = NULL,   diccionario_unzipped_path = NULL,   diccionario = NULL,   read_format = c(\"duckdb\", \"tibble\"),   tblname = \"covidmx\",   drv = duckdb::duckdb(),   dbdir = tempfile(fileext = \".duckdb\"),   colClasses = get_col_class(),   download_process = c(\"pins\", \"download.file\"),   site.covid.dic = paste0(\"http://datosabiertos.salud.\", \"gob.mx/gobmx/salud/datos_a\",     \"biertos/diccionario_datos_\", \"covid19.zip\"),   unzip_args_dict = list(exdir = \".\", overwrite = TRUE),   clear_csv = TRUE,   quiet = FALSE,   use_cache_on_failure = TRUE,   cache_diccionario = NULL,   force_download = FALSE,   show_warnings = TRUE,   board_url_name_dict = \"diccionario_covid\",   download_file_args = list(method = \"curl\", destfile = tempfile(), quiet = quiet),   descarga_db_diccionario_ssa_args = list(),   ... )  read_datos_abiertos_duckdb(   datos_abiertos_tbl,   drv = duckdb::duckdb(),   tblname = \"covidmx\",   pragma_memory_limit = Sys.getenv(\"pragma_memory_limit\"),   diccionario_zip_path = NULL,   diccionario_unzipped_path = NULL,   diccionario = NULL,   download_process = c(\"pins\", \"download.file\"),   site.covid.dic = paste0(\"http://datosabiertos.salud.\", \"gob.mx/gobmx/salud/datos_a\",     \"biertos/diccionario_datos_\", \"covid19.zip\"),   unzip_args_dict = list(exdir = \".\", overwrite = TRUE),   clear_zip = download_process[1] != \"pins\",   clear_csv = TRUE,   use_dict = TRUE,   quiet = FALSE,   use_cache_on_failure = TRUE,   cache_diccionario = NULL,   force_download = FALSE,   show_warnings = TRUE,   board_url_name_dict = \"diccionario_covid\",   download_file_args = list(method = \"curl\", destfile = tempfile(), quiet = quiet),   descarga_db_diccionario_ssa_args = list(),   ... )"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/read_datos_abiertos_zip.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"Auxiliares de lectura para la base de la Direccion General de Epidemiologia — read_datos_abiertos_zip","text":"datos_abiertos_zip_paths (opcional)  Camino los datos abiertos si ya los descargaste en zip diccionario_zip_path (opcional)  Camino al diccionario si ya losdescargaste en zip diccionario_unzipped_path (opcional)  Camino al diccionario csv si ya lo descargaste y descomprimiste el archivo zip en un csv diccionario (opcional)  Lo que resulta de realizar una descarga del diccionario usando descarga_diccionario read_format (opcional) \"duckdb\" o \"tibble\" establece el formato de lectura de la base de datos. En la mayoria de los casos \"tibble\" va resultar en un error de memoria. La opcion de \"duckdb\" siempre es mas rapida por lo cual es el default. tblname (opcional)  Nombre de la tabla de duckdb donde guardar los datos por default se llama covidmx. Solo es relevante si estas usando el mismo dbdir para otro proyecto distinto. drv (opcional) Un  driver para dbConnect (default duckdb::duckdb()) dbdir (opcional) Direccion donde guardar la base de datos con terminacion .duckdb. Corresponde al argumento de duckdb::dbConnect__duckdb_driver() colClasses (opcional) Clases de la columna para leer en duckdb::read_csv_duckdb(). download_process (opcional)  Metodo para descargar ya sea pins o download.file. Se recomienda pins pues guarda en memoria la fecha de la ultima descarga y analiza si ha pasado mas de un dia desde la descarga. En caso afirmativo verifica si el archivo ha cambiado y si hubo cambios entonces lo descarga. site.covid.dic (opcional)  Sitio desde el cual descarga del diccionario de datos. La ultima verificacion del sitio fue el 6 de septiembre 2022. unzip_command (opcional) Forma de extraer la base de datos de datos abiertos si unzip falla. La forma de llamarla es con system2(unzip_command, args = c(unzip_args, file_download_data)). unzip_args (opcional) Argumentos de extraccion de la base de datos de datos abiertos si unzip falla. La forma de llamarla es con system2(unzip_command, args = c(unzip_args, file_download_data)). unzip_args_dict (opcional) Lista de argumentos para usar utils::unzip en el diccionario de datos. check_unzip_install (opcional) Bandera de verificacion para checar si tienes lo necesario para unzippear los datos en el caso de que unzip sirva. clear_zip (opcional) Si borrar los archivos .zip descargados para el diccionario y los datos abiertos. se recomienda si estas usando pins. Ve la nota para mas informacion. clear_csv (opcional) Si borrar los archivos .csv que se generan despues de abrir el zip. El default es que si pues en general solo requieres el duckdb. use_dict (opcional) Si descargar el diccionario de site.covid.dic. quiet (opcional) Variable para mostrar mensajes cache_datos (opcional) Direccion donde guardar los datos en memoria usando pins para tener que volver descargarlos si nada ha cambiado use_cache_on_failure (opcional) Booleana. Establece que si se pueden descargar datos nuevos utilice los que tenga en memoria. Por default es TRUE. cache_diccionario (opcional) Direccion donde guardar el diccionario en memoria usando pins para tener que volver descargarlo si nada ha cambiado force_download (opcional) Analiza si cambio el pin y descarga datos nuevos en caso afirmativo aunque haya pasado menos de un dia. show_warnings (opcional) si arrojar warnings board_url_name (opcional) Establece el nombre del pins::board_url para los datos abiertos (si ya usas pins para que se empalme). Por default se llama datos_abiertos board_url_name_dict (opcional) Establece el nombre del pins::board_url para los datos abiertos. Por default se llama diccionario_covid download_file_args (opcional) Lista de argumentos adicionales para download.file de los datos si se elige este metodo para descargar. descarga_db_diccionario_ssa_args (opcional) Lista con argumentos adicionales para el pins::pin_download de datos abiertos ... (opcional) Parametros adicionales para DBI::dbConnect. datos_abiertos_unzipped_path (opcional)  Camino los datos abiertos csv si ya los descargaste y descomprimiste el archivo zip en un csv datos_abiertos_tbl (opcional) Camino un archivo .duckdb con los datos formateados pragma_memory_limit (opcional) Limite de memoria para el programa (ver PRAGMAS). Cambialo que sea mas o menos la mitad de tu RAM. La forma mas sencilla es como una variable ambiental con Sys.setenv('pragma_memory_limit' = '1GB') por ejemplo para un limite de 1 gigabyte.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/read_datos_abiertos_zip.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"Auxiliares de lectura para la base de la Direccion General de Epidemiologia — read_datos_abiertos_zip","text":"Lista de valores: dats        - Tabla conectada mediante DBI::dbConnect (si duckdb) o tibble (si tibble) disconnect  - Funcion para cerrar la conexion la base de datos. dict        - Lista de tibbles con el diccionario de datos para cada variable","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/read_datos_abiertos_zip.html","id":"nota","dir":"Reference","previous_headings":"","what":"Nota","title":"Auxiliares de lectura para la base de la Direccion General de Epidemiologia — read_datos_abiertos_zip","text":"Para guardar tu base con duckdb cambia el dbdir un archivo .duckdb. Como ejemplo dbdir = \"ejemplo.duckdb\".","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/read_datos_abiertos_zip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"Auxiliares de lectura para la base de la Direccion General de Epidemiologia — read_datos_abiertos_zip","text":"","code":"if (FALSE) { # Lee los datos de duckdb una vez descargados file_ejemplo <- \"datos.duckdb\" datos_covid <- descarga_datos_abiertos(dbdir = file_ejemplo) datos_covid$disconnect()  datos_covid <- read_datos_abiertos(file_ejemplo, show_warnings = FALSE) datos_covid$disconnect()  # Es lo mismo que: datos_covid <- read_datos_abiertos_duckdb(file_ejemplo, show_warnings = FALSE) datos_covid$disconnect()  # Descarga los datos y lee de un zip guardandolos a la vez en # base de nombre datos_desde_zip.duckdb direccion_zip <- descarga_db_datos_abiertos_tbl() datos_covid <- read_datos_abiertos(direccion_zip,   dbdir = \"datos_desde_zip.duckdb\",   show_warnings = FALSE ) datos_covid$disconnect()  # Es lo mismo que: datos_covid <- read_datos_abiertos_zip(direccion_zip,   dbdir = \"datos_desde_zip.duckdb\",   show_warnings = FALSE ) datos_covid$disconnect()  # Descarga los datos y lee de un csv direccion_zip <- descarga_db_datos_abiertos_tbl(show_warnings = FALSE) direccion_csv <- unzip_db_datos_abiertos_tbl(direccion_zip, show_warnings = FALSE) datos_covid <- read_datos_abiertos(direccion_csv, show_warnings = FALSE) datos_covid$disconnect()  # Es lo mismo que: datos_covid <- read_datos_abiertos_csv(direccion_csv, show_warnings = FALSE) datos_covid$disconnect() }"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/rt.html","id":null,"dir":"Reference","previous_headings":"","what":"RT: Número efectivo de reproducción — rt","title":"RT: Número efectivo de reproducción — rt","text":"rt Calcula el número efectivo de reproducción por fecha y entidad","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/rt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"RT: Número efectivo de reproducción — rt","text":"","code":"rt(   datos_covid = NULL,   entidades = c(\"AGUASCALIENTES\", \"BAJA CALIFORNIA\", \"BAJA CALIFORNIA SUR\", \"CAMPECHE\",     \"CHIAPAS\", \"CHIHUAHUA\", \"CIUDAD DE MÉXICO\", \"COAHUILA DE ZARAGOZA\", \"COLIMA\",     \"DURANGO\", \"GUANAJUATO\", \"GUERRERO\", \"HIDALGO\", \"JALISCO\", \"MÉXICO\",     \"MICHOACÁN DE OCAMPO\", \"MORELOS\", \"NAYARIT\", \"NUEVO LEÓN\", \"OAXACA\", \"PUEBLA\",     \"QUERÉTARO\", \"QUINTANA ROO\", \"SAN LUIS POTOSÍ\", \"SINALOA\", \"SONORA\", \"TABASCO\",     \"TAMAULIPAS\", \"TLAXCALA\", \"VERACRUZ DE IGNACIO DE LA LLAVE\", \"YUCATÁN\", \"ZACATECAS\"),   group_by_entidad = TRUE,   entidad_tipo = c(\"Unidad Medica\", \"Residencia\", \"Nacimiento\"),   fecha_tipo = c(\"Sintomas\", \"Ingreso\", \"Defuncion\"),   tipo_clasificacion = c(\"Sospechosos\", \"Confirmados COVID\", \"Negativo a COVID\",     \"Inválido\", \"No realizado\"),   tipo_paciente = c(\"AMBULATORIO\", \"HOSPITALIZADO\", \"NO ESPECIFICADO\"),   list_name = \"rt\",   min_date = as.Date(\"2021/11/21\", format = \"%Y/%m/%d\"),   method = \"parametric_si\",   config = EpiEstim::make_config(list(mean_si = 3.5, std_si = 1.5)),   ... )"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/rt.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"RT: Número efectivo de reproducción — rt","text":"datos_covid data available automatically downloads COVID-19 information. entidades Vector con las entidades de las unidades medicas analizar. Opciones: AGUASCALIENTES, BAJA CALIFORNIA, BAJA CALIFORNIA SUR, CAMPECHE, CHIAPAS, CHIHUAHUA, CIUDAD DE MEXICO, COAHUILA DE ZARAGOZA , COLIMA, DURANGO, GUANAJUATO, GUERRERO, HIDALGO, JALISCO, MEXICO, MICHOACAN DE OCAMPO, MORELOS,NAYARIT NUEVO LEON, OAXACA ,PUEBLA, QUERETARO,QUINTANA ROO, SAN LUIS POTOSI, SINALOA, SONORA, TABASCO, TAMAULIPAS,TLAXCALA, VERACRUZ DE IGNACIO DE LA LLAVE, YUCATAN, ZACATECAS group_by_entidad Si junta las entidades en una sola o bien las muestra por separado sin agrupar. entidad_tipo Selecciona Unidad Medica, Nacimiento o Residencia. por default incluye Unidad Medica fecha_tipo Selecciona Ingreso, Sintomas o Defuncion por default incluye fecha de Sintomas tipo_clasificacion Vector con el tipo de clasificaciones incluir: Sospechosos,Confirmados COVID, Negativo COVID, Inv\\u00e1lido, realizado tipo_paciente Vector con el tipo de pacientes incluir. Opciones: AMBULATORIO, HOSPITALIZADO, ESPECIFICADO list_name Asigna un nombre en la lista de datos la base generada min_date Mínima fecha partir de la cual estimar el RT method Method estimating RT EpiEstim::estimate_R config Configuration estimating RT EpiEstim::estimate_R ... Parámetros adicionales para EpiEstim::estimate_R.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/rt.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"RT: Número efectivo de reproducción — rt","text":"Appends la lista de datos_covid una nueva entrada de nombre list_name (default: casos) con una base de datos (tibble) con los resultados agregados. positividad - Base de datos generara con los datos agregados (el nombre cambia si se usa list_name). dict - Diccionario de datos dats - Datos originales (conexion DB) disconnect  - Funcion para desconectarte de DB","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/rt.html","id":"detalles","dir":"Reference","previous_headings":"","what":"Detalles","title":"RT: Número efectivo de reproducción — rt","text":"Por default calcula el número efectivo de reproducción por estado official product / este es un producto oficial","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/rt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"RT: Número efectivo de reproducción — rt","text":"","code":"if (FALSE) { datos_covid <- descarga_datos_abiertos(language = \"Espanol\")  #Casos a nivel nacional en los confirmados datos_covid <- datos_covid %>%         rt(tipo_clasificacion == \"Confirmados COVID\",           group_by_entidad = FALSE)  #Casos en AGS, CHI en los confirmados datos_covid <- datos_covid %>%         rt(entidades = c(\"CHIHUAHUA\",\"AGUASCALIENTES\"),           tipo_clasificacion == \"Confirmados COVID\",           group_by_entidad = TRUE) }"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/update_covidmx.html","id":null,"dir":"Reference","previous_headings":"","what":"Actualiza el paquete covidmx — update_covidmx","title":"Actualiza el paquete covidmx — update_covidmx","text":"Descarga e instala la version mas reciente de covidmx desde Github https://github.com/RodrigoZepeda/covidmx","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/update_covidmx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Actualiza el paquete covidmx — update_covidmx","text":"","code":"update_covidmx(quiet = FALSE, force = FALSE, ...)"},{"path":"https://rodrigozepeda.github.io/covidmx/reference/update_covidmx.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"Actualiza el paquete covidmx — update_covidmx","text":"quiet (opcional) Determina si instalar en silencio force (opcional) Determina si forzar la reinstalacion ... (opcional) Parametros adicionales para remotes::install_github()","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/update_covidmx.html","id":"nota","dir":"Reference","previous_headings":"","what":"Nota","title":"Actualiza el paquete covidmx — update_covidmx","text":"Actualiza el paquete instalando todas las dependencias necesarias.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/reference/update_covidmx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"Actualiza el paquete covidmx — update_covidmx","text":"","code":"if (FALSE) { # Actualiza el paquete de coivdmx update_covidmx() }"},{"path":"https://rodrigozepeda.github.io/covidmx/news/index.html","id":"covidmx-0710000","dir":"Changelog","previous_headings":"","what":"covidmx 0.7.1.0000","title":"covidmx 0.7.1.0000","text":"Se cambió la base de ejemplo por una más pequeña y con mejor compresión","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/news/index.html","id":"covidmx-0702000","dir":"Changelog","previous_headings":"","what":"covidmx 0.7.0.2000","title":"covidmx 0.7.0.2000","text":"Se arreglaron las notas sobre el manual del pdf en LaTeX Se quitaron el README.md y el NEWS.md del build Se arreglo el archivo que estaba guardado como non-ascii","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/news/index.html","id":"covidmx-0701000","dir":"Changelog","previous_headings":"","what":"covidmx 0.7.0.1000","title":"covidmx 0.7.0.1000","text":"Se arreglaron los headings del README.md Se arregló que la función update_covidmx se exportaba.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/news/index.html","id":"covidmx-0700000","dir":"Changelog","previous_headings":"","what":"covidmx 0.7.0.0000","title":"covidmx 0.7.0.0000","text":"Se arregló un bug que ocasionaba que cfr y chr regresaran NaN en lugar de NA cuando usabas la opción fill_NA. Se arregló que los casos eran un tibble vacío si se reportaban casos con esas condiciones pesar del fill_zeros = TRUE. Por ejemplo esto antes devolvía: Se mejoró la selección de variables automática en plot_covid para evitar que una df_covariate sea tambien una df_variable. Se arregló un bug que impedía la agrupación por otras covariables de cfr y chr.","code":"datos_covid <- datosabiertos datos_covid <- datos_covid |> casos(tipo_sector = \"DIF\", fill_zeros = TRUE) datos_covid$casos  #ANTES (ERROR) # A tibble: 0 × 5 # … with 5 variables: FECHA_SINTOMAS <dttm>, ENTIDAD_UM <chr>, n <int>, ENTIDAD_FEDERATIVA <chr>, #   ABREVIATURA <chr> # ℹ Use `colnames()` to see all variable names  #AHORA # A tibble: 126 × 5 #   FECHA_SINTOMAS      ENTIDAD_UM     n ENTIDAD_FEDERATIVA  ABREVIATURA #   <dttm>              <chr>      <int> <chr>               <chr>       # 1 2021-07-01 00:00:00 02             0 BAJA CALIFORNIA     BC          # 2 2021-07-01 00:00:00 03             0 BAJA CALIFORNIA SUR BS          # 3 2021-07-02 00:00:00 02             0 BAJA CALIFORNIA     BC          # 4 2021-07-02 00:00:00 03             0 BAJA CALIFORNIA SUR BS          # 5 2021-07-03 00:00:00 02             0 BAJA CALIFORNIA     BC"},{"path":"https://rodrigozepeda.github.io/covidmx/news/index.html","id":"covidmx-0621000","dir":"Changelog","previous_headings":"","what":"covidmx 0.6.2.1000","title":"covidmx 0.6.2.1000","text":"Se mejoraron los ejemplos y la ayuda de casos.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/news/index.html","id":"covidmx-0620000","dir":"Changelog","previous_headings":"","what":"covidmx 0.6.2.0000","title":"covidmx 0.6.2.0000","text":"Se corrigieron los menús de ayuda para ser más informativos. Se agrego la funcion update_covidmx para actualizar desde github. Se cambio el mensaje de inicio.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/news/index.html","id":"covidmx-0612000","dir":"Changelog","previous_headings":"","what":"covidmx 0.6.1.2000","title":"covidmx 0.6.1.2000","text":"Se corrigieron los menús de ayuda para ser más informativos.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/news/index.html","id":"covidmx-0611000","dir":"Changelog","previous_headings":"","what":"covidmx 0.6.1.1000","title":"covidmx 0.6.1.1000","text":"Se agregan preguntas al FAQ.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/news/index.html","id":"covidmx-0610000","dir":"Changelog","previous_headings":"","what":"covidmx 0.6.1.0000","title":"covidmx 0.6.1.0000","text":"Se agregó IMSS la licencia. Se arregló un test que se rompía en windows relacionado con este issue de duckdb.","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/covidmx/news/index.html","id":"breaking-changes-0-6-0-0000","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"covidmx 0.6.0.0000","text":"Se eliminó MariaDB y ahora se utiliza duckdb. Se eliminó el requerimiento de instalar herramientas para abrir el zip. Se eliminó la dependencia de glue y se agregó una de cli.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/news/index.html","id":"covidmx-0510000","dir":"Changelog","previous_headings":"","what":"covidmx 0.5.1.0000","title":"covidmx 0.5.1.0000","text":"Se eliminó el chequeo de MariaDBhasDefault para los sistemas donde hay conexión pesar de tener el default.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/news/index.html","id":"covidmx-0500000","dir":"Changelog","previous_headings":"","what":"covidmx 0.5.0.0000","title":"covidmx 0.5.0.0000","text":"Se agregó la nueva variable driver las conexiones MariaDB para permitir otro tipo de SQL. Se agregó la variable sqlimport para que eventualmente se pueda cambiar mysqlimport mariadb-import por el cambio en MariaDB acá. Se arregló un error donde se asignaba bien el cache del diccionario.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/news/index.html","id":"covidmx-0420000","dir":"Changelog","previous_headings":"","what":"covidmx 0.4.2.0000","title":"covidmx 0.4.2.0000","text":"Se arregló el bug que eliminaba la descarga en csv si ésta se parseaba en tibble.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/news/index.html","id":"covidmx-0410000","dir":"Changelog","previous_headings":"","what":"covidmx 0.4.1.0000","title":"covidmx 0.4.1.0000","text":"Se arregló el bug que impedía seleccionar solo Antígeno como pruebas en numero_pruebas Se arregló el bug que impedía seleccionar solo Antígeno como pruebas en positividad Se arregló el bug que impedía seleccionar Defuncón como fecha_tipo en numero_pruebas Se agregó la opción de quiet positividad","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/news/index.html","id":"covidmx-0400000","dir":"Changelog","previous_headings":"","what":"covidmx 0.4.0.0000","title":"covidmx 0.4.0.0000","text":"Se arregló bug que al filtrar por IMSS devolvía IMSS-BIENESTAR en tipo_sector Se arregló bug que al filtrar por devolvía ESPECIFICADO en tipo_paciente Se agregaron tests y se conectò codecov.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/news/index.html","id":"covidmx-0300000","dir":"Changelog","previous_headings":"","what":"covidmx 0.3.0.0000","title":"covidmx 0.3.0.0000","text":"Se arregló un bug que al filtrar por BAJA CALIFORNIA también devolvía BAJA CALIFORNIA SUR en casos. Se agregó un dataset datosabiertos para poder probar funciones sobre ese data. Se cambió el tutorial una tabla llamada tblname para que sea más rápido que la descarga y creación del repositorio de Github. Se agregó el parámetro max_date estima_rt para mejorar la estimación de la ventana de tiempo del RT. Se eliminó que casos por default descargue los datos si tiene un input o si su input es vacío pues generaba un bug cuando el elemento de la lista estaba. Se agregó un mensaje onAttach y se eliminaron mensajes al descargar archivos.","code":""},{"path":"https://rodrigozepeda.github.io/covidmx/news/index.html","id":"covidmx-0200000","dir":"Changelog","previous_headings":"","what":"covidmx 0.2.0.0000","title":"covidmx 0.2.0.0000","text":"Agregué NEWS.md La descarga y lectura ahora es más robusta con funciones para trabajar si descargaste pero se interrumpió el unzip o tienes el csv pero lo leíste. Checa descarga_datos_abiertos y read_datos_abiertos. La descarga de archivos tiene una nueva estructura inspirada en pins que lee de memoria (cache) si ha pasado más de un día de la descarga, si ya pasó más de un día pero detecta que el archivo en línea es idéntico al que tienes en memoria o si tienes Internet. Se cambió rt por estima_rt para ocasionar problemas con la distribución de Student en stats::rt.","code":""}]
